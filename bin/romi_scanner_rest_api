#!/usr/bin/env python3
from flask import Flask, send_file
from flask import request, send_from_directory
import json
from flask_restful import Resource, Api
import os
from romidata import io
from romidata import FSDB as DB
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
api = Api(app)

try:
    db_location = os.environ["DB_LOCATION"]
except:
    raise ValueError("DB_LOCATION environment variable is not set")

try:
    db_prefix = os.environ["DB_PREFIX"]
except:
    db_prefix = "/files/"

db = DB(db_location)
db.connect()

print("n scans = %i"%len(db.get_scans()))

def fmt_date(scan):
    try:
        x = scan.id
        date, time = x.split('_')
        time = time.replace('-', ':')
    except:
        date, time = "01-01-00","00:00:00"
    return "%s %s" % (date, time)


def compute_fileset_matches(scan):
    filesets_matches = {}
    for fs in scan.get_filesets():
        x = fs.id.split('_')[0]
        filesets_matches[x] = fs.id
    return filesets_matches

def get_path(f):
    fs = f.fileset
    scan = fs.scan
    return os.path.join(db_prefix, scan.id, fs.id, f.filename)

def fmt_scan_minimal(scan):
    metadata = scan.get_metadata()
    try:
        species = metadata['object']['species']
    except:
        species = "N/A"
    try:
        environment = metadata['object']['environment']
    except:
        environment = "N/A"
    try:
        plant = metadata['object']['plant_id']
    except:
        plant = "N/A"

    n_photos = len(scan.get_fileset('images').get_files())

    fileset_visu = scan.get_fileset("Visualization")
    files_metadata = fileset_visu.get_metadata("files")
    first_thumbnail_path = get_path(fileset_visu.get_file(files_metadata["thumbnails"][0]))
    print(files_metadata["zip"])

    has_mesh = files_metadata["mesh"] is not None
    has_point_cloud = files_metadata["point_cloud"] is not None
    has_skeleton = files_metadata["skeleton"] is not None
    has_angles = files_metadata["angles"] is not None

    return {
        "id": scan.id,
        "metadata": {
            "date": fmt_date(scan),
            "species": species,
            "plant": plant,
            "environment": environment,
            "nbPhotos": n_photos,
            "files": {
                "metadatas": os.path.join(db_prefix, scan.id, "metadata/metadata.json"),
                "archive": get_path(fileset_visu.get_file(files_metadata["zip"]))
            }
        },
        "thumbnailUri": first_thumbnail_path,
        "hasMesh": has_mesh,
        "hasPointCloud": has_point_cloud,
        "hasSkeleton": has_skeleton,
        "hasAngleData": has_angles
    }


def fmt_scans(scans, query):
    res = []
    for scan in scans:
        filesets_matches = compute_fileset_matches(scan)
        if 'Visualization' in filesets_matches:
            metadata = scan.get_metadata()
            if query is not None and not (query.lower() in json.dumps(metadata).lower()):
                continue
            res.append(fmt_scan_minimal(scan))
    return res


def fmt_scan(scan):
    fileset_visu = scan.get_fileset("Visualization")
    files_metadata = fileset_visu.get_metadata("files")

    res = fmt_scan_minimal(scan)
    metadata = scan.get_metadata()

    files_uri = {}
    if(res["hasMesh"]):
        files_uri["mesh"] = get_path(fileset_visu.get_file(files_metadata["mesh"]))
    if(res["hasPointCloud"]):
        files_uri["pointCloud"] = get_path(fileset_visu.get_file(files_metadata["point_cloud"]))

    res["filesUri"] = files_uri
    res["data"] = {}

    if(res["hasSkeleton"]):
        x = io.read_json(fileset_visu.get_file(files_metadata["skeleton"]))
        res["data"]["skeleton"] = x

    if(res["hasAngleData"]):
        x = io.read_json(fileset_visu.get_file(files_metadata["angles"]))
        res["data"]["angles"] = x

        try:
            res["data"]["angles"]["measured_angles"] = metadata["measures"]["angles"]
        except:
            pass


    res["workspace"] = metadata["scanner"]["workspace"]
    res["camera"] = {}

    res["camera"]["model"] = metadata["computed"]["camera_model"]
    res["camera"]["poses"] = []

    poses = io.read_json(fileset_visu.get_file(files_metadata["poses"]))

    for i, im in enumerate(files_metadata["images"]):
        f = fileset_visu.get_file(im) 
        id = f.get_metadata("image_id")
        for k in poses.keys():
            if os.path.splitext(poses[k]['name'])[0] == id:
                res['camera']['poses'].append({
                    'id': id,
                    'tvec': poses[k]['tvec'],
                    'rotmat': poses[k]['rotmat'],
                    'photoUri': get_path(f),
                    'thumbnailUri': get_path(fileset_visu.get_file(files_metadata["thumbnails"][i]))})
                break
    return res


class ScanList(Resource):
    def get(self):
        query=request.args.get('filterQuery')
        scans=fmt_scans(db.get_scans(), query=query)
        return scans


class Scan(Resource):
    def get(self, scan_id):
        scan=db.get_scan(scan_id)
        return fmt_scan(scan)

class File(Resource):
    def get(self, path):
        return send_from_directory(db_location, path)

class Refresh(Resource):
    def get(self):
        global db
        db.disconnect()
        db.connect()
        return 200

api.add_resource(ScanList, '/scans')
api.add_resource(Scan, '/scans/<scan_id>')
api.add_resource(File, '/files/<path:path>')
api.add_resource(Refresh, '/refresh')

if __name__ == "__main__":
    app.run(host='0.0.0.0')

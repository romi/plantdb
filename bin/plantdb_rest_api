#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Serve the plant database through a REST API."""

import argparse
import logging
import os
import sys
from time import sleep

from flask import Flask
from flask_cors import CORS
from flask_restful import Api

from plantdb.fsdb import FSDB
from plantdb.log import configure_logger
from plantdb.rest_api import File
from plantdb.rest_api import Image
from plantdb.rest_api import Mesh
from plantdb.rest_api import PointCloud
from plantdb.rest_api import PointCloudGroundTruth
from plantdb.rest_api import Refresh
from plantdb.rest_api import Scan
from plantdb.rest_api import ScanList


def parsing():
    parser = argparse.ArgumentParser(description='Serve a local plantdb database (FSDB) through a REST API.')
    parser.add_argument('-db', '--db_location', type=str, default="",
                        help='location of the database to serve')
    parser.add_argument('-prefix', '--db_prefix', type=str, default="",
                        help='prefix to use with the database')

    app_args = parser.add_argument_group("webserver options")
    app_args.add_argument('--host', type=str, default="0.0.0.0",
                          help="the hostname to listen on")
    app_args.add_argument('--port', type=int, default=5000,
                          help="the port of the webserver")
    app_args.add_argument('--debug', action='store_true',
                          help="enable debug mode")

    return parser


if __name__ == '__main__':
    parser = parsing()
    args = parser.parse_args()

    app = Flask(__name__)
    CORS(app)
    api = Api(app)

    global db_location
    global db_prefix

    if args.db_location == "":
        try:
            db_location = os.environ["ROMI_DB"]
        except KeyError:
            raise ValueError("ROMI_DB environment variable is not set")
    else:
        db_location = args.db_location

    if args.db_prefix == "":
        try:
            db_prefix = os.environ["DB_PREFIX"]
        except KeyError:
            db_prefix = "/files/"

    # Initialize RESTful resources to serve:
    api.add_resource(ScanList, '/scans',
                     resource_class_args=tuple([db]))
    api.add_resource(Scan, '/scans/<scan_id>',
                     resource_class_args=tuple([db]))
    api.add_resource(File, '/files/<path:path>',
                     resource_class_args=tuple([db]))
    api.add_resource(Refresh, '/refresh',
                     resource_class_args=tuple([db]))
    api.add_resource(Image, '/image/<string:scan_id>/<string:fileset_id>/<string:file_id>',
                     resource_class_args=tuple([db]))
    api.add_resource(PointCloud, '/pointcloud/<string:scan_id>/<string:fileset_id>/<string:file_id>',
                     resource_class_args=tuple([db]))
    api.add_resource(PointCloudGroundTruth, '/pcGroundTruth/<string:scan_id>/<string:fileset_id>/<string:file_id>',
                     resource_class_args=tuple([db]))
    api.add_resource(Mesh, '/mesh/<string:scan_id>/<string:fileset_id>/<string:file_id>',
                     resource_class_args=tuple([db]))

    # Start the Flask application:
    app.run(host=args.host, port=args.port, debug=args.debug)

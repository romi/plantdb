{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PlantDB","text":"<p>For full documentation of the ROMI project visit docs.romi-project.eu.</p>"},{"location":"#about","title":"About","text":"<p>This library is intended to:</p> <ol> <li>provide a Python API to interact with the data, as for the <code>plant-3d-vision</code> library</li> <li>run in the background as a REST API serving JSON information from the DB, as for the <code>plant-3d-explorer</code> library</li> </ol>"},{"location":"#getting-started","title":"Getting started","text":"<p>To install the <code>plantdb</code> conda package in an existing environment, first activate it, then proceed as follows: <pre><code>conda install plantdb -c romi-eu\n</code></pre></p>"},{"location":"rest_api/","title":"PlantDB REST API","text":"<p>Hereafter we introduce the URLS to use to communicate via the REST API. The Python implementation is done in the <code>plantdb.rest_api</code> module and the CLI to start a Flask server is in <code>fsdb_rest_api</code>.</p>"},{"location":"rest_api/#rest-urls","title":"REST URLs","text":""},{"location":"rest_api/#scans","title":"<code>/scans</code>","text":"<p>Here are the specifications for the <code>/scans</code> URL:</p> <ul> <li>Resource: <code>plantdb.rest_api.ScanList</code></li> <li>Arguments: <code>filterQuery</code></li> <li>Returns: a JSON compliant list of dictionaries.</li> <li>Example:<ul> <li>Get all scans: http://127.0.0.1:5000/scans</li> <li>Search for \"arabidopsis\" in metadata: http://127.0.0.1:5000/scans?filterQuery=arabidopsis</li> </ul> </li> </ul>"},{"location":"rest_api/#scansscan_id","title":"<code>/scans/&lt;scan_id&gt;</code>","text":"<p>Here are the specifications for the <code>/scans/&lt;scan_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Scan</code></li> <li>Arguments: none</li> <li>Returns: a JSON compliant list of dictionaries with detailed information about the scan dataset</li> <li>Examples with the test database:<ul> <li>Get scan info for the <code>\"real_plant_analyzed\"</code> dataset: http://127.0.0.1:5000/scans/real_plant_analyzed</li> <li>Get scan info for the <code>\"virtual_plant_analyzed\"</code> dataset: http://127.0.0.1:5000/scans/virtual_plant_analyzed</li> </ul> </li> </ul> <p>Warning</p> <p>This requires the <code>Colmap</code> task! In other words it will fail (response <code>500</code>) if this task is missing from the dataset.</p>"},{"location":"rest_api/#filespath","title":"<code>/files/&lt;path&gt;</code>","text":"<p>Here are the specifications for the <code>/files/&lt;path&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.File</code></li> <li>Arguments: none</li> <li>Returns: The content of the file.</li> <li>Examples  <code>real_plant_analyzed</code> dataset (from the test database):<ul> <li>Get the first image of the scan (<code>00000_rgb</code>): http://127.0.0.1:5000/files/real_plant_analyzed/images/00000_rgb.jpg</li> <li>Get the first mask image of the scan (<code>00000_rgb</code>): http://127.0.0.1:5000/files/real_plant_analyzed/Masks_1__0__1__0_channel_rgb_5619aa428d/00000_rgb.png</li> </ul> </li> </ul>"},{"location":"rest_api/#archivescan_id","title":"<code>/archive/&lt;scan_id&gt;</code>","text":"<p>Here are the specifications for the <code>/archive/&lt;scan_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Archive</code></li> <li>Arguments: none</li> <li>Returns: A zip file containing the dataset.</li> <li>Examples:<ul> <li>Get <code>real_plant_analyzed</code> archive: http://127.0.0.1:5000/archive/real_plant_analyzed/</li> <li>Get <code>virtual_plant_analyzed</code> archive: http://127.0.0.1:5000/archive/virtual_plant_analyzed/</li> </ul> </li> </ul>"},{"location":"rest_api/#imagescan_idfileset_idfile_id","title":"<code>/image/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/image/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Image</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>, <code>large</code>, <code>thumb</code>} to control the max size (width or height) of the image to return.</li> <li>Returns: The image file, resized by default.</li> <li>Examples with the <code>real_plant_analyzed</code> dataset (from the test database) and the first image of the scan (<code>00000_rgb</code>):<ul> <li>Get the preview image: http://127.0.0.1:5000/image/real_plant_analyzed/images/00000_rgb</li> <li>Get the original image: http://127.0.0.1:5000/image/real_plant_analyzed/images/00000_rgb?size=orig</li> </ul> </li> </ul>"},{"location":"rest_api/#pointcloudscan_idfileset_idfile_id","title":"<code>/pointcloud/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/pointcloud/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.PointCloud</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>, <code>preview</code>} or a <code>float</code> to control the voxel-size of the pointcloud to returns.</li> <li>Returns: The point cloud file, preview size by default.</li> <li>Examples with the <code>real_plant_analyzed</code> dataset:<ul> <li>Get the preview point cloud: http://127.0.0.1:5000/pointcloud/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud</li> <li>Get the original point cloud: http://127.0.0.1:5000/pointcloud/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud?size=orig</li> <li>Get the point cloud with a voxel size of <code>2.3</code>: http://127.0.0.1:5000/pointcloud/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud?size=2.3</li> </ul> </li> </ul>"},{"location":"rest_api/#pcgroundtruthscan_idfileset_idfile_id","title":"<code>/pcGroundTruth/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/pcGroundTruth/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.PointCloudGroundTruth</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>, <code>preview</code>} or a <code>float</code> to control the voxel-size of the pointcloud to returns.</li> <li>Returns: The ground-truth pointcloud file, original size by default.</li> </ul>"},{"location":"rest_api/#meshscan_idfileset_idfile_id","title":"<code>/mesh/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/mesh/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Mesh</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>}, no control of the size of the mesh to returns.</li> <li>Returns: The mesh file, original size by default.</li> <li>Examples with the <code>real_plant_analyzed</code> dataset:<ul> <li>Get the original mesh: http://127.0.0.1:5000/mesh/real_plant_analyzed/TriangleMesh_9_most_connected_t_open3d_00e095c359/TriangleMesh</li> </ul> </li> </ul>"},{"location":"rest_api/#refresh","title":"<code>/refresh</code>","text":"<p>Refresh the list of scans in the <code>plantdb.fsdb.FSDB</code> database.</p> <p>Here are the specifications for the <code>/refresh</code> URL:</p> <ul> <li>Resource: <code>plantdb.rest_api.Refresh</code></li> <li>Arguments: none</li> <li>Returns: <code>200</code> on completion.</li> <li>Example: http://127.0.0.1:5000/refresh</li> </ul>"},{"location":"rest_api/#scan-summary","title":"Scan summary","text":"<p>Information about scans dataset, obtained with the '/scans' URL, are grouped in a JSON dictionary. The template can be accessed here: <code>plantdb.rest_api.get_scan_template</code></p> <p>It is organized as follows:</p> <pre><code>{\n  \"id\": \"scan_id\",\n  \"metadata\": {\n    \"date\": \"01-01-00 00:00:00\",\n    \"species\": \"N/A\",\n    \"plant\": \"N/A\",\n    \"environment\": \"N/A\",\n    \"nbPhotos\": 0,\n    \"files\": {\n      \"metadatas\": null,\n      \"archive\": null\n    }\n  },\n  \"thumbnailUri\": \"\",\n  \"hasPointCloud\": false,\n  \"hasMesh\": false,\n  \"hasSkeleton\": false,\n  \"hasTreeGraph\": false,\n  \"hasAngleData\": false,\n  \"hasAutomatedMeasures\": false,\n  \"hasManualMeasures\": false,\n  \"hasSegmentation2D\": false,\n  \"hasPcdGroundTruth\": false,\n  \"hasPointCloudEvaluation\": false,\n  \"hasSegmentedPointCloud\": false,\n  \"error\": false\n  }\n</code></pre>"},{"location":"rest_api/#id","title":"id","text":"<p>The name of the corresponding scan dataset.</p>"},{"location":"rest_api/#metadata","title":"metadata","text":"<p>Some metadata gathered from the corresponding scan dataset.</p> <p>JSON dictionary with fields:</p> <ul> <li>\"date\": String, example \"2019-02-01 13:35:42\"</li> <li>\"plant\": String</li> <li>\"species\": String</li> <li>\"nbPhotos\": Number</li> <li>\"environment\": String</li> <li>\"files\": Object<ul> <li>\"files.metadatas\": String, URL, example \"/files//metadata/metadata.json\" <li>\"files.archive\": String, URL, example \"/files//Visualization/scan.zip\""},{"location":"rest_api/#thumbnailuri","title":"thumbnailUri","text":"<p>A path to the thumbnail image to use as \"preview\" to represent the dataset in the webapp. * thumbnailUri: example \"/files//Visualization/thumbnail_pict20190201_134037_0.jpg\""},{"location":"rest_api/#has","title":"has*","text":"<p>All of the <code>has*</code> entries indicate if there is an output for a list of selected tasks:</p> <ul> <li><code>hasPointCloud</code>: output of the task <code>PointCloud</code> has a <code>PointCloud.ply</code> file</li> <li><code>hasMesh</code>: output of the task <code>TriangleMesh</code> has a <code>TriangleMesh.ply</code> file</li> <li><code>hasSkeleton</code>: output of the task <code>CurveSkeleton</code> has a <code>CurveSkeleton.json</code> file</li> <li><code>hasAngleData</code>: output of the task <code>AngleAndInternodes</code> has a <code>AnglesAndInternodes.json</code> file</li> <li><code>hasAutomatedMeasures</code>: output of the task <code>AutomatedMeasures</code> has a <code>AnglesAndInternodes</code> file</li> <li><code>hasSegmentation2D</code>: output of the task <code>Segmentation2D</code> has a `` file</li> <li><code>hasSegmentedPcdEvaluation</code>: output of the task <code>Segmentation2DEvaluation</code> has a `` file</li> <li><code>hasPointCloudEvaluation</code>: output of the task <code>PointCloudEvaluation</code> has a `` file</li> <li><code>hasSegmentedPointCloud</code>: output of the task <code>SegmentedPointCloud</code> has a <code>SegmentedPointCloud.ply</code> file</li> <li><code>hasPcdGroundTruth</code>: output of the task <code>PointCloudGroundTruth</code> has a <code>PointCloudGroundTruth.ply</code> file</li> </ul> <p>Finally, <code>hasManualMeasures</code> refers to the presence of a JSON file with manual measurements saved as <code>measures.json</code>. This file should be present at the scan dataset root directory.</p>"},{"location":"rest_api/#scan-detailed-summary","title":"Scan detailed summary","text":"<p>Information about a specific scan dataset, obtained with the '/scans/' URL, are grouped in a JSON dictionary. <p>It has the same information as those gathered with the '/scans' URL, but also add:   * the files URI when the following <code>has*</code> entries are <code>True</code>:     * <code>hasPointCloud</code>, under <code>\"filesUri\"/\"pointCloud\"</code>     * <code>hasMesh</code>, under <code>\"filesUri\"/\"mesh\"</code>     * <code>hasSkeleton</code>, under <code>\"filesUri\"/\"skeleton\"</code>     * <code>hasTreeGraph</code>, under <code>\"filesUri\"/\"tree\"</code>   * the files data when the following <code>has*</code> entries are <code>True</code>:      * <code>hasSkeleton</code>, under <code>\"data\"/\"skeleton\"</code>     * <code>hasAngleData</code>, under:       * <code>\"data\"/\"angles\"/\"angles\"</code> for the angle values       * <code>\"data\"/\"angles\"/\"internodes\"</code> for the internodes values     * <code>hasManualMeasures</code>, under:       *   <code>\"data\"/\"angles\"/\"measured_angles\"</code> for the angle values       *   <code>\"data\"/\"angles\"/\"measured_internodes\"</code> for the internodes values   * the reconstruction bounding-box (formerly known as 'workspace') under <code>\"workspace\"</code>, for example <code>\"{\"x\": [340, 440], \"y\": [330, 410], \"z\": [-180, 105]}\"</code>   * the camera model and its intrinsics parameters under <code>\"camera\"/\"model\"</code>, see here for more details   * the list of camera poses, a.k.a. extrinsic parameters, under <code>\"camera\"/\"poses\"</code>, see here for more details</p>"},{"location":"rest_api/#camera-model","title":"Camera model","text":"<p>The details about the camera poses accessible under <code>\"camera\"/\"model\"</code> are:   * <code>id</code>: the id of the camera model, should always be <code>1</code> if we use a single camera   * <code>model</code>: the name of the camera model, should always be 'OPENCV' as this is how we save it   * <code>width</code>: the width of the images   * <code>height</code>: the height of the images   * <code>params</code>: the 'OPENCV' intrinsic camera parameters, that is <code>fx</code>, <code>fy</code>, <code>cx</code>, <code>cy</code>, <code>k1</code>, <code>k2</code>, <code>p1</code>, <code>p2</code>.  </p> <p>For example with the first image: <pre><code>{\n  \"id\": 1,\n  \"model\": \"OPENCV\",\n  \"width\": 1440,\n  \"height\": 1080,\n  \"params\": [1166.9518889440105, 1166.9518889440105, 720, 540, -0.0013571157486977348, -0.0013571157486977348, 0, 0]\n}\n</code></pre></p>"},{"location":"rest_api/#camera-poses","title":"Camera poses","text":"<p>The details about the camera poses accessible under <code>\"camera\"/\"poses\"</code> are:   * \"id\": index of the picture (starts at 1 by COLMAP convention)   * \"rotmat\": Rotation matrix, 3x3 array    * \"tvec\": Translation vector, 3x1 array   * \"thumbnailUri\": URI to the thumbnail image, example \"/images//images/?size=thumb.jpg\"   * \"photoUri\": URI to the original image, example \"/images//images/?size=orig.jpg\" <p>For example with the first image: <pre><code>{\n  \"id\": 1,\n  \"tvec\": [369.4279687732083, 120.36109311437637, -62.07043190848918],\n  \"rotmat\": [\n    [0.06475585405884698, -0.9971710205080586, 0.038165890845442085],\n    [-0.3390191175518756, -0.0579549181538338, -0.9389926865509284],\n    [0.9385481965778085, 0.04786630673761355, -0.34181295964290737]\n  ],\n  \"photoUri\": \"/tmp/ROMI_DB/real_plant_analyzed/images/00000_rgb.jpg\",\n  \"thumbnailUri\": \"/tmp/ROMI_DB/real_plant_analyzed/webcache/6fbae08f195837c511af7c2864d075dd5cd153bc.jpeg\", \n  \"isMatched\": true\n}\n</code></pre></p>"}]}
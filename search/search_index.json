{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PlantDB","text":"<p>For full documentation of the ROMI project visit docs.romi-project.eu.</p>"},{"location":"#about","title":"About","text":"<p>This library is intended to:</p> <ol> <li>provide a Python API to interact with the data, as for the <code>plant-3d-vision</code> library</li> <li>run in the background as a REST API serving JSON information from the DB, as for the <code>plant-3d-explorer</code> library</li> </ol>"},{"location":"#getting-started","title":"Getting started","text":"<p>To install the <code>plantdb</code> conda package in an existing environment, first activate it, then proceed as follows: <pre><code>conda install plantdb -c romi-eu\n</code></pre></p>"},{"location":"rest_api/","title":"PlantDB REST API","text":"<p>Hereafter we introduce the URLS to use to communicate via the REST API. The Python implementation is done in the <code>plantdb.rest_api</code> module and the CLI to start a Flask server is in <code>fsdb_rest_api</code>.</p>"},{"location":"rest_api/#rest-urls","title":"REST URLs","text":""},{"location":"rest_api/#scans","title":"<code>/scans</code>","text":"<p>Here are the specifications for the <code>/scans</code> URL:</p> <ul> <li>Resource: <code>plantdb.rest_api.ScanList</code></li> <li>Arguments: <code>filterQuery</code></li> <li>Returns: a JSON compliant list of dictionaries.</li> <li>Example:</li> <li>Get all scans:   http://127.0.0.1:5000/scans</li> <li>Search for \"arabidopsis\" in metadata:   http://127.0.0.1:5000/scans?filterQuery=arabidopsis</li> </ul>"},{"location":"rest_api/#scansscan_id","title":"<code>/scans/&lt;scan_id&gt;</code>","text":"<p>Here are the specifications for the <code>/scans/&lt;scan_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Scan</code></li> <li>Arguments: none</li> <li>Returns: a JSON compliant list of dictionaries with detailed information about the scan dataset</li> <li>Examples with the test database:</li> <li>Get scan info for the <code>\"real_plant_analyzed\"</code> dataset:   http://127.0.0.1:5000/scans/real_plant_analyzed</li> <li>Get scan info for the <code>\"virtual_plant_analyzed\"</code> dataset:   http://127.0.0.1:5000/scans/virtual_plant_analyzed</li> </ul> <p>Warning</p> <p>This requires the <code>Colmap</code> task! In other words it will fail (response <code>500</code>) if this task is missing from the dataset.</p>"},{"location":"rest_api/#filespath","title":"<code>/files/&lt;path&gt;</code>","text":"<p>Here are the specifications for the <code>/files/&lt;path&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.File</code></li> <li>Arguments: none</li> <li>Returns: The content of the file.</li> <li>Examples  <code>real_plant_analyzed</code> dataset (from the test database):</li> <li>Get the first image of the scan (<code>00000_rgb</code>):   http://127.0.0.1:5000/files/real_plant_analyzed/images/00000_rgb.jpg</li> <li>Get the first mask image of the scan (<code>00000_rgb</code>):   http://127.0.0.1:5000/files/real_plant_analyzed/Masks_1__0__1__0_channel_rgb_5619aa428d/00000_rgb.png</li> </ul>"},{"location":"rest_api/#archivescan_id","title":"<code>/archive/&lt;scan_id&gt;</code>","text":"<p>Here are the specifications for the <code>/archive/&lt;scan_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Archive</code></li> <li>Arguments: none</li> <li>Returns: A zip file containing the dataset.</li> <li>Examples:</li> <li>Get <code>real_plant_analyzed</code> archive:   http://127.0.0.1:5000/archive/real_plant_analyzed/</li> <li>Get <code>virtual_plant_analyzed</code> archive:   http://127.0.0.1:5000/archive/virtual_plant_analyzed/</li> </ul>"},{"location":"rest_api/#imagescan_idfileset_idfile_id","title":"<code>/image/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/image/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Image</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>, <code>large</code>, <code>thumb</code>} to control the max size (width or height) of the image to return.</li> <li>Returns: The image file, resized by default.</li> <li>Examples with the <code>real_plant_analyzed</code> dataset (from the test database) and the first image of the scan (<code>00000_rgb</code>):</li> <li>Get the preview image:   http://127.0.0.1:5000/image/real_plant_analyzed/images/00000_rgb</li> <li>Get the original image:   http://127.0.0.1:5000/image/real_plant_analyzed/images/00000_rgb?size=orig</li> </ul>"},{"location":"rest_api/#pointcloudscan_idfileset_idfile_id","title":"<code>/pointcloud/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/pointcloud/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.PointCloud</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>, <code>preview</code>} or a <code>float</code> to control the voxel-size of the pointcloud to returns.</li> <li>Returns: The point cloud file, preview size by default.</li> <li>Examples with the <code>real_plant_analyzed</code> dataset:</li> <li>Get the preview point cloud:   http://127.0.0.1:5000/pointcloud/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud</li> <li>Get the original point cloud:   http://127.0.0.1:5000/pointcloud/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud?size=orig</li> <li>Get the point cloud with a voxel size of <code>2.3</code>:   http://127.0.0.1:5000/pointcloud/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud?size=2.3</li> </ul>"},{"location":"rest_api/#pcgroundtruthscan_idfileset_idfile_id","title":"<code>/pcGroundTruth/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/pcGroundTruth/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.PointCloudGroundTruth</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>, <code>preview</code>} or a <code>float</code> to control the voxel-size of the pointcloud to returns.</li> <li>Returns: The ground-truth pointcloud file, original size by default.</li> </ul>"},{"location":"rest_api/#meshscan_idfileset_idfile_id","title":"<code>/mesh/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code>","text":"<p>Here are the specifications for the <code>/mesh/&lt;scan_id&gt;/&lt;fileset_id&gt;/&lt;file_id&gt;</code> URLs:</p> <ul> <li>Resource: <code>plantdb.rest_api.Mesh</code></li> <li>Arguments: <code>size</code> in {<code>orig</code>}, no control of the size of the mesh to returns.</li> <li>Returns: The mesh file, original size by default.</li> <li>Examples with the <code>real_plant_analyzed</code> dataset:</li> <li>Get the original mesh:   http://127.0.0.1:5000/mesh/real_plant_analyzed/TriangleMesh_9_most_connected_t_open3d_00e095c359/TriangleMesh</li> </ul>"},{"location":"rest_api/#refresh","title":"<code>/refresh</code>","text":"<p>Refresh the list of scans in the <code>plantdb.fsdb.FSDB</code> database.</p> <p>Here are the specifications for the <code>/refresh</code> URL:</p> <ul> <li>Resource: <code>plantdb.rest_api.Refresh</code></li> <li>Arguments: none</li> <li>Returns: <code>200</code> on completion.</li> <li>Example: http://127.0.0.1:5000/refresh</li> </ul>"},{"location":"rest_api/#scan-summary","title":"Scan summary","text":"<p>Information about scans dataset, obtained with the '/scans' URL, are grouped in a JSON dictionary. The template can be accessed here: <code>plantdb.rest_api.get_scan_template</code></p> <p>It is organized as follows:</p> <pre><code>{\n  \"id\": \"scan_id\",\n  \"metadata\": {\n    \"date\": \"01-01-00 00:00:00\",\n    \"species\": \"N/A\",\n    \"plant\": \"N/A\",\n    \"environment\": \"N/A\",\n    \"nbPhotos\": 0,\n    \"files\": {\n      \"metadatas\": null,\n      \"archive\": null\n    }\n  },\n  \"thumbnailUri\": \"\",\n  \"hasPointCloud\": false,\n  \"hasMesh\": false,\n  \"hasSkeleton\": false,\n  \"hasTreeGraph\": false,\n  \"hasAngleData\": false,\n  \"hasAutomatedMeasures\": false,\n  \"hasManualMeasures\": false,\n  \"hasSegmentation2D\": false,\n  \"hasPcdGroundTruth\": false,\n  \"hasPointCloudEvaluation\": false,\n  \"hasSegmentedPointCloud\": false,\n  \"error\": false\n  }\n</code></pre>"},{"location":"rest_api/#id","title":"id","text":"<p>The name of the corresponding scan dataset.</p>"},{"location":"rest_api/#metadata","title":"metadata","text":"<p>Some metadata gathered from the corresponding scan dataset.</p> <p>JSON dictionary with fields:</p> <ul> <li>\"date\": String, example \"2019-02-01 13:35:42\"</li> <li>\"plant\": String</li> <li>\"species\": String</li> <li>\"nbPhotos\": Number</li> <li>\"environment\": String</li> <li>\"files\": Object<ul> <li>\"files.metadatas\": String, URL, example \"/files//metadata/metadata.json\" <li>\"files.archive\": String, URL, example \"/files//Visualization/scan.zip\""},{"location":"rest_api/#thumbnailuri","title":"thumbnailUri","text":"<p>A path to the thumbnail image to use as \"preview\" to represent the dataset in the webapp. * thumbnailUri: example \"/files//Visualization/thumbnail_pict20190201_134037_0.jpg\""},{"location":"rest_api/#has","title":"has*","text":"<p>All of the <code>has*</code> entries indicate if there is an output for a list of selected tasks:</p> <ul> <li><code>hasPointCloud</code>: output of the task <code>PointCloud</code> has a <code>PointCloud.ply</code> file</li> <li><code>hasMesh</code>: output of the task <code>TriangleMesh</code> has a <code>TriangleMesh.ply</code> file</li> <li><code>hasSkeleton</code>: output of the task <code>CurveSkeleton</code> has a <code>CurveSkeleton.json</code> file</li> <li><code>hasAngleData</code>: output of the task <code>AngleAndInternodes</code> has a <code>AnglesAndInternodes.json</code> file</li> <li><code>hasAutomatedMeasures</code>: output of the task <code>AutomatedMeasures</code> has a <code>AnglesAndInternodes</code> file</li> <li><code>hasSegmentation2D</code>: output of the task <code>Segmentation2D</code> has a `` file</li> <li><code>hasSegmentedPcdEvaluation</code>: output of the task <code>Segmentation2DEvaluation</code> has a `` file</li> <li><code>hasPointCloudEvaluation</code>: output of the task <code>PointCloudEvaluation</code> has a `` file</li> <li><code>hasSegmentedPointCloud</code>: output of the task <code>SegmentedPointCloud</code> has a <code>SegmentedPointCloud.ply</code> file</li> <li><code>hasPcdGroundTruth</code>: output of the task <code>PointCloudGroundTruth</code> has a <code>PointCloudGroundTruth.ply</code> file</li> </ul> <p>Finally, <code>hasManualMeasures</code> refers to the presence of a JSON file with manual measurements saved as <code>measures.json</code>. This file should be present at the scan dataset root directory.</p>"},{"location":"rest_api/#scan-detailed-summary","title":"Scan detailed summary","text":"<p>Information about a specific scan dataset, obtained with the '/scans/' URL, are grouped in a JSON dictionary. <p>It has the same information as those gathered with the '/scans' URL, but also add:   * the files URI when the following <code>has*</code> entries are <code>True</code>:     * <code>hasPointCloud</code>, under <code>\"filesUri\"/\"pointCloud\"</code>     * <code>hasMesh</code>, under <code>\"filesUri\"/\"mesh\"</code>     * <code>hasSkeleton</code>, under <code>\"filesUri\"/\"skeleton\"</code>     * <code>hasTreeGraph</code>, under <code>\"filesUri\"/\"tree\"</code>   * the files data when the following <code>has*</code> entries are <code>True</code>:      * <code>hasSkeleton</code>, under <code>\"data\"/\"skeleton\"</code>     * <code>hasAngleData</code>, under:       * <code>\"data\"/\"angles\"/\"angles\"</code> for the angle values       * <code>\"data\"/\"angles\"/\"internodes\"</code> for the internodes values     * <code>hasManualMeasures</code>, under:       *   <code>\"data\"/\"angles\"/\"measured_angles\"</code> for the angle values       *   <code>\"data\"/\"angles\"/\"measured_internodes\"</code> for the internodes values   * the reconstruction bounding-box (formerly known as 'workspace') under <code>\"workspace\"</code>, for example <code>\"{\"x\": [340, 440], \"y\": [330, 410], \"z\": [-180, 105]}\"</code>   * the camera model and its intrinsics parameters under <code>\"camera\"/\"model\"</code>, see here for more details   * the list of camera poses, a.k.a. extrinsic parameters, under <code>\"camera\"/\"poses\"</code>, see here for more details</p>"},{"location":"rest_api/#camera-model","title":"Camera model","text":"<p>The details about the camera poses accessible under <code>\"camera\"/\"model\"</code> are:   * <code>id</code>: the id of the camera model, should always be <code>1</code> if we use a single camera   * <code>model</code>: the name of the camera model, should always be 'OPENCV' as this is how we save it   * <code>width</code>: the width of the images   * <code>height</code>: the height of the images   * <code>params</code>: the 'OPENCV' intrinsic camera parameters, that is <code>fx</code>, <code>fy</code>, <code>cx</code>, <code>cy</code>, <code>k1</code>, <code>k2</code>, <code>p1</code>, <code>p2</code>.  </p> <p>For example with the first image: <pre><code>{\n  \"id\": 1,\n  \"model\": \"OPENCV\",\n  \"width\": 1440,\n  \"height\": 1080,\n  \"params\": [1166.9518889440105, 1166.9518889440105, 720, 540, -0.0013571157486977348, -0.0013571157486977348, 0, 0]\n}\n</code></pre></p>"},{"location":"rest_api/#camera-poses","title":"Camera poses","text":"<p>The details about the camera poses accessible under <code>\"camera\"/\"poses\"</code> are:   * \"id\": index of the picture (starts at 1 by COLMAP convention)   * \"rotmat\": Rotation matrix, 3x3 array    * \"tvec\": Translation vector, 3x1 array   * \"thumbnailUri\": URI to the thumbnail image, example \"/images//images/?size=thumb.jpg\"   * \"photoUri\": URI to the original image, example \"/images//images/?size=orig.jpg\" <p>For example with the first image: <pre><code>{\n  \"id\": 1,\n  \"tvec\": [369.4279687732083, 120.36109311437637, -62.07043190848918],\n  \"rotmat\": [\n    [0.06475585405884698, -0.9971710205080586, 0.038165890845442085],\n    [-0.3390191175518756, -0.0579549181538338, -0.9389926865509284],\n    [0.9385481965778085, 0.04786630673761355, -0.34181295964290737]\n  ],\n  \"photoUri\": \"/tmp/ROMI_DB/real_plant_analyzed/images/00000_rgb.jpg\",\n  \"thumbnailUri\": \"/tmp/ROMI_DB/real_plant_analyzed/webcache/6fbae08f195837c511af7c2864d075dd5cd153bc.jpeg\", \n  \"isMatched\": true\n}\n</code></pre></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>plantdb<ul> <li>cli<ul> <li>fsdb_check</li> <li>fsdb_import_file</li> <li>fsdb_import_folder</li> <li>fsdb_import_images</li> <li>fsdb_rest_api</li> <li>fsdb_sync</li> <li>shared_fsdb</li> </ul> </li> <li>db</li> <li>fsdb</li> <li>io</li> <li>log</li> <li>rest_api</li> <li>sshfsdb</li> <li>sync</li> <li>test_database</li> <li>testing</li> <li>utils</li> <li>webcache</li> </ul> </li> </ul>"},{"location":"reference/plantdb/","title":"plantdb","text":""},{"location":"reference/plantdb/db/","title":"db","text":"<p>API for the database module in the ROMI project.</p> <p>The following classes are defined:   * A database <code>DB</code> contains a list of scans <code>Scan</code> distinguishable by their id.   * A <code>Scan</code> can be made of several list of files <code>Fileset</code>.   * A <code>Fileset</code> is made of a list of files <code>Files</code>.   * A <code>File</code> can be an image, text of bytes.</p> <p>It should be subclassed to implement an actual database interface.</p>"},{"location":"reference/plantdb/db/#plantdb.db.DB","title":"<code>DB()</code>","text":"<p>             Bases: <code>object</code></p> <p>Class defining the database object <code>DB</code>.</p> <p>Abstract class defining the API used to communicate with a database in the ROMI project.</p> Source code in <code>plantdb/db.py</code> <pre><code>def __init__(self):\n    pass\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DB.connect","title":"<code>connect(login_data=None)</code>","text":"<p>Connect to the database.</p> <p>Parameters:</p> Name Type Description Default <code>login_data</code> <code>list or dict</code> <p>Use this to access to a <code>DB</code> with credentials.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def connect(self, login_data=None):\n    \"\"\"Connect to the database.\n\n    Parameters\n    ----------\n    login_data : list or dict, optional\n        Use this to access to a ``DB`` with credentials.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DB.create_scan","title":"<code>create_scan(id)</code>","text":"<p>Create a new scan object in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the scan to retrieve</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def create_scan(self, id):\n    \"\"\"Create a new scan object in the database.\n\n    Parameters\n    ----------\n    id : str\n        Id of the scan to retrieve\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DB.delete_scan","title":"<code>delete_scan(id)</code>","text":"<p>Delete a scan from the DB.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the scan to delete</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def delete_scan(self, id):\n    \"\"\"Delete a scan from the DB.\n\n    Parameters\n    ----------\n    id : str\n        Id of the scan to delete\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DB.disconnect","title":"<code>disconnect()</code>","text":"<p>Disconnect from the database.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def disconnect(self):\n    \"\"\"Disconnect from the database.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DB.get_scan","title":"<code>get_scan(id, create=False)</code>","text":"<p>Get a scan saved in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the scan instance to retrieve.</p> required <code>create</code> <code>bool</code> <p>Create the scan if it does not exist, default to <code>False</code>.</p> <code>False</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_scan(self, id, create=False):\n    \"\"\"Get a scan saved in the database.\n\n    Parameters\n    ----------\n    id : str\n        Id of the scan instance to retrieve.\n    create : bool, optional\n        Create the scan if it does not exist, default to ``False``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DB.get_scans","title":"<code>get_scans()</code>","text":"<p>Get the list of scans saved in the database.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_scans(self):\n    \"\"\"Get the list of scans saved in the database.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.DBBusyError","title":"<code>DBBusyError(message)</code>","text":"<p>             Bases: <code>OSError</code></p> <p>Raises an error if the database is busy.</p> <p>This error is raised when the database is busy and an operation cannot be done on it.</p> Source code in <code>plantdb/db.py</code> <pre><code>def __init__(self, message):\n    self.message = message\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File","title":"<code>File(fileset, id, **kwargs)</code>","text":"<p>             Bases: <code>object</code></p> <p>Class defining a file <code>File</code> contained in a <code>Fileset</code>.</p> <p>Abstract class defining the API used to represent a file in the ROMI project.</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>DB</code> <p>Database instance where to find the scan, fileset and file.</p> <code>scan</code> <code>Scan</code> <p>Scan instance containing the fileset and file.</p> <code>fileset</code> <code>Fileset</code> <p>Fileset instance containing the file.</p> <code>id</code> <code>str</code> <p>Id of the file instance.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>fileset</code> <code>Fileset</code> <p>Instance containing the file.</p> required <code>id</code> <code>str</code> <p>Id of the file instance.</p> required <p>Other Parameters:</p> Name Type Description <code>ext</code> <code>str</code> <p>The extension of the file.</p> Source code in <code>plantdb/db.py</code> <pre><code>def __init__(self, fileset, id, **kwargs):\n    \"\"\"Constructor.\n\n    Parameters\n    ----------\n    fileset : plantdb.db.Fileset\n        Instance containing the file.\n    id : str\n        Id of the file instance.\n\n    Other Parameters\n    ----------------\n    ext : str\n        The extension of the file.\n    \"\"\"\n    self.db = fileset.get_db()\n    self.scan = fileset.get_scan()\n    self.fileset = fileset\n    self.id = id\n    ext = kwargs.get('ext', '')\n    self.filename = id + ext if ext != '' else None\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.get_db","title":"<code>get_db()</code>","text":"<p>Get parent database instance.</p> <p>Returns:</p> Type Description <code>DB</code> <p>The parent database instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_db(self):\n    \"\"\"Get parent database instance.\n\n    Returns\n    -------\n    plantdb.db.DB\n        The parent database instance.\n    \"\"\"\n    return self.db\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.get_fileset","title":"<code>get_fileset()</code>","text":"<p>Get parent fileset.</p> <p>Returns:</p> Type Description <code>Fileset</code> <p>The parent fileset instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_fileset(self):\n    \"\"\"Get parent fileset.\n\n    Returns\n    -------\n    plantdb.db.Fileset\n        The parent fileset instance.\n    \"\"\"\n    return self.fileset\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.get_id","title":"<code>get_id()</code>","text":"<p>Get file id.</p> <p>Returns:</p> Type Description <code>str</code> <p>The id of the file instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_id(self):\n    \"\"\"Get file id.\n\n    Returns\n    -------\n    str\n        The id of the file instance.\n    \"\"\"\n    return deepcopy(self.id)\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.get_metadata","title":"<code>get_metadata(key=None, default=None)</code>","text":"<p>Get metadata associated to scan.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Metadata key to retrieve (defaults to <code>None</code>)</p> <code>None</code> <code>default</code> <code>Any</code> <p>The default value to return if the key do not exist in the metadata. Default is <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_metadata(self, key=None, default=None):\n    \"\"\"Get metadata associated to scan.\n\n    Parameters\n    ----------\n    key : str, optional\n        Metadata key to retrieve (defaults to ``None``)\n    default : Any, optional\n        The default value to return if the key do not exist in the metadata.\n        Default is ``None``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.get_scan","title":"<code>get_scan()</code>","text":"<p>Get parent scan instance.</p> <p>Returns:</p> Type Description <code>Scan</code> <p>The parent scan instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_scan(self):\n    \"\"\"Get parent scan instance.\n\n    Returns\n    -------\n    plantdb.db.Scan\n        The parent scan instance.\n    \"\"\"\n    return self.scan\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.import_file","title":"<code>import_file(path)</code>","text":"<p>Import an existing file to the <code>File</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path of the file to import</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def import_file(self, path):\n    \"\"\"Import an existing file to the ``File`` object.\n\n    Parameters\n    ----------\n    path : str\n        Path of the file to import\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.read","title":"<code>read()</code>","text":"<p>Reads from a file.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def read(self):\n    \"\"\"Reads from a file.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.read_raw","title":"<code>read_raw()</code>","text":"<p>Reads bytes from a file.</p> <p>Returns:</p> Type Description <code>bytearray</code> <p>File buffer</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def read_raw(self):\n    \"\"\"Reads bytes from a file.\n\n    Returns\n    -------\n    bytearray\n        File buffer\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.set_metadata","title":"<code>set_metadata(data, value=None)</code>","text":"<p>Get metadata associated to scan.</p> <p>If value is <code>None</code>, scan metadata is set to data. If value is not <code>None</code> data is a key and is set to value.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Key or value to set as metadata</p> required <code>value</code> <code>any</code> <p>Value to set (default is <code>None</code>)</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def set_metadata(self, data, value=None):\n    \"\"\"Get metadata associated to scan.\n\n    If value is ``None``, scan metadata is set to data.\n    If value is not ``None`` data is a key and is set to value.\n\n    Parameters\n    ----------\n    data : str or dict\n        Key or value to set as metadata\n    value : any, optional\n        Value to set (default is ``None``)\n\n    Raises\n    ------\n    NotImplementedError\n   \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.write","title":"<code>write(str, ext='')</code>","text":"<p>Writes to a file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Data to write</p> required <code>ext</code> <code>str</code> <p>File extension to use</p> <code>''</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def write(self, str, ext=\"\"):\n    \"\"\"Writes to a file.\n\n    Parameters\n    ----------\n    data : str\n        Data to write\n    ext : str, optional\n        File extension to use\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.File.write_raw","title":"<code>write_raw(buffer, ext='')</code>","text":"<p>Writes bytes to a file.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>bytearray</code> <p>Data to write</p> required <code>ext</code> <code>str</code> <p>File extension to use</p> <code>''</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def write_raw(self, buffer, ext=\"\"):\n    \"\"\"Writes bytes to a file.\n\n    Parameters\n    ----------\n    buffer : bytearray\n        Data to write\n    ext : str, optional\n        File extension to use\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset","title":"<code>Fileset(scan, id)</code>","text":"<p>             Bases: <code>object</code></p> <p>Class defining a set of files <code>Fileset</code> contained in a <code>Scan</code>.</p> <p>Abstract class defining the API used to represent a set of files in the ROMI project.</p> Notes <p>Files can be 2D images, RGB pictures, text,...</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>DB</code> <p>Database instance where to find the scan and fileset.</p> <code>scan</code> <code>Scan</code> <p>Scan instance containing the fileset.</p> <code>id</code> <code>int</code> <p>Id of the fileset instance.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>Scan instance containing the fileset.</p> required <code>id</code> <code>str</code> <p>Id of the fileset instance.</p> required Source code in <code>plantdb/db.py</code> <pre><code>def __init__(self, scan, id):\n    \"\"\"Constructor.\n\n    Parameters\n    ----------\n    scan : plantdb.db.Scan\n        Scan instance containing the fileset.\n    id : str\n        Id of the fileset instance.\n    \"\"\"\n    self.db = scan.get_db()\n    self.scan = scan\n    self.id = id\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.create_file","title":"<code>create_file(id)</code>","text":"<p>Create a file.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the new file.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def create_file(self, id):\n    \"\"\"Create a file.\n\n    Parameters\n    ----------\n    id : str\n        Id of the new file.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.delete_file","title":"<code>delete_file(file_id)</code>","text":"<p>Delete a file.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the file to delete.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def delete_file(self, file_id):\n    \"\"\"Delete a file.\n\n    Parameters\n    ----------\n    id : str\n        Id of the file to delete.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.get_db","title":"<code>get_db()</code>","text":"<p>Get parent database instance.</p> <p>Returns:</p> Type Description <code>DB</code> <p>The parent database instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_db(self):\n    \"\"\"Get parent database instance.\n\n    Returns\n    -------\n    plantdb.db.DB\n        The parent database instance.\n    \"\"\"\n    return self.db\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.get_file","title":"<code>get_file(id, create=False)</code>","text":"<p>Get file with given id.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>File instance id.</p> required <code>create</code> <code>bool</code> <p>Create the file if it does not exist, default to <code>False</code>.</p> <code>False</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_file(self, id, create=False):\n    \"\"\"Get file with given id.\n\n    Parameters\n    ----------\n    id : str\n        File instance id.\n    create : bool, optional\n        Create the file if it does not exist, default to ``False``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.get_files","title":"<code>get_files()</code>","text":"<p>Get all files.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_files(self):\n    \"\"\"Get all files.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.get_id","title":"<code>get_id()</code>","text":"<p>Get the fileset instance id.</p> <p>Returns:</p> Type Description <code>str</code> <p>The id of the fileset instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_id(self):\n    \"\"\"Get the fileset instance id.\n\n    Returns\n    -------\n    str\n        The id of the fileset instance.\n    \"\"\"\n    return deepcopy(self.id)\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.get_metadata","title":"<code>get_metadata(key=None, default=None)</code>","text":"<p>Get metadata associated to scan.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Metadata key to retrieve, default to <code>None</code>.</p> <code>None</code> <code>default</code> <code>Any</code> <p>The default value to return if the key do not exist in the metadata. Default is <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_metadata(self, key=None, default=None):\n    \"\"\"Get metadata associated to scan.\n\n    Parameters\n    ----------\n    key : str\n        Metadata key to retrieve, default to ``None``.\n    default : Any, optional\n        The default value to return if the key do not exist in the metadata.\n        Default is ``None``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.get_scan","title":"<code>get_scan()</code>","text":"<p>Get parent scan instance.</p> <p>Returns:</p> Type Description <code>Scan</code> <p>The parent scan instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_scan(self):\n    \"\"\"Get parent scan instance.\n\n    Returns\n    -------\n    plantdb.db.Scan\n        The parent scan instance.\n    \"\"\"\n    return self.scan\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Fileset.set_metadata","title":"<code>set_metadata(data, value=None)</code>","text":"<p>Get metadata associated to scan.</p> <p>If value is <code>None</code>, scan metadata is set to data. If value is not <code>None</code> data is a key and is set to value.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Key or value to set as metadata.</p> required <code>value</code> <code>any</code> <p>Value to set, default to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def set_metadata(self, data, value=None):\n    \"\"\"Get metadata associated to scan.\n\n    If value is ``None``, scan metadata is set to data.\n    If value is not ``None`` data is a key and is set to value.\n\n    Parameters\n    ----------\n    data : str or dict\n        Key or value to set as metadata.\n    value : any, optional\n        Value to set, default to ``None``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan","title":"<code>Scan(db, id)</code>","text":"<p>             Bases: <code>object</code></p> <p>Class defining the scan object <code>Scan</code>.</p> <p>Abstract class defining the API used to represent a scan in the ROMI project.</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>DB</code> <p>Database instance where to find the scan.</p> <code>id</code> <code>int</code> <p>Id of the scan instance.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>DB</code> <p>Database instance where to find the scan.</p> required <code>id</code> <code>str</code> <p>Id of the scan instance.</p> required Source code in <code>plantdb/db.py</code> <pre><code>def __init__(self, db, id):\n    \"\"\"Constructor.\n\n    Parameters\n    ----------\n    db : plantdb.db.DB\n        Database instance where to find the scan.\n    id : str\n        Id of the scan instance.\n    \"\"\"\n    self.db = db\n    self.id = id\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.create_fileset","title":"<code>create_fileset(id)</code>","text":"<p>Create a fileset.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the new fileset.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def create_fileset(self, id):\n    \"\"\"Create a fileset.\n\n    Parameters\n    ----------\n    id : str\n        Id of the new fileset.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.delete_fileset","title":"<code>delete_fileset(fileset_id)</code>","text":"<p>Delete a fileset from the DB.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the fileset to delete.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def delete_fileset(self, fileset_id):\n    \"\"\"Delete a fileset from the DB.\n\n    Parameters\n    ----------\n    id : str\n        Id of the fileset to delete.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.get_db","title":"<code>get_db()</code>","text":"<p>Get parent database instance.</p> <p>Returns:</p> Type Description <code>DB</code> <p>Database instance where to find the scan.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_db(self):\n    \"\"\"Get parent database instance.\n\n    Returns\n    -------\n    plantdb.db.DB\n        Database instance where to find the scan.\n    \"\"\"\n    return self.db\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.get_fileset","title":"<code>get_fileset(id, create=False)</code>","text":"<p>Get a fileset with a given id.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Id of the fileset to be retrieved.</p> required <code>create</code> <code>bool</code> <p>Create the fileset if it does not exist, default to <code>False</code>.</p> <code>False</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_fileset(self, id, create=False):\n    \"\"\"Get a fileset with a given id.\n\n    Parameters\n    ----------\n    id : str\n        Id of the fileset to be retrieved.\n    create : bool, optional\n        Create the fileset if it does not exist, default to ``False``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.get_filesets","title":"<code>get_filesets()</code>","text":"<p>Get all sets of files.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_filesets(self):\n    \"\"\"Get all sets of files.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.get_id","title":"<code>get_id()</code>","text":"<p>Get the scan instance id.</p> <p>Returns:</p> Type Description <code>str</code> <p>Id of the scan instance.</p> Source code in <code>plantdb/db.py</code> <pre><code>def get_id(self):\n    \"\"\"Get the scan instance id.\n\n    Returns\n    -------\n    str\n        Id of the scan instance.\n    \"\"\"\n    return deepcopy(self.id)\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.get_metadata","title":"<code>get_metadata(key=None, default=None)</code>","text":"<p>Get metadata associated to scan.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Metadata key to retrieve, default to <code>None</code>.</p> <code>None</code> <code>default</code> <code>Any</code> <p>The default value to return if the key do not exist in the metadata. Default is <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def get_metadata(self, key=None, default=None):\n    \"\"\"Get metadata associated to scan.\n\n    Parameters\n    ----------\n    key : str\n        Metadata key to retrieve, default to ``None``.\n    default : Any, optional\n        The default value to return if the key do not exist in the metadata.\n        Default is ``None``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/db/#plantdb.db.Scan.set_metadata","title":"<code>set_metadata(data, value=None)</code>","text":"<p>Get metadata associated to scan.</p> <p>If value is <code>None</code>, scan metadata is set to data. If value is not <code>None</code> data is a key and is set to value.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Key or value.</p> required <code>value</code> <code>any</code> <p>Value to set, default to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> Source code in <code>plantdb/db.py</code> <pre><code>def set_metadata(self, data, value=None):\n    \"\"\"Get metadata associated to scan.\n\n    If value is ``None``, scan metadata is set to data.\n    If value is not ``None`` data is a key and is set to value.\n\n    Parameters\n    ----------\n    data : str or dict\n        Key or value.\n    value : any, optional\n        Value to set, default to ``None``.\n\n    Raises\n    ------\n    NotImplementedError\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/plantdb/fsdb/","title":"fsdb","text":"<p>This module implement a database as a local file structure.</p> <p>Assuming that the <code>FSDB</code> root database directory is <code>dbroot/</code>, there is a <code>Scan</code> with <code>'myscan_001'</code> as <code>Scan.id</code> and there are some metadata (see below), you should have the following file structure:</p> <p>.. code-block::</p> <pre><code>dbroot/                            # base directory of the database\n\u251c\u2500\u2500 myscan_001/                    # scan dataset directory, id=`myscan_001`\n\u2502   \u251c\u2500\u2500 files.json                 # JSON file referencing the all files for the dataset\n\u2502   \u251c\u2500\u2500 images/                    # `Fileset` gathering the 'images'\n\u2502   \u2502   \u251c\u2500\u2500 scan_img_01.jpg        # 'image' `File` 01\n\u2502   \u2502   \u251c\u2500\u2500 scan_img_02.jpg        # 'image' `File` 02\n\u2502   \u2502   \u251c\u2500\u2500 [...]                  #\n\u2502   \u2502   \u2514\u2500\u2500 scan_img_99.jpg        # 'image' `File` 99\n\u2502   \u251c\u2500\u2500 metadata/                  # metadata directory\n\u2502   \u2502   \u251c\u2500\u2500 images                 # 'images' metadata directory\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 scan_img_01.json   # JSON metadata attached to this file\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 scan_img_02.json   #\n\u2502   \u2502   \u2502   [...]                  #\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 scan_img_99.json   #\n\u2502   \u2502   \u251c\u2500\u2500 Task_A/                # optional, only present if metadata attached to one of the outputs from `Task_A`\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 outfile.json       # optional metadata attached to the output file from `Task_A`\n\u2502   \u2502   \u2514\u2500\u2500 (metadata.json)        # optional metadata attached to the dataset\n\u2502   \u251c\u2500\u2500 task_A/                    # `Fileset` gathering the outputs of `Task_A`\n\u2502   \u2502   \u2514\u2500\u2500 outfile.ext            # output file from `Task_A`\n\u2502   \u2514\u2500\u2500 (measures.json)            # optional manual measurements file\n\u251c\u2500\u2500 myscan_002/                    # scan dataset directory, id=`myscan_002`\n:\n\u251c\u2500\u2500 (LOCK_FILE_NAME)               # \"lock file\", present if DB is connected\n\u2514\u2500\u2500 MARKER_FILE_NAME               # ROMI DB marker file\n</code></pre> <p>The <code>myscan_001/files.json</code> file then contains the following structure:</p> <p>.. code-block:: json</p> <pre><code>{\n    \"filesets\": [\n        {\n            \"id\": \"images\",\n            \"files\": [\n                {\n                    \"id\": \"scan_img_01\",\n                    \"file\": \"scan_img_01.jpg\"\n                },\n                {\n                    \"id\": \"scan_img_02\",\n                    \"file\": \"scan_img_02.jpg\"\n                },\n                [...]\n                {\n                    \"id\": \"scan_img_99\",\n                    \"file\": \"scan_img_99.jpg\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>The metadata of the scan (<code>metadata.json</code>), of the set of 'images' files (<code>&lt;Fileset.id&gt;.json</code>) and of each 'image' files (<code>&lt;File.id&gt;.json</code>) are all stored as JSON files in a separate directory:</p> <p>.. code-block::</p> <pre><code>myscan_001/metadata/\nmyscan_001/metadata/metadata.json\nmyscan_001/metadata/images.json\nmyscan_001/metadata/images/scan_img_01.json\nmyscan_001/metadata/images/scan_img_02.json\n[...]\nmyscan_001/metadata/images/scan_img_99.json\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB","title":"<code>FSDB(basedir, required_filesets=['metadata'])</code>","text":"<p>             Bases: <code>DB</code></p> <p>Implement a local File System DataBase version of abstract class <code>db.DB</code>.</p> <p>Implement as a simple local file structure with following directory structure and marker files:   * directory <code>${FSDB.basedir}</code> as database root directory;   * marker file <code>MARKER_FILE_NAME</code> at database root directory;   * (OPTIONAL) lock file <code>LOCK_FILE_NAME</code> at database root directory when connected;</p> <p>Attributes:</p> Name Type Description <code>basedir</code> <code>Path</code> <p>Absolute path to the base directory hosting the database.</p> <code>lock_path</code> <code>Path</code> <p>Absolute path to the lock file.</p> <code>scans</code> <code>list</code> <p>The list of <code>Scan</code> objects found in the database.</p> <code>is_connected</code> <code>bool</code> <p><code>True</code> if the database is connected (locked directory), else <code>False</code>.</p> Notes <p>Requires the marker file <code>MARKER_FILE_NAME</code> at the given <code>basedir</code>. Lock file <code>LOCK_FILE_NAME</code> is found only when connecting an FSBD instance to the given <code>basedir</code>.</p> See Also <p>plantdb.db.DB plantdb.fsdb.MARKER_FILE_NAME plantdb.fsdb.LOCK_FILE_NAME</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # EXAMPLE 1: Use a temporary dummy local database:\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; print(type(db))\n&lt;class 'plantdb.fsdb.FSDB'&gt;\n&gt;&gt;&gt; print(db.path())\n/tmp/romidb_********\n&gt;&gt;&gt; # Now connecting to this dummy local database...\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; # ...allows creating new `Scan` in it:\n&gt;&gt;&gt; new_scan = db.create_scan(\"007\")\n&gt;&gt;&gt; print(type(new_scan))\n&lt;class 'plantdb.fsdb.Scan'&gt;\n&gt;&gt;&gt; db.disconnect()\n</code></pre> <pre><code>&gt;&gt;&gt; # EXAMPLE 2: Use a local database:\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; db = FSDB(os.environ.get('ROMI_DB', \"/data/ROMI/DB/\"))\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; [scan.id for scan in db.get_scans()]  # list scan ids found in database\n&gt;&gt;&gt; scan = db.get_scans()[1]\n&gt;&gt;&gt; [fs.id for fs in scan.get_filesets()]  # list fileset ids found in scan\n&gt;&gt;&gt; db.disconnect()\n</code></pre> <p>Database constructor.</p> <p>Check given <code>basedir</code> directory exists and load accessible <code>Scan</code> objects.</p> <p>Parameters:</p> Name Type Description Default <code>basedir</code> <code>str or Path</code> <p>The path to the root directory of the database.</p> required <code>required_filesets</code> <code>list of str</code> <p>A list of required filesets to consider a scan valid. Set it to <code>None</code> to accept any subdirectory of <code>basedir</code> as a valid scan. Defaults to <code>['metadata']</code> to limit scans to the <code>basedir</code> subdirectories that have an 'metadata' directory.</p> <code>['metadata']</code> <p>Raises:</p> Type Description <code>NotADirectoryError</code> <p>If the given <code>basedir</code> is not an existing directory.</p> <code>NotAnFSDBError</code> <p>If the <code>MARKER_FILE_NAME</code> is missing from the <code>basedir</code>.</p> See Also <p>plantdb.fsdb.MARKER_FILE_NAME</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def __init__(self, basedir, required_filesets=['metadata']):\n    \"\"\"Database constructor.\n\n    Check given ``basedir`` directory exists and load accessible ``Scan`` objects.\n\n    Parameters\n    ----------\n    basedir : str or pathlib.Path\n        The path to the root directory of the database.\n    required_filesets : list of str, optional\n        A list of required filesets to consider a scan valid.\n        Set it to ``None`` to accept any subdirectory of `basedir` as a valid scan.\n        Defaults to ``['metadata']`` to limit scans to the `basedir` subdirectories that have an 'metadata' directory.\n\n    Raises\n    ------\n    NotADirectoryError\n        If the given `basedir` is not an existing directory.\n    NotAnFSDBError\n        If the `MARKER_FILE_NAME` is missing from the `basedir`.\n\n    See Also\n    --------\n    plantdb.fsdb.MARKER_FILE_NAME\n    \"\"\"\n    super().__init__()\n\n    basedir = Path(basedir)\n    # Check the given path to root directory of the database is a directory:\n    if not basedir.is_dir():\n        raise NotADirectoryError(f\"Directory {basedir} does not exists!\")\n    # Check the given path to root directory of the database is a \"romi DB\", i.e. have the `MARKER_FILE_NAME`:\n    if not _is_fsdb(basedir):\n        raise NotAnFSDBError(f\"Not an FSDB! Check that there is a file named {MARKER_FILE_NAME} in {basedir}\")\n\n    # Initialize attributes:\n    self.basedir = Path(basedir).resolve()\n    self.lock_path = self.basedir / LOCK_FILE_NAME\n    self.scans = []\n    self.is_connected = False\n    self.required_filesets = required_filesets\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.connect","title":"<code>connect(login_data=None, unsafe=False)</code>","text":"<p>Connect to the local database.</p> <p>Handle DB \"locking\" system by adding a <code>LOCK_FILE_NAME</code> file in the DB.</p> <p>Parameters:</p> Name Type Description Default <code>login_data</code> <code>bool</code> <p>UNUSED</p> <code>None</code> <code>unsafe</code> <code>bool</code> <p>If <code>True</code> do not use the <code>LOCK_FILE_NAME</code> file.</p> <code>False</code> <p>Raises:</p> Type Description <code>DBBusyError</code> <p>If the <code>LOCK_FILE_NAME</code> lock fil is found in the <code>basedir</code>.</p> See Also <p>plantdb.fsdb.LOCK_FILE_NAME</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; print(db.is_connected)\nFalse\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; print(db.is_connected)\nTrue\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def connect(self, login_data=None, unsafe=False):\n    \"\"\"Connect to the local database.\n\n    Handle DB \"locking\" system by adding a `LOCK_FILE_NAME` file in the DB.\n\n    Parameters\n    ----------\n    login_data : bool\n        UNUSED\n    unsafe : bool\n        If ``True`` do not use the `LOCK_FILE_NAME` file.\n\n    Raises\n    ------\n    DBBusyError\n        If the `LOCK_FILE_NAME` lock fil is found in the `basedir`.\n\n    See Also\n    --------\n    plantdb.fsdb.LOCK_FILE_NAME\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import FSDB\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db()\n    &gt;&gt;&gt; print(db.is_connected)\n    False\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; print(db.is_connected)\n    True\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if not self.is_connected:\n        if unsafe:\n            self.scans = _load_scans(self)\n            self.is_connected = True\n        else:\n            try:\n                with self.lock_path.open(mode=\"x\") as _:\n                    self.scans = _load_scans(self)\n                    self.is_connected = True\n                atexit.register(self.disconnect)\n            except FileExistsError:\n                raise DBBusyError(f\"File {LOCK_FILE_NAME} exists in DB root: DB is busy, cannot connect.\")\n    else:\n        logger.info(f\"Already connected to the database '{self.path()}'\")\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.create_scan","title":"<code>create_scan(id)</code>","text":"<p>Create a new <code>Scan</code> instance in the local database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The name of the scan to create. It should not exist in the local database.</p> required <p>Returns:</p> Type Description <code>Scan</code> <p>The <code>Scan</code> instance created in the local database.</p> <p>Raises:</p> Type Description <code>IOError</code> <p>If the <code>id</code> already exists in the local database. If the <code>id</code> is not valid.</p> See Also <p>plantdb.fsdb._is_valid_id plantdb.fsdb._make_scan</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; new_scan = db.create_scan('007')\n&gt;&gt;&gt; scan = db.create_scan('007')\nOSError: Duplicate scan name: 007\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def create_scan(self, id):\n    \"\"\"Create a new `Scan` instance in the local database.\n\n    Parameters\n    ----------\n    id : str\n        The name of the scan to create. It should not exist in the local database.\n\n    Returns\n    -------\n    plantdb.fsdb.Scan\n        The `Scan` instance created in the local database.\n\n    Raises\n    ------\n    IOError\n        If the `id` already exists in the local database.\n        If the `id` is not valid.\n\n    See Also\n    --------\n    plantdb.fsdb._is_valid_id\n    plantdb.fsdb._make_scan\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db()\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; new_scan = db.create_scan('007')\n    &gt;&gt;&gt; scan = db.create_scan('007')\n    OSError: Duplicate scan name: 007\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if not _is_valid_id(id):\n        raise IOError(\"Invalid id\")\n    if self.get_scan(id) != None:\n        raise IOError(f\"Duplicate scan name: {id}\")\n    scan = Scan(self, id)\n    _make_scan(scan)\n    self.scans.append(scan)\n    return scan\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.delete_scan","title":"<code>delete_scan(id)</code>","text":"<p>Delete an existing <code>Scan</code> from the local database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The name of the scan to create. It should exist in the local database.</p> required <p>Raises:</p> Type Description <code>IOError</code> <p>If the <code>id</code> do not exist in the local database.</p> See Also <p>plantdb.fsdb._delete_scan</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; new_scan = db.create_scan('007')\n&gt;&gt;&gt; print(new_scan)\n&lt;plantdb.fsdb.Scan object at 0x7f0730b1e390&gt;\n&gt;&gt;&gt; db.delete_scan('007')\n&gt;&gt;&gt; scan = db.get_scan('007')\n&gt;&gt;&gt; print(scan)\nNone\n&gt;&gt;&gt; db.delete_scan('008')\nOSError: Invalid id\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def delete_scan(self, id):\n    \"\"\"Delete an existing `Scan` from the local database.\n\n    Parameters\n    ----------\n    id : str\n        The name of the scan to create. It should exist in the local database.\n\n    Raises\n    ------\n    IOError\n        If the `id` do not exist in the local database.\n\n    See Also\n    --------\n    plantdb.fsdb._delete_scan\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import FSDB\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db()\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; new_scan = db.create_scan('007')\n    &gt;&gt;&gt; print(new_scan)\n    &lt;plantdb.fsdb.Scan object at 0x7f0730b1e390&gt;\n    &gt;&gt;&gt; db.delete_scan('007')\n    &gt;&gt;&gt; scan = db.get_scan('007')\n    &gt;&gt;&gt; print(scan)\n    None\n    &gt;&gt;&gt; db.delete_scan('008')\n    OSError: Invalid id\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    scan = self.get_scan(id)\n    if scan is None:\n        raise IOError(\"Invalid id\")\n    _delete_scan(scan)\n    self.scans.remove(scan)\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.disconnect","title":"<code>disconnect()</code>","text":"<p>Disconnect from the local database.</p> <p>Handle DB \"locking\" system by removing the <code>LOCK_FILE_NAME</code> file from the DB.</p> <p>Raises:</p> Type Description <code>IOError</code> <p>If the <code>LOCK_FILE_NAME</code> cannot be removed using the <code>lock_path</code> attribute.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; print(db.is_connected)\nFalse\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; print(db.is_connected)\nTrue\n&gt;&gt;&gt; db.disconnect()\n&gt;&gt;&gt; print(db.is_connected)\nFalse\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def disconnect(self):\n    \"\"\"Disconnect from the local database.\n\n    Handle DB \"locking\" system by removing the `LOCK_FILE_NAME` file from the DB.\n\n    Raises\n    ------\n    IOError\n        If the `LOCK_FILE_NAME` cannot be removed using the ``lock_path`` attribute.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db()\n    &gt;&gt;&gt; print(db.is_connected)\n    False\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; print(db.is_connected)\n    True\n    &gt;&gt;&gt; db.disconnect()\n    &gt;&gt;&gt; print(db.is_connected)\n    False\n\n    \"\"\"\n    if self.is_connected:\n        for s in self.scans:\n            s._erase()\n        if _is_safe_to_delete(self.lock_path):\n            self.lock_path.unlink(missing_ok=True)\n            atexit.unregister(self.disconnect)\n        else:\n            raise IOError(\"Could not remove lock, maybe you messed with the `lock_path` attribute?\")\n        self.scans = []\n        self.is_connected = False\n    else:\n        logger.info(f\"Not connected!\")\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.get_scan","title":"<code>get_scan(id, create=False)</code>","text":"<p>Get or create a <code>Scan</code> instance in the local database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The name of the scan dataset to get/create. It should exist if <code>create</code> is <code>False</code>.</p> required <code>create</code> <code>bool</code> <p>If <code>False</code> (default), the given <code>id</code> should exist in the local database. Else the given <code>id</code> should NOT exist as they are unique.</p> <code>False</code> Notes <p>If the <code>id</code> do not exist in the local database and <code>create</code> is <code>False</code>, <code>None</code> is returned.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; db.list_scans()\n['myscan_001']\n&gt;&gt;&gt; new_scan = db.get_scan('007', create=True)\n&gt;&gt;&gt; print(new_scan)\n&lt;plantdb.fsdb.Scan object at **************&gt;\n&gt;&gt;&gt; db.list_scans()\n['myscan_001', '007']\n&gt;&gt;&gt; unknown_scan = db.get_scan('unknown')\n&gt;&gt;&gt; print(unknown_scan)\nNone\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_scan(self, id, create=False):\n    \"\"\"Get or create a `Scan` instance in the local database.\n\n    Parameters\n    ----------\n    id : str\n        The name of the scan dataset to get/create.\n        It should exist if `create` is `False`.\n    create : bool, optional\n        If ``False`` (default), the given `id` should exist in the local database.\n        Else the given `id` should NOT exist as they are unique.\n\n    Notes\n    -----\n    If the `id` do not exist in the local database and `create` is `False`, `None` is returned.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; db.list_scans()\n    ['myscan_001']\n    &gt;&gt;&gt; new_scan = db.get_scan('007', create=True)\n    &gt;&gt;&gt; print(new_scan)\n    &lt;plantdb.fsdb.Scan object at **************&gt;\n    &gt;&gt;&gt; db.list_scans()\n    ['myscan_001', '007']\n    &gt;&gt;&gt; unknown_scan = db.get_scan('unknown')\n    &gt;&gt;&gt; print(unknown_scan)\n    None\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    ids = [f.id for f in self.scans]\n    if id not in ids:\n        if create:\n            return self.create_scan(id)\n        return None\n    return self.scans[ids.index(id)]\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.get_scans","title":"<code>get_scans(query=None)</code>","text":"<p>Get the list of <code>Scan</code> instances defined in the local database, possibly filtered using a <code>query</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>dict</code> <p>Query to use to get a list of scans.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of plantdb.fsdb.Scan</code> <p>List of <code>Scan</code>s, filtered by the <code>query</code> if any.</p> See Also <p>plantdb.fsdb._filter_query</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; db.get_scans()\n[&lt;plantdb.fsdb.Scan at *x************&gt;]\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_scans(self, query=None):\n    \"\"\"Get the list of `Scan` instances defined in the local database, possibly filtered using a `query`.\n\n    Parameters\n    ----------\n    query : dict, optional\n        Query to use to get a list of scans.\n\n    Returns\n    -------\n    list of plantdb.fsdb.Scan\n        List of `Scan`s, filtered by the `query` if any.\n\n    See Also\n    --------\n    plantdb.fsdb._filter_query\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; db.get_scans()\n    [&lt;plantdb.fsdb.Scan at *x************&gt;]\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _filter_query(self.scans, query)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.list_scans","title":"<code>list_scans(query=None)</code>","text":"<p>Get the list of scans in the local database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; db.list_scans()\n['myscan_001']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def list_scans(self, query=None) -&gt; list:\n    \"\"\"Get the list of scans in the local database.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; db.list_scans()\n    ['myscan_001']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return [f.id for f in self.get_scans(query)]\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.path","title":"<code>path()</code>","text":"<p>Get the path to the local database root directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; db.path()\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def path(self) -&gt; pathlib.Path:\n    \"\"\"Get the path to the local database root directory.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; db.path()\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return copy.deepcopy(self.basedir)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FSDB.reload","title":"<code>reload()</code>","text":"<p>Reload the database by scanning datasets.</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def reload(self):\n    \"\"\"Reload the database by scanning datasets.\"\"\"\n    if self.is_connected:\n        logger.error(\"Reloading the database...\")\n        self.scans = _load_scans(self)\n        logger.info(\"Done!\")\n    else:\n        logger.error(f\"You are not connected to the database!\")\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File","title":"<code>File(fileset, id, **kwargs)</code>","text":"<p>             Bases: <code>File</code></p> <p>Implement <code>File</code> for the local File System DataBase from abstract class <code>db.File</code>.</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>FSDB</code> <p>Database where to find the fileset.</p> <code>fileset</code> <code>Fileset</code> <p>Set of files containing the file.</p> <code>id</code> <code>str</code> <p>Name of the file in the <code>FSDB</code> local database.</p> <code>filename</code> <code>str</code> <p>File name.</p> <code>metadata</code> <code>dict</code> <p>Dictionary of metadata attached to the file.</p> See Also <p>plantdb.db.File</p> Notes <p><code>File</code> must be writen using <code>write_raw</code> or <code>write</code> methods to exist on disk. Else they are just referenced in the database!</p> <p>Contrary to other classes (<code>Scan</code> &amp; <code>Fileset</code>) the uniqueness is not checked!</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def __init__(self, fileset, id, **kwargs):\n    super().__init__(fileset, id, **kwargs)\n    self.metadata = None\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.get_metadata","title":"<code>get_metadata(key=None, default={})</code>","text":"<p>Get the metadata associated to a file.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A key that should exist in the file's metadata.</p> <code>None</code> <code>default</code> <code>Any</code> <p>The default value to return if the key do not exist in the metadata. Default is an empty dictionary<code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>any</code> <p>If <code>key</code> is <code>None</code>, returns a dictionary. Else, returns the value attached to this key.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; from plantdb.fsdb import _file_metadata_path\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; f = fs.get_file(\"test_json\")\n&gt;&gt;&gt; print(f.get_metadata())\n{'random json': True}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_metadata(self, key=None, default={}):\n    \"\"\"Get the metadata associated to a file.\n\n    Parameters\n    ----------\n    key : str\n        A key that should exist in the file's metadata.\n    default : Any, optional\n        The default value to return if the key do not exist in the metadata.\n        Default is an empty dictionary``{}``.\n\n    Returns\n    -------\n    any\n        If `key` is ``None``, returns a dictionary.\n        Else, returns the value attached to this key.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; from plantdb.fsdb import _file_metadata_path\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; f = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; print(f.get_metadata())\n    {'random json': True}\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _get_metadata(self.metadata, key, default)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.import_file","title":"<code>import_file(path)</code>","text":"<p>Import the file from its local path to the current fileset.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>The path to the file to import.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; from plantdb.fsdb import _file_metadata_path\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; file = fs.get_file(\"test_json\")\n&gt;&gt;&gt; new_file = fs.create_file('test_json2')\n&gt;&gt;&gt; new_file.import_file(file.path())\n&gt;&gt;&gt; print(new_file.path().exists())\nTrue\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def import_file(self, path):\n    \"\"\"Import the file from its local path to the current fileset.\n\n    Parameters\n    ----------\n    path : str or pathlib.Path\n        The path to the file to import.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; from plantdb.fsdb import _file_metadata_path\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; file = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; new_file = fs.create_file('test_json2')\n    &gt;&gt;&gt; new_file.import_file(file.path())\n    &gt;&gt;&gt; print(new_file.path().exists())\n    True\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if isinstance(path, str):\n        path = Path(path)\n    ext = path.suffix[1:]\n    self.filename = _get_filename(self, ext)\n    newpath = _file_path(self)\n    copyfile(path, newpath)\n    self.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.path","title":"<code>path()</code>","text":"<p>Get the path to the local file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; fs.list_files()\n['dummy_image', 'test_image', 'test_json']\n&gt;&gt;&gt; f = fs.get_file('dummy_image')\n&gt;&gt;&gt; f.path()  # should be '/tmp/romidb_********/myscan_001/fileset_001/dummy_image.png'\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def path(self) -&gt; pathlib.Path:\n    \"\"\"Get the path to the local file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; fs.list_files()\n    ['dummy_image', 'test_image', 'test_json']\n    &gt;&gt;&gt; f = fs.get_file('dummy_image')\n    &gt;&gt;&gt; f.path()  # should be '/tmp/romidb_********/myscan_001/fileset_001/dummy_image.png'\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _file_path(self)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.read","title":"<code>read()</code>","text":"<p>Read the file and return its contents.</p> <p>Returns:</p> Type Description <code>str</code> <p>The contents of the file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.get_file(\"test_json\")\n&gt;&gt;&gt; js = f.read()\n&gt;&gt;&gt; print(js)  # print the content of the file\n{\n    \"Who you gonna call?\": \"Ghostbuster\"\n}\n&gt;&gt;&gt; # Convert this raw json into a dictionary with dedicated method from `json` library:\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; js_dict = json.loads(js)\n&gt;&gt;&gt; print(js_dict)\n{'Who you gonna call?': 'Ghostbuster'}\n&gt;&gt;&gt; print(type(js_dict))\n&lt;class 'dict'&gt;\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def read(self):\n    \"\"\"Read the file and return its contents.\n\n    Returns\n    -------\n    str\n        The contents of the file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; js = f.read()\n    &gt;&gt;&gt; print(js)  # print the content of the file\n    {\n        \"Who you gonna call?\": \"Ghostbuster\"\n    }\n    &gt;&gt;&gt; # Convert this raw json into a dictionary with dedicated method from `json` library:\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; js_dict = json.loads(js)\n    &gt;&gt;&gt; print(js_dict)\n    {'Who you gonna call?': 'Ghostbuster'}\n    &gt;&gt;&gt; print(type(js_dict))\n    &lt;class 'dict'&gt;\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    path = _file_path(self)\n    with path.open(mode=\"r\") as f:\n        return f.read()\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.read_raw","title":"<code>read_raw()</code>","text":"<p>Read the file and return its contents.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>The contents of the file.</p> Example <p>from plantdb.fsdb import dummy_db db = dummy_db(with_file=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.get_file(\"test_json\") js = f.read_raw() print(js)  # print the raw bytes content</p>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.read_raw--convert-this-raw-json-into-a-dictionary-with-dedicated-method-from-json-library","title":"Convert this raw json into a dictionary with dedicated method from <code>json</code> library:","text":"<p>import json js_dict = json.loads(js) print(js_dict) {'Who you gonna call?': 'Ghostbuster'} print(type(js_dict))  db.disconnect() Source code in <code>plantdb/fsdb.py</code> <pre><code>def read_raw(self):\n    \"\"\"Read the file and return its contents.\n\n    Returns\n    -------\n    bytes\n        The contents of the file.\n\n    Example\n    -------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; js = f.read_raw()\n    &gt;&gt;&gt; print(js)  # print the raw bytes content\n    &gt;&gt;&gt; # Convert this raw json into a dictionary with dedicated method from `json` library:\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; js_dict = json.loads(js)\n    &gt;&gt;&gt; print(js_dict)\n    {'Who you gonna call?': 'Ghostbuster'}\n    &gt;&gt;&gt; print(type(js_dict))\n    &lt;class 'dict'&gt;\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    path = _file_path(self)\n    with path.open(mode=\"rb\") as f:\n        return f.read()\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.set_metadata","title":"<code>set_metadata(data, value=None)</code>","text":"<p>Add a new metadata to the file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>If a string, a key to address the <code>value</code>. If a dictionary, update the metadata dictionary with <code>data</code> (<code>value</code> is then unused).</p> required <code>value</code> <code>any</code> <p>The value to assign to <code>data</code> if the latest is not a dictionary.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; from plantdb.fsdb import _file_metadata_path\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; file = fs.get_file(\"test_json\")\n&gt;&gt;&gt; file.set_metadata(\"test\", \"value\")\n&gt;&gt;&gt; p = _file_metadata_path(file)\n&gt;&gt;&gt; print(p.exists())\nTrue\n&gt;&gt;&gt; print(json.load(p.open(mode='r')))\n{'random json': True, 'test': 'value'}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def set_metadata(self, data, value=None):\n    \"\"\"Add a new metadata to the file.\n\n    Parameters\n    ----------\n    data : str or dict\n        If a string, a key to address the `value`.\n        If a dictionary, update the metadata dictionary with `data` (`value` is then unused).\n    value : any, optional\n        The value to assign to `data` if the latest is not a dictionary.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; from plantdb.fsdb import _file_metadata_path\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; file = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; file.set_metadata(\"test\", \"value\")\n    &gt;&gt;&gt; p = _file_metadata_path(file)\n    &gt;&gt;&gt; print(p.exists())\n    True\n    &gt;&gt;&gt; print(json.load(p.open(mode='r')))\n    {'random json': True, 'test': 'value'}\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if self.metadata == None:\n        self.metadata = {}\n    _set_metadata(self.metadata, data, value)\n    _store_file_metadata(self)\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.store","title":"<code>store()</code>","text":"<p>Save changes to the scan main JSON FILE (files.json).</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def store(self):\n    \"\"\"Save changes to the scan main JSON FILE (files.json).\"\"\"\n    self.fileset.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.write","title":"<code>write(data, ext='')</code>","text":"<p>Write a file from data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>A string representation of the content to write.</p> required <code>ext</code> <code>str</code> <p>The extension to use to save the file.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; new_f = fs.create_file('file_007')\n&gt;&gt;&gt; md = {\"Name\": \"Bond, James Bond\"}  # Create an example dictionary to save as JSON\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; data = json.dumps(md)\n&gt;&gt;&gt; print(data)\n{\"Name\": \"Bond, James Bond\"}\n&gt;&gt;&gt; print(type(data))\n&lt;class 'str'&gt;\n&gt;&gt;&gt; new_f.write(data, 'json')\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.listdir(fs.path())\n['file_007.json', 'test_image.png', 'test_json.json', 'dummy_image.png']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def write(self, data, ext=\"\"):\n    \"\"\"Write a file from data.\n\n    Parameters\n    ----------\n    data : str\n        A string representation of the content to write.\n    ext : str, optional\n        The extension to use to save the file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; new_f = fs.create_file('file_007')\n    &gt;&gt;&gt; md = {\"Name\": \"Bond, James Bond\"}  # Create an example dictionary to save as JSON\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; data = json.dumps(md)\n    &gt;&gt;&gt; print(data)\n    {\"Name\": \"Bond, James Bond\"}\n    &gt;&gt;&gt; print(type(data))\n    &lt;class 'str'&gt;\n    &gt;&gt;&gt; new_f.write(data, 'json')\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; os.listdir(fs.path())\n    ['file_007.json', 'test_image.png', 'test_json.json', 'dummy_image.png']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    self.filename = _get_filename(self, ext)\n    path = _file_path(self)\n    with path.open(mode=\"w\") as f:\n        f.write(data)\n    self.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.File.write_raw","title":"<code>write_raw(data, ext='')</code>","text":"<p>Write a file from raw byte data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>The raw byte content to write.</p> required <code>ext</code> <code>str</code> <p>The extension to use to save the file.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; new_f = fs.create_file('file_007')\n&gt;&gt;&gt; md = {\"Name\": \"Bond, James Bond\"}  # Create an example dictionary to save as JSON\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; data = json.dumps(md).encode()\n&gt;&gt;&gt; print(data)\nb'{\"Name\": \"Bond, James Bond\"}'\n&gt;&gt;&gt; new_f.write_raw(data, 'json')\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.listdir(fs.path())\n['file_007.json', 'test_image.png', 'test_json.json', 'dummy_image.png']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def write_raw(self, data, ext=\"\"):\n    \"\"\"Write a file from raw byte data.\n\n    Parameters\n    ----------\n    data : bytes\n        The raw byte content to write.\n    ext : str, optional\n        The extension to use to save the file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; new_f = fs.create_file('file_007')\n    &gt;&gt;&gt; md = {\"Name\": \"Bond, James Bond\"}  # Create an example dictionary to save as JSON\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; data = json.dumps(md).encode()\n    &gt;&gt;&gt; print(data)\n    b'{\"Name\": \"Bond, James Bond\"}'\n    &gt;&gt;&gt; new_f.write_raw(data, 'json')\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; os.listdir(fs.path())\n    ['file_007.json', 'test_image.png', 'test_json.json', 'dummy_image.png']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    self.filename = _get_filename(self, ext)\n    path = _file_path(self)\n    with path.open(mode=\"wb\") as f:\n        f.write(data)\n    self.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FileNoFileNameError","title":"<code>FileNoFileNameError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>No 'file' entry could be found for this file.</p>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FileNoIDError","title":"<code>FileNoIDError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>No 'id' entry could be found for this file.</p>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset","title":"<code>Fileset(scan, id)</code>","text":"<p>             Bases: <code>Fileset</code></p> <p>Implement <code>Fileset</code> for the local File System DataBase from abstract class <code>db.Fileset</code>.</p> <p>Implementation of a fileset as a simple files structure with:   * directory <code>${FSDB.basedir}/${FSDB.scan.id}/${Fileset.id}</code> containing set of files;   * directory <code>${FSDB.basedir}/${FSDB.scan.id}/metadata</code> containing JSON metadata associated to files;   * JSON file <code>files.json</code> containing the list of files from fileset;</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>FSDB</code> <p>Database where to find the <code>scan</code>.</p> <code>id</code> <code>str</code> <p>Name of the scan in the database <code>db</code>.</p> <code>scan</code> <code>Scan</code> <p>Scan containing the set of files of interest.</p> <code>metadata</code> <code>dict</code> <p>Dictionary of metadata attached to the fileset.</p> <code>files</code> <code>list of plantdb.fsdb.File</code> <p>List of <code>File</code> objects.</p> See Also <p>plantdb.db.Fileset</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>Scan instance containing the fileset.</p> required <code>id</code> <code>str</code> <p>Id of the fileset instance.</p> required Source code in <code>plantdb/fsdb.py</code> <pre><code>def __init__(self, scan, id):\n    \"\"\"Constructor.\n\n    Parameters\n    ----------\n    scan : plantdb.fsdb.Scan\n        Scan instance containing the fileset.\n    id : str\n        Id of the fileset instance.\n    \"\"\"\n    super().__init__(scan, id)\n    self.metadata = None\n    self.files = []\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.create_file","title":"<code>create_file(id)</code>","text":"<p>Create a new <code>File</code> instance in the local database attached to the current <code>Fileset</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The name of the file to create.</p> required <p>Returns:</p> Type Description <code>File</code> <p>The <code>File</code> instance created in the current <code>Fileset</code> instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; fs.list_files()\n['dummy_image', 'test_image', 'test_json']\n&gt;&gt;&gt; new_f = fs.create_file('file_007')\n&gt;&gt;&gt; fs.list_files()\n['dummy_image', 'test_image', 'test_json', 'file_007']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.listdir(fs.path())  # the file only exist in the database, not on drive!\n['test_image.png', 'test_json.json', 'dummy_image.png']\n&gt;&gt;&gt; md = {\"Name\": \"Bond, James Bond\"}  # Create an example dictionary to save as JSON\n&gt;&gt;&gt; from plantdb import io\n&gt;&gt;&gt; io.write_json(new_f, md, \"json\")  # write the file on drive\n&gt;&gt;&gt; os.listdir(fs.path())\n['file_007.json', 'test_image.png', 'test_json.json', 'dummy_image.png']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def create_file(self, id):\n    \"\"\"Create a new `File` instance in the local database attached to the current `Fileset` instance.\n\n    Parameters\n    ----------\n    id : str\n        The name of the file to create.\n\n    Returns\n    -------\n    plantdb.fsdb.File\n        The `File` instance created in the current `Fileset` instance.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; fs.list_files()\n    ['dummy_image', 'test_image', 'test_json']\n    &gt;&gt;&gt; new_f = fs.create_file('file_007')\n    &gt;&gt;&gt; fs.list_files()\n    ['dummy_image', 'test_image', 'test_json', 'file_007']\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; os.listdir(fs.path())  # the file only exist in the database, not on drive!\n    ['test_image.png', 'test_json.json', 'dummy_image.png']\n    &gt;&gt;&gt; md = {\"Name\": \"Bond, James Bond\"}  # Create an example dictionary to save as JSON\n    &gt;&gt;&gt; from plantdb import io\n    &gt;&gt;&gt; io.write_json(new_f, md, \"json\")  # write the file on drive\n    &gt;&gt;&gt; os.listdir(fs.path())\n    ['file_007.json', 'test_image.png', 'test_json.json', 'dummy_image.png']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    file = File(self, id)\n    self.files.append(file)\n    self.store()\n    return file\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.delete_file","title":"<code>delete_file(file_id)</code>","text":"<p>Delete a given file from the current fileset.</p> <p>Parameters:</p> Name Type Description Default <code>fileset_id</code> <code>str</code> <p>Name of the file to delete.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; fs.list_files()\n['dummy_image', 'test_image', 'test_json']\n&gt;&gt;&gt; fs.delete_file('dummy_image')\ndelete /tmp/romidb_********/myscan_001/fileset_001/dummy_image.png\n&gt;&gt;&gt; fs.list_files()\n['test_image', 'test_json']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; list(fs.path().iterdir())  # the file has been removed from the drive and the database\n['test_image.png', 'test_json.json']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def delete_file(self, file_id):\n    \"\"\"Delete a given file from the current fileset.\n\n    Parameters\n    ----------\n    fileset_id : str\n        Name of the file to delete.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; fs.list_files()\n    ['dummy_image', 'test_image', 'test_json']\n    &gt;&gt;&gt; fs.delete_file('dummy_image')\n    delete /tmp/romidb_********/myscan_001/fileset_001/dummy_image.png\n    &gt;&gt;&gt; fs.list_files()\n    ['test_image', 'test_json']\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; list(fs.path().iterdir())  # the file has been removed from the drive and the database\n    ['test_image.png', 'test_json.json']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    x = self.get_file(file_id, create=False)\n    if x is None:\n        raise IOError(f\"Invalid file ID: {file_id}\")\n    _delete_file(x)\n    self.files.remove(x)\n    self.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.get_file","title":"<code>get_file(id, create=False)</code>","text":"<p>Get or create a <code>File</code> instance, of given <code>id</code>, in the current fileset.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Name of the file to get/create.</p> required <code>create</code> <code>bool</code> <p>If <code>False</code> (default), the given <code>id</code> should exist in the local database. Else the given <code>id</code> should NOT exist as they are unique.</p> <code>False</code> <p>Returns:</p> Type Description <code>File</code> <p>The retrieved or created file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.get_file(\"test_image\")\n&gt;&gt;&gt; # To read the file you need to load the right reader from plantdb.io\n&gt;&gt;&gt; from plantdb.io import read_image\n&gt;&gt;&gt; img = read_image(f)\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_file(self, id, create=False):\n    \"\"\"Get or create a `File` instance, of given `id`, in the current fileset.\n\n    Parameters\n    ----------\n    id : str\n        Name of the file to get/create.\n    create : bool\n        If ``False`` (default), the given `id` should exist in the local database.\n        Else the given `id` should NOT exist as they are unique.\n\n    Returns\n    -------\n    plantdb.fsdb.File\n        The retrieved or created file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.get_file(\"test_image\")\n    &gt;&gt;&gt; # To read the file you need to load the right reader from plantdb.io\n    &gt;&gt;&gt; from plantdb.io import read_image\n    &gt;&gt;&gt; img = read_image(f)\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    ids = [f.id for f in self.files]\n    if id not in ids:\n        if create:\n            return self.create_file(id)\n        return None\n    return self.files[ids.index(id)]\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.get_files","title":"<code>get_files(query=None)</code>","text":"<p>Get the list of <code>File</code> instances defined in the current fileset, possibly filtered using a <code>query</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>dict</code> <p>Query to use to get a list of files.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of plantdb.fsdb.File</code> <p>List of <code>File</code>s, filtered by the query if any.</p> See Also <p>plantdb.fsdb._filter_query</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; fs.get_files()\n[&lt;plantdb.fsdb.File at *x************&gt;,\n &lt;plantdb.fsdb.File at *x************&gt;,\n &lt;plantdb.fsdb.File at *x************&gt;]\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_files(self, query=None):\n    \"\"\"Get the list of `File` instances defined in the current fileset, possibly filtered using a `query`.\n\n    Parameters\n    ----------\n    query : dict, optional\n        Query to use to get a list of files.\n\n    Returns\n    -------\n    list of plantdb.fsdb.File\n        List of `File`s, filtered by the query if any.\n\n    See Also\n    --------\n    plantdb.fsdb._filter_query\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; fs.get_files()\n    [&lt;plantdb.fsdb.File at *x************&gt;,\n     &lt;plantdb.fsdb.File at *x************&gt;,\n     &lt;plantdb.fsdb.File at *x************&gt;]\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _filter_query(self.files, query)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.get_metadata","title":"<code>get_metadata(key=None, default={})</code>","text":"<p>Get the metadata associated to a fileset.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A key that should exist in the fileset's metadata.</p> <code>None</code> <code>default</code> <code>Any</code> <p>The default value to return if the key do not exist in the metadata. Default is an empty dictionary<code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>any</code> <p>If <code>key</code> is <code>None</code>, returns a dictionary. Else, returns the value attached to this key.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; fs.set_metadata(\"test\", \"value\")\n&gt;&gt;&gt; print(fs.get_metadata(\"test\"))\n'value'\n&gt;&gt;&gt; db.disconnect()\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; print(fs.get_metadata(\"test\"))\n'value'\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_metadata(self, key=None, default={}):\n    \"\"\"Get the metadata associated to a fileset.\n\n    Parameters\n    ----------\n    key : str\n        A key that should exist in the fileset's metadata.\n    default : Any, optional\n        The default value to return if the key do not exist in the metadata.\n        Default is an empty dictionary``{}``.\n\n    Returns\n    -------\n    any\n        If `key` is ``None``, returns a dictionary.\n        Else, returns the value attached to this key.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; fs.set_metadata(\"test\", \"value\")\n    &gt;&gt;&gt; print(fs.get_metadata(\"test\"))\n    'value'\n    &gt;&gt;&gt; db.disconnect()\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; print(fs.get_metadata(\"test\"))\n    'value'\n\n    \"\"\"\n    return _get_metadata(self.metadata, key, default)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.list_files","title":"<code>list_files(query=None)</code>","text":"<p>Get the list of files in the fileset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; fs.list_files()\n['dummy_image', 'test_image', 'test_json']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def list_files(self, query=None) -&gt; list:\n    \"\"\"Get the list of files in the fileset.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; fs.list_files()\n    ['dummy_image', 'test_image', 'test_json']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return [f.id for f in self.get_files(query)]\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.path","title":"<code>path()</code>","text":"<p>Get the path to the local fileset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; [scan.id for scan in db.get_scans()]  # list scan ids found in database\n['myscan_001']\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; print(scan.path())  # should be '/tmp/romidb_********/myscan_001'\n&gt;&gt;&gt; [fs.id for fs in scan.get_filesets()]  # list fileset ids found in scan\n['fileset_001']\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; print(fs.path())  # should be '/tmp/romidb_********/myscan_001/fileset_001'\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def path(self) -&gt; pathlib.Path:\n    \"\"\"Get the path to the local fileset.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_scan=True, with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; [scan.id for scan in db.get_scans()]  # list scan ids found in database\n    ['myscan_001']\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; print(scan.path())  # should be '/tmp/romidb_********/myscan_001'\n    &gt;&gt;&gt; [fs.id for fs in scan.get_filesets()]  # list fileset ids found in scan\n    ['fileset_001']\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; print(fs.path())  # should be '/tmp/romidb_********/myscan_001/fileset_001'\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _fileset_path(self)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.set_metadata","title":"<code>set_metadata(data, value=None)</code>","text":"<p>Add a new metadata to the fileset.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>If a string, a key to address the <code>value</code>. If a dictionary, update the metadata dictionary with <code>data</code> (<code>value</code> is then unused).</p> required <code>value</code> <code>any</code> <p>The value to assign to <code>data</code> if the latest is not a dictionary.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; from plantdb.fsdb import _fileset_metadata_json_path\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n&gt;&gt;&gt; fs.set_metadata(\"test\", \"value\")\n&gt;&gt;&gt; p = _fileset_metadata_json_path(fs)\n&gt;&gt;&gt; print(p.exists())\nTrue\n&gt;&gt;&gt; print(json.load(p.open(mode='r')))\n{'test': 'value'}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def set_metadata(self, data, value=None):\n    \"\"\"Add a new metadata to the fileset.\n\n    Parameters\n    ----------\n    data : str or dict\n        If a string, a key to address the `value`.\n        If a dictionary, update the metadata dictionary with `data` (`value` is then unused).\n    value : any, optional\n        The value to assign to `data` if the latest is not a dictionary.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; from plantdb.fsdb import _fileset_metadata_json_path\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset('fileset_001')\n    &gt;&gt;&gt; fs.set_metadata(\"test\", \"value\")\n    &gt;&gt;&gt; p = _fileset_metadata_json_path(fs)\n    &gt;&gt;&gt; print(p.exists())\n    True\n    &gt;&gt;&gt; print(json.load(p.open(mode='r')))\n    {'test': 'value'}\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if self.metadata == None:\n        self.metadata = {}\n    _set_metadata(self.metadata, data, value)\n    _store_fileset_metadata(self)\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Fileset.store","title":"<code>store()</code>","text":"<p>Save changes to the scan main JSON FILE (files.json).</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def store(self):\n    \"\"\"Save changes to the scan main JSON FILE (files.json).\"\"\"\n    self.scan.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FilesetNoIDError","title":"<code>FilesetNoIDError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>No 'id' entry could be found for this fileset.</p>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.FilesetNotFoundError","title":"<code>FilesetNotFoundError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Could not find the fileset directory.</p>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan","title":"<code>Scan(db, id)</code>","text":"<p>             Bases: <code>Scan</code></p> <p>Implement <code>Scan</code> for the local File System DataBase from abstract class <code>db.Scan</code>.</p> <p>Implementation of a scan as a simple file structure with:   * directory <code>${Scan.db.basedir}/${Scan.db.id}</code> as scan root directory;   * (OPTIONAL) directory <code>${Scan.db.basedir}/${Scan.db.id}/metadata</code> containing JSON metadata file   * (OPTIONAL) JSON file <code>metadata.json</code> with Scan metadata</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>FSDB</code> <p>Database where to find the scan.</p> <code>id</code> <code>str</code> <p>The scan unique name in the local database.</p> <code>metadata</code> <code>dict</code> <p>Dictionary of metadata attached to the scan.</p> <code>filesets</code> <code>list of plantdb.fsdb.Fileset</code> <p>List of <code>Fileset</code> objects.</p> Notes <p>Optional directory <code>metadata</code> &amp; JSON file <code>metadata.json</code> are found when using method <code>set_metadata()</code>.</p> See Also <p>plantdb.db.Scan</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; from plantdb.fsdb import Scan\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; # Example #1: Initialize a `Scan` object using an `FSBD` object:\n&gt;&gt;&gt; scan = Scan(db, '007')\n&gt;&gt;&gt; print(type(scan))\n&lt;class 'plantdb.fsdb.Scan'&gt;\n&gt;&gt;&gt; print(scan.path())  # the obtained path should be different as the path to the created `dummy_db` change...\n/tmp/romidb_j0pbkoo0/007\n&gt;&gt;&gt; print(db.get_scan('007'))  # Note that it did NOT create this `Scan` in the database!\nNone\n&gt;&gt;&gt; print(os.listdir(db.path()))  # And it is NOT found under the `basedir` directory\n['romidb']\n&gt;&gt;&gt; # HOWEVER if you add metadata to the `Scan` object:\n&gt;&gt;&gt; scan.set_metadata({'Name': \"Bond... James Bond!\"})\n&gt;&gt;&gt; print(scan.metadata)\n{'Name': 'Bond... James Bond!'}\n&gt;&gt;&gt; print(db.get_scan('007'))  # The `Scan` is still not found in the database!\nNone\n&gt;&gt;&gt; print(os.listdir(db.path()))  # BUT it is now found under the `basedir` directory\n['007', 'romidb']\n&gt;&gt;&gt; print(os.listdir(os.path.join(db.path(), scan.id)))  # Same goes for the metadata\n['metadata']\n&gt;&gt;&gt; print(os.listdir(os.path.join(db.path(), scan.id, \"metadata\")))  # Same goes for the metadata\n&gt;&gt;&gt; db.disconnect()\n</code></pre> <pre><code>&gt;&gt;&gt; # Example #2: Get it from an `FSDB` object:\n&gt;&gt;&gt; db = dummy_db()\n&gt;&gt;&gt; scan = db.get_scan('007', create=True)\n&gt;&gt;&gt; print(type(scan))\n&lt;class 'plantdb.fsdb.Scan'&gt;\n&gt;&gt;&gt; print(db.get_scan('007'))  # This time the `Scan` object is found in the `FSBD`\n&lt;plantdb.fsdb.Scan object at 0x7f34fc860fd0&gt;\n&gt;&gt;&gt; print(os.listdir(db.path()))  # And it is found under the `basedir` directory\n['007', 'romidb']\n&gt;&gt;&gt; print(os.listdir(os.path.join(db.path(), scan.id)))  # Same goes for the metadata\n['metadata']\n&gt;&gt;&gt; db.disconnect()\n&gt;&gt;&gt; # When reconnecting to db, if created scan is EMPTY (no Fileset &amp; File) it is not found!\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; print(db.get_scan('007'))\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; # Example #3: Use an existing database:\n&gt;&gt;&gt; from os import environ\n&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; db = FSDB(environ.get('ROMI_DB', \"/data/ROMI/DB/\"))\n&gt;&gt;&gt; db.connect(unsafe=True)\n&gt;&gt;&gt; scan = db.get_scan('sango_90_300_36')\n&gt;&gt;&gt; scan.get_metadata()\n</code></pre> <p>Scan dataset constructor.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database to put/find the scan dataset.</p> required <code>id</code> <code>str</code> <p>The scan dataset name, should be unique in the <code>db</code>.</p> required Source code in <code>plantdb/fsdb.py</code> <pre><code>def __init__(self, db, id):\n    \"\"\"Scan dataset constructor.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database to put/find the scan dataset.\n    id : str\n        The scan dataset name, should be unique in the `db`.\n    \"\"\"\n    super().__init__(db, id)\n    # Defines attributes:\n    self.metadata = None\n    self.measures = None\n    self.filesets = []\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.create_fileset","title":"<code>create_fileset(id)</code>","text":"<p>Create a new <code>Fileset</code> instance in the local database attached to the current <code>Scan</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The name of the fileset to create. It should not exist in the current <code>Scan</code> instance.</p> required <p>Returns:</p> Type Description <code>Fileset</code> <p>The <code>Fileset</code> instance created in the current <code>Scan</code> instance.</p> <p>Raises:</p> Type Description <code>IOError</code> <p>If the <code>id</code> already exists in the current <code>Scan</code> instance. If the <code>id</code> is not valid.</p> See Also <p>plantdb.fsdb._is_valid_id plantdb.fsdb._make_fileset</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; scan.list_filesets()\n['fileset_001']\n&gt;&gt;&gt; new_fs = scan.create_fileset('fs_007')\n&gt;&gt;&gt; scan.list_filesets()\n['fileset_001', 'fs_007']\n&gt;&gt;&gt; wrong_fs = scan.create_fileset('fileset_001')\nOSError: Duplicate scan name: fileset_001\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def create_fileset(self, id):\n    \"\"\"Create a new `Fileset` instance in the local database attached to the current `Scan` instance.\n\n    Parameters\n    ----------\n    id : str\n        The name of the fileset to create. It should not exist in the current `Scan` instance.\n\n    Returns\n    -------\n    plantdb.fsdb.Fileset\n        The `Fileset` instance created in the current `Scan` instance.\n\n    Raises\n    ------\n    IOError\n        If the `id` already exists in the current `Scan` instance.\n        If the `id` is not valid.\n\n    See Also\n    --------\n    plantdb.fsdb._is_valid_id\n    plantdb.fsdb._make_fileset\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; scan.list_filesets()\n    ['fileset_001']\n    &gt;&gt;&gt; new_fs = scan.create_fileset('fs_007')\n    &gt;&gt;&gt; scan.list_filesets()\n    ['fileset_001', 'fs_007']\n    &gt;&gt;&gt; wrong_fs = scan.create_fileset('fileset_001')\n    OSError: Duplicate scan name: fileset_001\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if not _is_valid_id(id):\n        raise IOError(f\"Invalid fileset id: {id}\")\n    if self.get_fileset(id) != None:\n        raise IOError(f\"Duplicate fileset name: {id}\")\n    fileset = Fileset(self, id)\n    _make_fileset(fileset)\n    self.filesets.append(fileset)\n    self.store()\n    return fileset\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.delete_fileset","title":"<code>delete_fileset(fileset_id)</code>","text":"<p>Delete a given fileset from the scan dataset.</p> <p>Parameters:</p> Name Type Description Default <code>fileset_id</code> <code>str</code> <p>Name of the fileset to delete.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; scan.list_filesets()\n['fileset_001']\n&gt;&gt;&gt; scan.delete_fileset('fileset_001')\n&gt;&gt;&gt; scan.list_filesets()\n[]\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def delete_fileset(self, fileset_id):\n    \"\"\"Delete a given fileset from the scan dataset.\n\n    Parameters\n    ----------\n    fileset_id : str\n        Name of the fileset to delete.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; scan.list_filesets()\n    ['fileset_001']\n    &gt;&gt;&gt; scan.delete_fileset('fileset_001')\n    &gt;&gt;&gt; scan.list_filesets()\n    []\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    fs = self.get_fileset(fileset_id)\n    if fs is None:\n        logging.warning(f\"Could not get the Fileset to delete: '{fileset_id}'!\")\n        return\n    _delete_fileset(fs)\n    self.filesets.remove(fs)\n    self.store()\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.get_fileset","title":"<code>get_fileset(id, create=False)</code>","text":"<p>Get or create a <code>Fileset</code> instance, of given <code>id</code>, in the current scan dataset.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The name of the fileset to get/create. It should exist if <code>create</code> is <code>False</code>.</p> required <code>create</code> <code>bool</code> <p>If <code>False</code> (default), the given <code>id</code> should exist in the local database. Else the given <code>id</code> should NOT exist as they are unique.</p> <code>False</code> <p>Returns:</p> Type Description <code>Fileset</code> <p>The retrieved or created fileset.</p> Notes <p>If the <code>id</code> do not exist in the local database and <code>create</code> is <code>False</code>, <code>None</code> is returned.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; scan.list_filesets()\n['fileset_001']\n&gt;&gt;&gt; new_fileset = scan.get_fileset('007', create=True)\n&gt;&gt;&gt; print(new_fileset)\n&lt;plantdb.fsdb.Fileset object at **************&gt;\n&gt;&gt;&gt; scan.list_filesets()\n['fileset_001', '007']\n&gt;&gt;&gt; unknown_fs = scan.get_fileset('unknown')\n&gt;&gt;&gt; print(unknown_fs)\nNone\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_fileset(self, id, create=False):\n    \"\"\"Get or create a `Fileset` instance, of given `id`, in the current scan dataset.\n\n    Parameters\n    ----------\n    id : str\n        The name of the fileset to get/create.\n        It should exist if `create` is `False`.\n    create : bool, optional\n        If ``False`` (default), the given `id` should exist in the local database.\n        Else the given `id` should NOT exist as they are unique.\n\n    Returns\n    -------\n    Fileset\n        The retrieved or created fileset.\n\n    Notes\n    -----\n    If the `id` do not exist in the local database and `create` is `False`, `None` is returned.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; scan.list_filesets()\n    ['fileset_001']\n    &gt;&gt;&gt; new_fileset = scan.get_fileset('007', create=True)\n    &gt;&gt;&gt; print(new_fileset)\n    &lt;plantdb.fsdb.Fileset object at **************&gt;\n    &gt;&gt;&gt; scan.list_filesets()\n    ['fileset_001', '007']\n    &gt;&gt;&gt; unknown_fs = scan.get_fileset('unknown')\n    &gt;&gt;&gt; print(unknown_fs)\n    None\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    ids = [f.id for f in self.filesets]\n    if id not in ids:\n        if create:\n            return self.create_fileset(id)\n        return None\n    return self.filesets[ids.index(id)]\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.get_filesets","title":"<code>get_filesets(query=None)</code>","text":"<p>Get the list of <code>Fileset</code> instances defined in the current scan dataset, possibly filtered using a <code>query</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>dict</code> <p>Query to use to get a list of filesets.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of plantdb.fsdb.Fileset</code> <p>List of <code>Fileset</code>s, filtered by the <code>query</code> if any.</p> See Also <p>plantdb.fsdb._filter_query</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('myscan_001')\n&gt;&gt;&gt; scan.get_filesets()\n[&lt;plantdb.fsdb.Fileset at *x************&gt;]\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_filesets(self, query=None):\n    \"\"\"Get the list of `Fileset` instances defined in the current scan dataset, possibly filtered using a `query`.\n\n    Parameters\n    ----------\n    query : dict, optional\n        Query to use to get a list of filesets.\n\n    Returns\n    -------\n    list of plantdb.fsdb.Fileset\n        List of `Fileset`s, filtered by the `query` if any.\n\n    See Also\n    --------\n    plantdb.fsdb._filter_query\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('myscan_001')\n    &gt;&gt;&gt; scan.get_filesets()\n    [&lt;plantdb.fsdb.Fileset at *x************&gt;]\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _filter_query(self.filesets, query)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.get_measures","title":"<code>get_measures(key=None)</code>","text":"<p>Get the manual measurements associated to a scan.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A key that should exist in the scan's manual measurements.</p> <code>None</code> <p>Returns:</p> Type Description <code>any</code> <p>If <code>key</code> is <code>None</code>, returns a dictionary. Else, returns the value attached to this key.</p> Notes <p>These manual measurements should be a JSON file named <code>measures.json</code>. It is located at the root folder of the scan dataset.</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_measures(self, key=None):\n    \"\"\"Get the manual measurements associated to a scan.\n\n    Parameters\n    ----------\n    key : str\n        A key that should exist in the scan's manual measurements.\n\n    Returns\n    -------\n    any\n        If `key` is ``None``, returns a dictionary.\n        Else, returns the value attached to this key.\n\n    Notes\n    -----\n    These manual measurements should be a JSON file named `measures.json`.\n    It is located at the root folder of the scan dataset.\n\n    \"\"\"\n    return _get_metadata(self.measures, key)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.get_metadata","title":"<code>get_metadata(key=None, default={})</code>","text":"<p>Get the metadata associated to a scan.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A key that should exist in the scan's metadata.</p> <code>None</code> <code>default</code> <code>Any</code> <p>The default value to return if the key do not exist in the metadata. Default is an empty dictionary<code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>any</code> <p>If <code>key</code> is <code>None</code>, returns a dictionary. Else, returns the value attached to this key.</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def get_metadata(self, key=None, default={}):\n    \"\"\"Get the metadata associated to a scan.\n\n    Parameters\n    ----------\n    key : str\n        A key that should exist in the scan's metadata.\n    default : Any, optional\n        The default value to return if the key do not exist in the metadata.\n        Default is an empty dictionary``{}``.\n\n    Returns\n    -------\n    any\n        If `key` is ``None``, returns a dictionary.\n        Else, returns the value attached to this key.\n\n    \"\"\"\n    return _get_metadata(self.metadata, key, default)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.list_filesets","title":"<code>list_filesets(query=None)</code>","text":"<p>Get the list of filesets in the scan dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; scan.list_filesets()\n['fileset_001']\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def list_filesets(self, query=None) -&gt; list:\n    \"\"\"Get the list of filesets in the scan dataset.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; scan.list_filesets()\n    ['fileset_001']\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return [f.id for f in self.get_filesets(query)]\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.path","title":"<code>path()</code>","text":"<p>Get the path to the local scan dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; scan.path()  # should be '/tmp/romidb_********/myscan_001'\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def path(self) -&gt; pathlib.Path:\n    \"\"\"Get the path to the local scan dataset.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; scan.path()  # should be '/tmp/romidb_********/myscan_001'\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    return _scan_path(self)\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.set_metadata","title":"<code>set_metadata(data, value=None)</code>","text":"<p>Add a new metadata to the scan.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>If a string, a key to address the <code>value</code>. If a dictionary, update the metadata dictionary with <code>data</code> (<code>value</code> is then unused).</p> required <code>value</code> <code>any</code> <p>The value to assign to <code>data</code> if the latest is not a dictionary.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; from plantdb.fsdb import _scan_metadata_path\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; scan.set_metadata(\"test\", \"value\")\n&gt;&gt;&gt; p = _scan_metadata_path(scan)\n&gt;&gt;&gt; print(p.exists())\nTrue\n&gt;&gt;&gt; print(json.load(p.open(mode='r')))\n{'test': 'value'}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def set_metadata(self, data, value=None):\n    \"\"\"Add a new metadata to the scan.\n\n    Parameters\n    ----------\n    data : str or dict\n        If a string, a key to address the `value`.\n        If a dictionary, update the metadata dictionary with `data` (`value` is then unused).\n    value : any, optional\n        The value to assign to `data` if the latest is not a dictionary.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import json\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; from plantdb.fsdb import _scan_metadata_path\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; scan.set_metadata(\"test\", \"value\")\n    &gt;&gt;&gt; p = _scan_metadata_path(scan)\n    &gt;&gt;&gt; print(p.exists())\n    True\n    &gt;&gt;&gt; print(json.load(p.open(mode='r')))\n    {'test': 'value'}\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    if self.metadata == None:\n        self.metadata = {}\n    _set_metadata(self.metadata, data, value)\n    _store_scan_metadata(self)\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.Scan.store","title":"<code>store()</code>","text":"<p>Save changes to the scan main JSON FILE (files.json).</p> Source code in <code>plantdb/fsdb.py</code> <pre><code>def store(self):\n    \"\"\"Save changes to the scan main JSON FILE (files.json).\"\"\"\n    _store_scan(self)\n    logger.debug(f\"The `files.json` file for scan '{self.id}' has been updated!\")\n    return\n</code></pre>"},{"location":"reference/plantdb/fsdb/#plantdb.fsdb.dummy_db","title":"<code>dummy_db(with_scan=False, with_fileset=False, with_file=False)</code>","text":"<p>Create a dummy temporary database.</p> <p>Parameters:</p> Name Type Description Default <code>with_scan</code> <code>bool</code> <p>Add a dummy <code>Scan</code> to the dummy database.</p> <code>False</code> <code>with_fileset</code> <code>bool</code> <p>Add a dummy <code>Fileset</code> to the dummy database.</p> <code>False</code> <code>with_file</code> <code>bool</code> <p>Add a dummy <code>File</code> to the dummy database.</p> <code>False</code> <p>Returns:</p> Type Description <code>FSDB</code> <p>The dummy database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_file=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; print(db.path())  # the database directory\n/tmp/romidb_********\n&gt;&gt;&gt; print(db.list_scans())\n['myscan_001']\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")  # get the existing scan\n&gt;&gt;&gt; print(scan.list_filesets())\n['fileset_001']\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; print(list(fs.list_files()))\n['dummy_image', 'test_image', 'test_json']\n&gt;&gt;&gt; f = fs.get_file(\"test_image\")\n&gt;&gt;&gt; print(f.path())\n/tmp/romidb_********/myscan_001/fileset_001/test_image.png\n</code></pre> Source code in <code>plantdb/fsdb.py</code> <pre><code>def dummy_db(with_scan=False, with_fileset=False, with_file=False):\n    \"\"\"Create a dummy temporary database.\n\n    Parameters\n    ----------\n    with_scan : bool, optional\n        Add a dummy ``Scan`` to the dummy database.\n    with_fileset : bool, optional\n        Add a dummy ``Fileset`` to the dummy database.\n    with_file : bool, optional\n        Add a dummy ``File`` to the dummy database.\n\n    Returns\n    -------\n    plantdb.fsdb.FSDB\n        The dummy database.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_file=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; print(db.path())  # the database directory\n    /tmp/romidb_********\n    &gt;&gt;&gt; print(db.list_scans())\n    ['myscan_001']\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")  # get the existing scan\n    &gt;&gt;&gt; print(scan.list_filesets())\n    ['fileset_001']\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; print(list(fs.list_files()))\n    ['dummy_image', 'test_image', 'test_json']\n    &gt;&gt;&gt; f = fs.get_file(\"test_image\")\n    &gt;&gt;&gt; print(f.path())\n    /tmp/romidb_********/myscan_001/fileset_001/test_image.png\n\n    \"\"\"\n    from tempfile import mkdtemp\n    from plantdb import io\n\n    mydb = Path(mkdtemp(prefix='romidb_'))\n    marker_file = mydb / MARKER_FILE_NAME\n    marker_file.open(mode='w').close()\n    db = FSDB(mydb, required_filesets=None)\n\n    if with_file:\n        # To create a `File`, existing `Scan` &amp; `Fileset` are required\n        with_scan, with_fileset = True, True\n    if with_fileset:\n        # To create a `Fileset`, an existing `Scan` is required\n        with_scan = True\n\n    # Initialize an `FSDB` to add required objects:\n    if with_scan or with_fileset or with_file:\n        db.connect()\n\n    # Create a `Scan` object if required:\n    if with_scan:\n        scan = db.create_scan(\"myscan_001\")\n        scan.set_metadata(\"test\", 1)\n\n    # Create a `Fileset` object if required:\n    if with_fileset:\n        fs = scan.create_fileset(\"fileset_001\")\n        fs.set_metadata(\"test_fileset\", 1)\n\n    # Create a `Fileset` object if required:\n    if with_file:\n        import numpy as np\n        # -- Create a fixed dummy image:\n        f = fs.create_file(\"dummy_image\")\n        img = np.array([[255, 0], [0, 255]]).astype('uint8')\n        io.write_image(f, img, \"png\")\n        f.set_metadata(\"dummy image\", True)\n        # -- Create a random RGB image:\n        f = fs.create_file(\"test_image\")\n        rng = np.random.default_rng()\n        img = np.array(255 * rng.random((50, 50, 3)), dtype='uint8')\n        io.write_image(f, img, \"png\")\n        f.set_metadata(\"random image\", True)\n        # -- Create a dummy JSON\n        f = fs.create_file(\"test_json\")\n        md = {\"Who you gonna call?\": \"Ghostbuster\"}\n        io.write_json(f, md, \"json\")\n        f.set_metadata(\"random json\", True)\n\n    if with_scan or with_fileset or with_file:\n        db.disconnect()\n\n    return db\n</code></pre>"},{"location":"reference/plantdb/io/","title":"io","text":"<p>The <code>io</code> module of the ROMI <code>plantdb</code> library contains all functions for reading and writing data to database.</p> <p>Hereafter we detail the formats and their associated Python types and meanings.</p> File formats <p>json</p> <p>Dictionaries or lists, read and written using <code>json</code>.</p> <ul> <li>Python objects: <code>dict</code>, <code>list</code></li> <li>File extensions: 'json'</li> </ul> <p>toml</p> <p>Dictionaries or lists, read and written using <code>toml</code>.</p> <ul> <li>Python objects: <code>dict</code>, <code>list</code></li> <li>File extensions: 'toml'</li> </ul> <p>2D image</p> <p>RGB or RGBA image data, read and written using <code>imageio</code>.</p> <ul> <li>Python objects: <code>numpy.ndarray</code></li> <li>File extensions: 'jpg', 'png'</li> </ul> <p>3D volume</p> <p>Grayscale or binary volume image data, read and written using <code>imageio</code>.</p> <ul> <li>Python objects: <code>numpy.ndarray</code></li> <li>File extensions: 'tiff'</li> </ul> <p>Labelled 3D volume</p> <p>Labelled volume image data, converted to dictionary of 3D (binary) numpy arrays, read and written using <code>numpy</code>.</p> <ul> <li>Python objects: <code>dict</code> of 3D <code>numpy.ndarray</code></li> <li>File extensions: 'npz'</li> </ul> <p>Point cloud</p> <p>Point clouds, read and written using <code>open3d</code>.</p> <ul> <li>Python object: <code>open3d.geometry.PointCloud</code></li> <li>File extensions: 'ply'</li> </ul> <p>Triangle mesh</p> <p>Triangular meshes, read and written using <code>open3d</code>.</p> <ul> <li>Python object: <code>open3d.geometry.TriangleMesh</code></li> <li>File extensions: 'ply'</li> </ul> <p>Voxel grid</p> <p>Voxel grids, read and written using <code>open3d</code>.</p> <ul> <li>Python object: <code>open3d.geometry.VoxelGrid</code></li> <li>File extensions: 'ply'</li> </ul> <p>Tree graph</p> <p>Tree graphs, read and written using <code>networkx</code>.</p> <ul> <li>Python object: <code>networkx.Graph</code></li> <li>File extensions: 'p'</li> </ul> <p>Pytorch tensor</p> <p>Trained tensor, read and written using <code>torch</code>.</p> <ul> <li>Python object: <code>torch.tensor</code></li> <li>File extensions: 'pt'</li> </ul>"},{"location":"reference/plantdb/io/#plantdb.io.read_graph","title":"<code>read_graph(file, **kwargs)</code>","text":"<p>Reads a networkx <code>Graph</code> from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"p\".</p> required <p>Returns:</p> Type Description <code>Graph</code> <p>The loaded (tree) graph object.</p> Example <p>import networkx as nx from plantdb.io import read_graph, write_graph from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_nx_graph\") g = nx.path_graph(4) print(g) Graph with 4 nodes and 3 edges write_graph(f, g) f = fs.get_file(\"test_nx_graph\") g2 = read_graph(f) print(g2) Graph with 4 nodes and 3 edges</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_graph(file, **kwargs):\n    \"\"\"Reads a networkx ``Graph`` from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n    ext : str, optional\n        File extension, defaults to \"p\".\n\n    Returns\n    -------\n    networkx.Graph\n        The loaded (tree) graph object.\n\n    Example\n    -------\n    &gt;&gt;&gt; import networkx as nx\n    &gt;&gt;&gt; from plantdb.io import read_graph, write_graph\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_nx_graph\")\n    &gt;&gt;&gt; g = nx.path_graph(4)\n    &gt;&gt;&gt; print(g)\n    Graph with 4 nodes and 3 edges\n    &gt;&gt;&gt; write_graph(f, g)\n    &gt;&gt;&gt; f = fs.get_file(\"test_nx_graph\")\n    &gt;&gt;&gt; g2 = read_graph(f)\n    &gt;&gt;&gt; print(g2)\n    Graph with 4 nodes and 3 edges\n    \"\"\"\n    import pickle\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    # Load the pickled file:\n    with open(file, mode='rb') as f:\n        G = pickle.load(f, **kwargs)\n    return G\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_image","title":"<code>read_image(file, **kwargs)</code>","text":"<p>Reads a 2D image from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The image as an RGB(A) array.</p> Example <p>import numpy as np from plantdb.io import read_image, write_image from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_image\") rng = np.random.default_rng() img = np.array(rng.random((5, 5, 3))*255, dtype='uint8')  # an 8bit 5x5 RGB image write_image(f, img) f = fs.get_file(\"test_image\") img2 = read_image(f) np.testing.assert_array_equal(img, img2)  # raise an exception if not equal!</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_image(file, **kwargs):\n    \"\"\"Reads a 2D image from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    numpy.ndarray\n        The image as an RGB(A) array.\n\n    Example\n    -------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import read_image, write_image\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_image\")\n    &gt;&gt;&gt; rng = np.random.default_rng()\n    &gt;&gt;&gt; img = np.array(rng.random((5, 5, 3))*255, dtype='uint8')  # an 8bit 5x5 RGB image\n    &gt;&gt;&gt; write_image(f, img)\n    &gt;&gt;&gt; f = fs.get_file(\"test_image\")\n    &gt;&gt;&gt; img2 = read_image(f)\n    &gt;&gt;&gt; np.testing.assert_array_equal(img, img2)  # raise an exception if not equal!\n\n    \"\"\"\n    import imageio.v3 as iio\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return iio.imread(file, **kwargs)\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_json","title":"<code>read_json(file, **kwargs)</code>","text":"<p>Reads a JSON from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The deserialized JSON file.</p> Example <p>from plantdb.io import read_json, write_json from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_json\") data = {\"test\": False, 'ROMI': 'RObotics for MIcrofarms'} write_json(f, data) f = fs.get_file(\"test_json\") read_json(f)</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_json(file, **kwargs):\n    \"\"\"Reads a JSON from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    dict\n        The deserialized JSON file.\n\n    Example\n    -------\n    &gt;&gt;&gt; from plantdb.io import read_json, write_json\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_json\")\n    &gt;&gt;&gt; data = {\"test\": False, 'ROMI': 'RObotics for MIcrofarms'}\n    &gt;&gt;&gt; write_json(f, data)\n    &gt;&gt;&gt; f = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; read_json(f)\n    {'test': False, 'ROMI': 'RObotics for MIcrofarms'}\n\n    \"\"\"\n    import json\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    # Load the file:\n    with open(file, mode='r') as f:\n        data = json.loads(f.read(), **kwargs)\n    return data\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_npz","title":"<code>read_npz(file, **kwargs)</code>","text":"<p>Reads a dictionary of arrays from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>dict of numpy.ndarray</code> <p>The dictionary of numpy arrays.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from plantdb.io import read_npz, write_npz\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.create_file('test_npz')\n&gt;&gt;&gt; rng = np.random.default_rng()\n&gt;&gt;&gt; npz = {f\"{i}\": rng.random((10, 10, 3)) for i in range(5)}\n&gt;&gt;&gt; write_npz(f, npz)\n&gt;&gt;&gt; f = fs.get_file(\"test_npz\")\n&gt;&gt;&gt; npz2 = read_npz(f)\n&gt;&gt;&gt; np.testing.assert_array_equal(npz[\"0\"], npz2[\"0\"])  # raise an exception if not equal!\n</code></pre> Source code in <code>plantdb/io.py</code> <pre><code>def read_npz(file, **kwargs):\n    \"\"\"Reads a dictionary of arrays from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    dict of numpy.ndarray\n        The dictionary of numpy arrays.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import read_npz, write_npz\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file('test_npz')\n    &gt;&gt;&gt; rng = np.random.default_rng()\n    &gt;&gt;&gt; npz = {f\"{i}\": rng.random((10, 10, 3)) for i in range(5)}\n    &gt;&gt;&gt; write_npz(f, npz)\n    &gt;&gt;&gt; f = fs.get_file(\"test_npz\")\n    &gt;&gt;&gt; npz2 = read_npz(f)\n    &gt;&gt;&gt; np.testing.assert_array_equal(npz[\"0\"], npz2[\"0\"])  # raise an exception if not equal!\n\n    \"\"\"\n    import numpy as np\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return dict(np.load(file, **kwargs))\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_point_cloud","title":"<code>read_point_cloud(file, **kwargs)</code>","text":"<p>Reads a point cloud from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>PointCloud</code> <p>The loaded point cloud object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import open3d as o3d\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from plantdb.io import read_point_cloud, write_point_cloud\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.create_file('test_npz')\n&gt;&gt;&gt; pcd = o3d.geometry.PointCloud()\n&gt;&gt;&gt; pcd.points = o3d.utility.Vector3dVector(np.array([[1, 2, 3]]))\n&gt;&gt;&gt; write_point_cloud(f,pcd)\n&gt;&gt;&gt; f = fs.get_file('test_npz')\n&gt;&gt;&gt; pcd = read_point_cloud(f)\n&gt;&gt;&gt; print(type(pcd))\n&lt;class 'open3d.cuda.pybind.geometry.PointCloud'&gt;\n&gt;&gt;&gt; print(np.asarray(pcd.points))\n[[1. 2. 3.]]\n</code></pre> Source code in <code>plantdb/io.py</code> <pre><code>def read_point_cloud(file, **kwargs):\n    \"\"\"Reads a point cloud from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    open3d.geometry.PointCloud\n        The loaded point cloud object.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import open3d as o3d\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import read_point_cloud, write_point_cloud\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file('test_npz')\n    &gt;&gt;&gt; pcd = o3d.geometry.PointCloud()\n    &gt;&gt;&gt; pcd.points = o3d.utility.Vector3dVector(np.array([[1, 2, 3]]))\n    &gt;&gt;&gt; write_point_cloud(f,pcd)\n    &gt;&gt;&gt; f = fs.get_file('test_npz')\n    &gt;&gt;&gt; pcd = read_point_cloud(f)\n    &gt;&gt;&gt; print(type(pcd))\n    &lt;class 'open3d.cuda.pybind.geometry.PointCloud'&gt;\n    &gt;&gt;&gt; print(np.asarray(pcd.points))\n    [[1. 2. 3.]]\n\n    \"\"\"\n    from open3d import io\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return io.read_point_cloud(str(file), **kwargs)\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_toml","title":"<code>read_toml(file, **kwargs)</code>","text":"<p>Reads a TOML from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The deserialized TOML file.</p> Example <p>from plantdb.io import read_toml, write_toml from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_json\") data = {\"test\": True, 'ROMI': 'RObotics for MIcrofarms'} write_toml(f, data) f = fs.get_file(\"test_json\") read_toml(f)</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_toml(file, **kwargs):\n    \"\"\"Reads a TOML from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    dict\n        The deserialized TOML file.\n\n    Example\n    -------\n    &gt;&gt;&gt; from plantdb.io import read_toml, write_toml\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_json\")\n    &gt;&gt;&gt; data = {\"test\": True, 'ROMI': 'RObotics for MIcrofarms'}\n    &gt;&gt;&gt; write_toml(f, data)\n    &gt;&gt;&gt; f = fs.get_file(\"test_json\")\n    &gt;&gt;&gt; read_toml(f)\n    {'test': True}\n\n    \"\"\"\n    import toml\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    # Load the file:\n    with open(file, mode='r') as f:\n        data = toml.loads(f.read(), **kwargs)\n    return data\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_torch","title":"<code>read_torch(file, ext='pt', **kwargs)</code>","text":"<p>Reads a torch tensor from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"pt\".</p> <code>'pt'</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>The loaded tensor object.</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_torch(file, ext=\"pt\", **kwargs):\n    \"\"\"Reads a torch tensor from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n    ext : str, optional\n        File extension, defaults to \"pt\".\n\n    Returns\n    -------\n    Torch.Tensor\n        The loaded tensor object.\n    \"\"\"\n    import torch\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return torch.load(file, **kwargs)\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_triangle_mesh","title":"<code>read_triangle_mesh(file, **kwargs)</code>","text":"<p>Reads a triangular mesh from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>TriangleMesh</code> <p>The loaded triangular mesh object.</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_triangle_mesh(file, **kwargs):\n    \"\"\"Reads a triangular mesh from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    open3d.geometry.TriangleMesh\n        The loaded triangular mesh object.\n    \"\"\"\n    from open3d import io\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return io.read_triangle_mesh(str(file), **kwargs)\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_volume","title":"<code>read_volume(file, ext='tiff', **kwargs)</code>","text":"<p>Reads a volume image from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"tiff\".</p> <code>'tiff'</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>The volume as a 3D array.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from plantdb.io import read_volume, write_volume\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.create_file('test_volume')\n&gt;&gt;&gt; rng = np.random.default_rng()\n&gt;&gt;&gt; vol = rng.random((50, 10, 10))\n&gt;&gt;&gt; write_volume(f, vol)\n&gt;&gt;&gt; f = fs.get_file(\"test_volume\")\n&gt;&gt;&gt; vol2 = read_volume(f)\n&gt;&gt;&gt; np.testing.assert_array_equal(vol, vol2)  # raise an exception if not equal!\n</code></pre> Source code in <code>plantdb/io.py</code> <pre><code>def read_volume(file, ext=\"tiff\", **kwargs):\n    \"\"\"Reads a volume image from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n    ext : str, optional\n        File extension, defaults to \"tiff\".\n\n    Returns\n    -------\n    numpy.ndarray\n        The volume as a 3D array.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import read_volume, write_volume\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file('test_volume')\n    &gt;&gt;&gt; rng = np.random.default_rng()\n    &gt;&gt;&gt; vol = rng.random((50, 10, 10))\n    &gt;&gt;&gt; write_volume(f, vol)\n    &gt;&gt;&gt; f = fs.get_file(\"test_volume\")\n    &gt;&gt;&gt; vol2 = read_volume(f)\n    &gt;&gt;&gt; np.testing.assert_array_equal(vol, vol2)  # raise an exception if not equal!\n\n    \"\"\"\n    import imageio.v3 as iio\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return iio.imread(file, **kwargs)\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.read_voxel_grid","title":"<code>read_voxel_grid(file, **kwargs)</code>","text":"<p>Reads a voxel grid from a ROMI database file or a path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>A <code>File</code> instance or file path, to read from.</p> required <p>Returns:</p> Type Description <code>VoxelGrid</code> <p>The loaded point cloud object.</p> Source code in <code>plantdb/io.py</code> <pre><code>def read_voxel_grid(file, **kwargs):\n    \"\"\"Reads a voxel grid from a ROMI database file or a path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        A ``File`` instance or file path, to read from.\n\n    Returns\n    -------\n    open3d.geometry.VoxelGrid\n        The loaded point cloud object.\n    \"\"\"\n    from open3d import io\n    # Get path to file if in a database:\n    if isinstance(file, plantdb.fsdb.File):\n        file = file.path()\n    return io.read_voxel_grid(str(file), **kwargs)\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_graph","title":"<code>write_graph(file, data, ext='p', **kwargs)</code>","text":"<p>Writes a networkx <code>Graph</code> to a ROMI database file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>Graph</code> <p>The (tree) graph object to save.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"p\".</p> <code>'p'</code> Example <p>import networkx as nx from plantdb.io import write_graph from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_nx_graph\") g = nx.path_graph(4) write_graph(f, g)</p> Source code in <code>plantdb/io.py</code> <pre><code>def write_graph(file, data, ext=\"p\", **kwargs):\n    \"\"\"Writes a networkx ``Graph`` to a ROMI database file.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : networkx.Graph\n        The (tree) graph object to save.\n    ext : str, optional\n        File extension, defaults to \"p\".\n\n    Example\n    -------\n    &gt;&gt;&gt; import networkx as nx\n    &gt;&gt;&gt; from plantdb.io import write_graph\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_nx_graph\")\n    &gt;&gt;&gt; g = nx.path_graph(4)\n    &gt;&gt;&gt; write_graph(f, g)\n\n    \"\"\"\n    _writer(file, data, ext, _write_graph, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_image","title":"<code>write_image(file, data, ext='png', **kwargs)</code>","text":"<p>Writes a 2D image to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>array like</code> <p>The 2D image (RGB array) to save.</p> required <code>ext</code> <code>(png, jpeg, tiff)</code> <p>File extension, defaults to \"png\".</p> <code>'png'</code> Example <p>import numpy as np from plantdb.io import write_image from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_image\") rng = np.random.default_rng() img = np.array(rng.random((5, 5, 3))*255, dtype='uint8')  # an 8bit 5x5 RGB image write_image(f, img)</p> Source code in <code>plantdb/io.py</code> <pre><code>def write_image(file, data, ext=\"png\", **kwargs):\n    \"\"\"Writes a 2D image to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : array like\n        The 2D image (RGB array) to save.\n    ext : {'png', 'jpeg', 'tiff'}, optional\n        File extension, defaults to \"png\".\n\n    Example\n    -------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import write_image\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_image\")\n    &gt;&gt;&gt; rng = np.random.default_rng()\n    &gt;&gt;&gt; img = np.array(rng.random((5, 5, 3))*255, dtype='uint8')  # an 8bit 5x5 RGB image\n    &gt;&gt;&gt; write_image(f, img)\n\n    \"\"\"\n    _writer(file, data, ext, _write_image, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_json","title":"<code>write_json(file, data, ext='json', **kwargs)</code>","text":"<p>Writes a JSON to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>dict</code> <p>The dictionary to save as a JSON file.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"json\".</p> <code>'json'</code> Example <p>from plantdb.io import write_json from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_json\") data = {\"test\": False, 'ROMI': 'RObotics for MIcrofarms'} write_json(f, data)</p> Source code in <code>plantdb/io.py</code> <pre><code>def write_json(file, data, ext=\"json\", **kwargs):\n    \"\"\"Writes a JSON to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : dict\n        The dictionary to save as a JSON file.\n    ext : str, optional\n        File extension, defaults to \"json\".\n\n    Example\n    -------\n    &gt;&gt;&gt; from plantdb.io import write_json\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_json\")\n    &gt;&gt;&gt; data = {\"test\": False, 'ROMI': 'RObotics for MIcrofarms'}\n    &gt;&gt;&gt; write_json(f, data)\n\n    \"\"\"\n    _writer(file, data, ext, _write_json, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_npz","title":"<code>write_npz(file, data, **kwargs)</code>","text":"<p>Writes a dictionary of arrays to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>dbfile</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>dict of numpy.ndarray</code> <p>A dictionary of arrays to save as a single compressed '.npz' file.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from plantdb.io import read_npz, write_npz\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.create_file('test_npz')\n&gt;&gt;&gt; rng = np.random.default_rng()\n&gt;&gt;&gt; npz = {f\"{i}\": rng.random((10, 10, 3)) for i in range(5)}\n&gt;&gt;&gt; write_npz(f, npz)\n</code></pre> Source code in <code>plantdb/io.py</code> <pre><code>def write_npz(file, data, **kwargs):\n    \"\"\"Writes a dictionary of arrays to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    dbfile : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : dict of numpy.ndarray\n        A dictionary of arrays to save as a single compressed '.npz' file.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import read_npz, write_npz\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file('test_npz')\n    &gt;&gt;&gt; rng = np.random.default_rng()\n    &gt;&gt;&gt; npz = {f\"{i}\": rng.random((10, 10, 3)) for i in range(5)}\n    &gt;&gt;&gt; write_npz(f, npz)\n    \"\"\"\n    _writer(file, data, 'npz', _write_npz, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_point_cloud","title":"<code>write_point_cloud(file, data, ext='ply', **kwargs)</code>","text":"<p>Writes a point cloud to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>PointCloud</code> <p>The point cloud object to save.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"ply\".</p> <code>'ply'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import open3d as o3d\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from plantdb.io import write_point_cloud\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; f = fs.create_file('test_npz')\n&gt;&gt;&gt; pcd = o3d.geometry.PointCloud()\n&gt;&gt;&gt; pcd.points = o3d.utility.Vector3dVector(np.array([[1, 2, 3]]))\n&gt;&gt;&gt; write_point_cloud(f,pcd)\n</code></pre> Source code in <code>plantdb/io.py</code> <pre><code>def write_point_cloud(file, data, ext=\"ply\", **kwargs):\n    \"\"\"Writes a point cloud to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : open3d.geometry.PointCloud\n        The point cloud object to save.\n    ext : str, optional\n        File extension, defaults to \"ply\".\n\n    Examples\n    --------\n    &gt;&gt;&gt; import open3d as o3d\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.io import write_point_cloud\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file('test_npz')\n    &gt;&gt;&gt; pcd = o3d.geometry.PointCloud()\n    &gt;&gt;&gt; pcd.points = o3d.utility.Vector3dVector(np.array([[1, 2, 3]]))\n    &gt;&gt;&gt; write_point_cloud(f,pcd)\n\n    \"\"\"\n    _writer(file, data, ext, _write_point_cloud, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_toml","title":"<code>write_toml(file, data, ext='toml', **kwargs)</code>","text":"<p>Writes a TOML to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>dict</code> <p>The dictionary to save as a TOML file.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"toml\".</p> <code>'toml'</code> Example <p>from plantdb.io import write_toml from plantdb.fsdb import dummy_db db = dummy_db(with_fileset=True) db.connect() scan = db.get_scan(\"myscan_001\") fs = scan.get_fileset(\"fileset_001\") f = fs.create_file(\"test_json\") data = {\"test\": True, 'ROMI': 'RObotics for MIcrofarms'} write_toml(f, data)</p> Source code in <code>plantdb/io.py</code> <pre><code>def write_toml(file, data, ext=\"toml\", **kwargs):\n    \"\"\"Writes a TOML to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : dict\n        The dictionary to save as a TOML file.\n    ext : str, optional\n        File extension, defaults to \"toml\".\n\n    Example\n    -------\n    &gt;&gt;&gt; from plantdb.io import write_toml\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; f = fs.create_file(\"test_json\")\n    &gt;&gt;&gt; data = {\"test\": True, 'ROMI': 'RObotics for MIcrofarms'}\n    &gt;&gt;&gt; write_toml(f, data)\n\n    \"\"\"\n    _writer(file, data, ext, _write_toml, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_torch","title":"<code>write_torch(file, data, ext='pt', **kwargs)</code>","text":"<p>Writes a torch tensor to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>TorchTensor</code> <p>The torch tensor object to save.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"pt\".</p> <code>'pt'</code> Source code in <code>plantdb/io.py</code> <pre><code>def write_torch(file, data, ext=\"pt\", **kwargs):\n    \"\"\"Writes a torch tensor to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : TorchTensor\n        The torch tensor object to save.\n    ext : str, optional\n        File extension, defaults to \"pt\".\n    \"\"\"\n    _writer(file, data, ext, _write_torch, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_triangle_mesh","title":"<code>write_triangle_mesh(file, data, ext='ply', **kwargs)</code>","text":"<p>Writes a triangular mesh to a ROMI database file or to a given path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File or Path or str</code> <p>If a <code>File</code> instance, the file will be saved to the associated database/scan/fileset. Else, write the <code>data</code> to the given file path, ignoring the extension parameter <code>ext</code>.</p> required <code>data</code> <code>TriangleMesh</code> <p>The triangular mesh object to save.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"ply\".</p> <code>'ply'</code> Source code in <code>plantdb/io.py</code> <pre><code>def write_triangle_mesh(file, data, ext=\"ply\", **kwargs):\n    \"\"\"Writes a triangular mesh to a ROMI database file or to a given path.\n\n    Parameters\n    ----------\n    file : plantdb.db.File or pathlib.Path or str\n        If a ``File`` instance, the file will be saved to the associated database/scan/fileset.\n        Else, write the `data` to the given file path, ignoring the extension parameter `ext`.\n    data : open3d.geometry.TriangleMesh\n        The triangular mesh object to save.\n    ext : str, optional\n        File extension, defaults to \"ply\".\n    \"\"\"\n    _writer(file, data, ext, _write_triangle_mesh, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_volume","title":"<code>write_volume(file, data, ext='tiff', **kwargs)</code>","text":"<p>Writes a volume image to a ROMI database file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File</code> <p>The <code>File</code> object used to write the associated file.</p> required <code>data</code> <code>array like</code> <p>The 3D array to save as volume image.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"tiff\".</p> <code>'tiff'</code> <p>Other Parameters:</p> Name Type Description <code>compress</code> <code>bool</code> <p>Indicate if the volume file should be compressed. Defaults to <code>True</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; from plantdb.io import write_volume\n&gt;&gt;&gt; from plantdb.fsdb import Scan, Fileset, File\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n&gt;&gt;&gt; vol = np.ones((50, 10, 10))  # stupid volume file with only `1` values\n&gt;&gt;&gt; f_lzw = fs.create_file('test_volume_compress')\n&gt;&gt;&gt; write_volume(f_lzw, vol)\n&gt;&gt;&gt; f = fs.create_file('test_volume')\n&gt;&gt;&gt; write_volume(f, vol, compress=False)\n&gt;&gt;&gt; print(f_lzw.path().stat().st_size)\n15283\n&gt;&gt;&gt; print(f.path().stat().st_size)\n48994\n</code></pre> Source code in <code>plantdb/io.py</code> <pre><code>def write_volume(file, data, ext=\"tiff\", **kwargs):\n    \"\"\"Writes a volume image to a ROMI database file.\n\n    Parameters\n    ----------\n    file : plantdb.db.File\n        The `File` object used to write the associated file.\n    data : array like\n        The 3D array to save as volume image.\n    ext : str, optional\n        File extension, defaults to \"tiff\".\n\n    Other Parameters\n    ----------------\n    compress : bool, optional\n        Indicate if the volume file should be compressed.\n        Defaults to ``True``.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; from plantdb.fsdb import FSDB\n    &gt;&gt;&gt; from plantdb.io import write_volume\n    &gt;&gt;&gt; from plantdb.fsdb import Scan, Fileset, File\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; fs = scan.get_fileset(\"fileset_001\")\n    &gt;&gt;&gt; vol = np.ones((50, 10, 10))  # stupid volume file with only `1` values\n    &gt;&gt;&gt; f_lzw = fs.create_file('test_volume_compress')\n    &gt;&gt;&gt; write_volume(f_lzw, vol)\n    &gt;&gt;&gt; f = fs.create_file('test_volume')\n    &gt;&gt;&gt; write_volume(f, vol, compress=False)\n    &gt;&gt;&gt; print(f_lzw.path().stat().st_size)\n    15283\n    &gt;&gt;&gt; print(f.path().stat().st_size)\n    48994\n\n    \"\"\"\n    _writer(file, data, ext, _write_volume, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/io/#plantdb.io.write_voxel_grid","title":"<code>write_voxel_grid(file, data, ext='ply', **kwargs)</code>","text":"<p>Writes a voxel grid to a ROMI database file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File</code> <p>The <code>File</code> object used to write the associated file.</p> required <code>data</code> <code>VoxelGrid</code> <p>The voxel grid object to save.</p> required <code>ext</code> <code>str</code> <p>File extension, defaults to \"ply\".</p> <code>'ply'</code> See Also <p>plantdb.io._write_voxel_grid open3d.cuda.pybind.io.write_voxel_grid</p> Source code in <code>plantdb/io.py</code> <pre><code>def write_voxel_grid(file, data, ext=\"ply\", **kwargs):\n    \"\"\"Writes a voxel grid to a ROMI database file.\n\n    Parameters\n    ----------\n    file : plantdb.db.File\n        The `File` object used to write the associated file.\n    data : open3d.geometry.VoxelGrid\n        The voxel grid object to save.\n    ext : str, optional\n        File extension, defaults to \"ply\".\n\n    See Also\n    --------\n    plantdb.io._write_voxel_grid\n    open3d.cuda.pybind.io.write_voxel_grid\n    \"\"\"\n    _writer(file, data, ext, _write_voxel_grid, **kwargs)\n    return\n</code></pre>"},{"location":"reference/plantdb/log/","title":"log","text":""},{"location":"reference/plantdb/log/#plantdb.log.configure_logger","title":"<code>configure_logger(name, log_path='', log_level='INFO')</code>","text":"<p>Return a configured logger.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>log_path</code> <code>str</code> <p>A file path to save the log. Defaults to <code>''</code>.</p> <code>''</code> <code>log_level</code> <code>(CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET)</code> <p>A valid logging level. Defaults to <code>'INFO'</code>.</p> <code>'CRITICAL'</code> Source code in <code>plantdb/log.py</code> <pre><code>def configure_logger(name, log_path=\"\", log_level='INFO'):\n    \"\"\"Return a configured logger.\n\n    Parameters\n    ----------\n    name : str\n        The name of the logger.\n    log_path : str\n        A file path to save the log.\n        Defaults to `''`.\n    log_level : {'CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG', 'NOTSET'}\n        A valid logging level.\n        Defaults to `'INFO'`.\n    \"\"\"\n    colored_formatter = ColoredFormatter(\n        \"%(log_color)s%(levelname)-8s%(reset)s %(bg_blue)s[%(name)s]%(reset)s %(message)s\",\n        datefmt=None,\n        reset=True,\n        style='%',\n    )\n    simple_formatter = logging.Formatter(\"%(asctime)s - %(levelname)s - %(name)s - %(lineno)d: %(message)s\")\n\n    # create console handler:\n    console = logging.StreamHandler()\n    console.setFormatter(colored_formatter)\n\n    logger = logging.getLogger(name)\n    logger.addHandler(console)\n    logger.setLevel(getattr(logging, log_level))\n\n    if log_path is not None and log_path != \"\":\n        # create file handler:\n        fh = logging.FileHandler(Path(log_path) / f'{name}.log', mode='w')\n        fh.setFormatter(simple_formatter)\n        logger.addHandler(fh)\n\n    return logger\n</code></pre>"},{"location":"reference/plantdb/log/#plantdb.log.get_logging_config","title":"<code>get_logging_config(name='root', log_level='INFO')</code>","text":"<p>Return the logging configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger. Defaults to <code>'root'</code>.</p> <code>'root'</code> <code>log_level</code> <code>(CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET)</code> <p>A valid logging level. Defaults to <code>'INFO'</code>.</p> <code>'CRITICAL'</code> Source code in <code>plantdb/log.py</code> <pre><code>def get_logging_config(name='root', log_level='INFO'):\n    \"\"\"Return the logging configuration.\n\n    Parameters\n    ----------\n    name : str\n        The name of the logger.\n        Defaults to `'root'`.\n    log_level : {'CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG', 'NOTSET'}\n        A valid logging level.\n        Defaults to `'INFO'`.\n    \"\"\"\n    return LOGGING_CFG.format(name, log_level)\n</code></pre>"},{"location":"reference/plantdb/rest_api/","title":"rest_api","text":"<p>This module regroup the classes and methods used to serve a REST API using <code>fsdb_rest_api</code> CLI.</p>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Archive","title":"<code>Archive(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve an archive of the dataset upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Archive.get","title":"<code>get(scan_id)</code>","text":"<p>Send the requested scan dataset archive.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The scan id.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response from the flask server.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, scan_id):\n    \"\"\"Send the requested scan dataset archive.\n\n    Parameters\n    ----------\n    scan_id : str\n        The scan id.\n\n    Returns\n    -------\n    flask.Response\n        The HTTP response from the flask server.\n    \"\"\"\n    scan = self.db.get_scan(scan_id)\n    tmp_dir = Path(gettempdir())\n    zpath = tmp_dir / f'{scan_id}.zip'\n    with ZipFile(zpath, 'w') as zf:\n        path = str(scan.path())\n        for root, _dirs, files in os.walk(path):\n            for file in files:\n                zf.write(\n                    os.path.join(root, file),\n                    os.path.relpath(os.path.join(root, file), os.path.join(path, '..'))\n                )\n    return send_file(zpath, mimetype='application/zip')\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.File","title":"<code>File(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve a file upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.File.get","title":"<code>get(path)</code>","text":"<p>Returns a requested file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The relative path to the file to serve. The global variable <code>db_location</code> is used to set the absolute path.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response from the flask server.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, path):\n    \"\"\"Returns a requested file.\n\n    Parameters\n    ----------\n    path : str\n        The relative path to the file to serve.\n        The global variable `db_location` is used to set the absolute path.\n\n    Returns\n    -------\n    flask.Response\n        The HTTP response from the flask server.\n    \"\"\"\n    return send_from_directory(self.db.path(), path)\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Image","title":"<code>Image(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve an image upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Image.get","title":"<code>get(scan_id, fileset_id, file_id)</code>","text":"<p>Send the requested (cached) image, may resize it if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The scan id.</p> required <code>fileset_id</code> <code>str</code> <p>The fileset id.</p> required <code>file_id</code> <code>str</code> <p>The file id.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response from the flask server.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, scan_id, fileset_id, file_id):\n    \"\"\"Send the requested (cached) image, may resize it if necessary.\n\n    Parameters\n    ----------\n    scan_id : str\n        The scan id.\n    fileset_id : str\n        The fileset id.\n    file_id : str\n        The file id.\n\n    Returns\n    -------\n    flask.Response\n        The HTTP response from the flask server.\n    \"\"\"\n    size = request.args.get('size', default='thumb', type=str)\n    # Get the path to the image resource:\n    path = webcache.image_path(self.db, scan_id, fileset_id, file_id, size)\n    return send_file(path, mimetype='image/jpeg')\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Mesh","title":"<code>Mesh(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve a triangular mesh upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Mesh.get","title":"<code>get(scan_id, fileset_id, file_id)</code>","text":"<p>Send the requested (cached) triangular mesh, may down-sample it if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The scan id.</p> required <code>fileset_id</code> <code>str</code> <p>The fileset id.</p> required <code>file_id</code> <code>str</code> <p>The file id.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response from the flask server.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, scan_id, fileset_id, file_id):\n    \"\"\"Send the requested (cached) triangular mesh, may down-sample it if necessary.\n\n    Parameters\n    ----------\n    scan_id : str\n        The scan id.\n    fileset_id : str\n        The fileset id.\n    file_id : str\n        The file id.\n\n    Returns\n    -------\n    flask.Response\n        The HTTP response from the flask server.\n    \"\"\"\n    size = request.args.get('size', default='orig', type=str)\n    # Make sure that the 'size' argument we got is a valid option:\n    if not size in ['orig']:\n        size = 'orig'\n    # Get the path to the mesh resource:\n    path = webcache.mesh_path(self.db, scan_id, fileset_id, file_id, size)\n    return send_file(path, mimetype='application/octet-stream')\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.PointCloud","title":"<code>PointCloud(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve a point-cloud upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.PointCloud.get","title":"<code>get(scan_id, fileset_id, file_id)</code>","text":"<p>Send the requested (cached) point-cloud, may down-sample it if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The scan id.</p> required <code>fileset_id</code> <code>str</code> <p>The fileset id.</p> required <code>file_id</code> <code>str</code> <p>The file id.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response from the flask server.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, scan_id, fileset_id, file_id):\n    \"\"\"Send the requested (cached) point-cloud, may down-sample it if necessary.\n\n    Parameters\n    ----------\n    scan_id : str\n        The scan id.\n    fileset_id : str\n        The fileset id.\n    file_id : str\n        The file id.\n\n    Returns\n    -------\n    flask.Response\n        The HTTP response from the flask server.\n    \"\"\"\n    size = request.args.get('size', default='preview', type=str)\n    # Try to convert the 'size' argument as a float:\n    try:\n        vxs = float(size)\n    except ValueError:\n        pass\n    else:\n        size = vxs\n    # If a string, make sure that the 'size' argument we got is a valid option:\n    if isinstance(size, str) and size not in ['orig', 'preview']:\n        size = 'preview'\n    # Get the path to the pointcloud resource:\n    path = webcache.pointcloud_path(self.db, scan_id, fileset_id, file_id, size)\n    return send_file(path, mimetype='application/octet-stream')\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.PointCloudGroundTruth","title":"<code>PointCloudGroundTruth(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve a ground-truth point-cloud upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.PointCloudGroundTruth.get","title":"<code>get(scan_id, fileset_id, file_id)</code>","text":"<p>Send the requested (cached) ground-truth point-cloud, may down-sample it if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The scan id.</p> required <code>fileset_id</code> <code>str</code> <p>The fileset id.</p> required <code>file_id</code> <code>str</code> <p>The file id.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response from the flask server.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, scan_id, fileset_id, file_id):\n    \"\"\"Send the requested (cached) ground-truth point-cloud, may down-sample it if necessary.\n\n    Parameters\n    ----------\n    scan_id : str\n        The scan id.\n    fileset_id : str\n        The fileset id.\n    file_id : str\n        The file id.\n\n    Returns\n    -------\n    flask.Response\n        The HTTP response from the flask server.\n    \"\"\"\n    size = request.args.get('size', default='preview', type=str)\n    # Try to convert the 'size' argument as a float:\n    try:\n        vxs = float(size)\n    except ValueError:\n        pass\n    else:\n        size = vxs\n    # If a string, make sure that the 'size' argument we got is a valid option:\n    if isinstance(size, str) and size not in ['orig', 'preview']:\n        size = 'preview'\n    # Get the path to the pointcloud resource:\n    path = webcache.pointcloud_path(self.db, scan_id, fileset_id, file_id, size)\n    return send_file(path, mimetype='application/octet-stream')\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Refresh","title":"<code>Refresh(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to reload the database upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Refresh.get","title":"<code>get()</code>","text":"<p>Force the plant database to reload.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self):\n    \"\"\"Force the plant database to reload.\"\"\"\n    self.db.reload()\n    return 200\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Scan","title":"<code>Scan(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve a scan dataset upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.Scan.get","title":"<code>get(scan_id)</code>","text":"<p>Returns the scan dataset information.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The name of the scan for which to serve the information.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The dictionary to serve (as JSON)</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self, scan_id):\n    \"\"\"Returns the scan dataset information.\n\n    Parameters\n    ----------\n    scan_id : str\n        The name of the scan for which to serve the information.\n\n    Returns\n    -------\n    dict\n        The dictionary to serve (as JSON)\n    \"\"\"\n    return get_scan_data(self.db.get_scan(scan_id))\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.ScanList","title":"<code>ScanList(db)</code>","text":"<p>             Bases: <code>Resource</code></p> <p>Concrete RESTful resource to serve the list of scan datasets and some info upon request (GET method).</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def __init__(self, db):\n    self.db = db\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.ScanList.get","title":"<code>get()</code>","text":"<p>Returns a list of scan dataset information.</p> <p>Returns:</p> Type Description <code>list of dict</code> <p>The list of dictionaries to serve (as JSON)</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get(self):\n    \"\"\"Returns a list of scan dataset information.\n\n    Returns\n    -------\n    list of dict\n        The list of dictionaries to serve (as JSON)\n    \"\"\"\n    return list_scans_info(self.db.get_scans(), query=request.args.get('filterQuery'))\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.compute_fileset_matches","title":"<code>compute_fileset_matches(scan)</code>","text":"<p>Return a dictionary mapping the scan tasks to fileset names.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>The scan instance to list the filesets from.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary mapping the scan tasks to fileset names.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.rest_api import compute_fileset_matches\n&gt;&gt;&gt; from plantdb.fsdb import dummy_db\n&gt;&gt;&gt; db = dummy_db(with_fileset=True)\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n&gt;&gt;&gt; compute_fileset_matches(scan)\n{'fileset': 'fileset_001'}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/rest_api.py</code> <pre><code>def compute_fileset_matches(scan):\n    \"\"\"Return a dictionary mapping the scan tasks to fileset names.\n\n    Parameters\n    ----------\n    scan : plantdb.fsdb.Scan\n        The scan instance to list the filesets from.\n\n    Returns\n    -------\n    dict\n        A dictionary mapping the scan tasks to fileset names.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.rest_api import compute_fileset_matches\n    &gt;&gt;&gt; from plantdb.fsdb import dummy_db\n    &gt;&gt;&gt; db = dummy_db(with_fileset=True)\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan(\"myscan_001\")\n    &gt;&gt;&gt; compute_fileset_matches(scan)\n    {'fileset': 'fileset_001'}\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    filesets_matches = {}\n    for fs in scan.get_filesets():\n        x = fs.id.split('_')[0]  # get the task name\n        filesets_matches[x] = fs.id\n    return filesets_matches\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.get_path","title":"<code>get_path(f, db_prefix='/files/')</code>","text":"<p>Return the path to a file.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>File</code> <p>The file to get the path for.</p> required <code>db_prefix</code> <code>str</code> <p>A prefix to use... ???</p> <code>'/files/'</code> <p>Returns:</p> Type Description <code>str</code> <p>The path to the file.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get_path(f, db_prefix=\"/files/\"):\n    \"\"\"Return the path to a file.\n\n    Parameters\n    ----------\n    f : plantdb.FSDB.File\n        The file to get the path for.\n    db_prefix : str, optional\n        A prefix to use... ???\n\n    Returns\n    -------\n    str\n        The path to the file.\n    \"\"\"\n    fs = f.fileset  # get the corresponding fileset\n    scan = fs.scan  # get the corresponding scan\n    return os.path.join(db_prefix, scan.id, fs.id, f.filename)\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.get_scan_data","title":"<code>get_scan_data(scan)</code>","text":"<p>Get the scan information and data.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>The scan instance to get the information and data from.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The scan information dictionary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.rest_api import get_scan_data\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n&gt;&gt;&gt; scan_data = get_scan_data(scan)\n&gt;&gt;&gt; print(scan_data['id'])\nreal_plant_analyzed\n&gt;&gt;&gt; print(scan_data['filesUri'])\n{'pointCloud': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud.ply'), 'mesh': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/TriangleMesh_9_most_connected_t_open3d_00e095c359/TriangleMesh.ply'), 'skeleton': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/CurveSkeleton__TriangleMesh_0393cb5708/CurveSkeleton.json'), 'tree': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/TreeGraph__False_CurveSkeleton_c304a2cc71/TreeGraph.p')}\n&gt;&gt;&gt; print(scan_data['camera'][\"model\"])\nSIMPLE_RADIAL\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get_scan_data(scan):\n    \"\"\"Get the scan information and data.\n\n    Parameters\n    ----------\n    scan : plantdb.fsdb.Scan\n        The scan instance to get the information and data from.\n\n    Returns\n    -------\n    dict\n        The scan information dictionary.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.rest_api import get_scan_data\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n    &gt;&gt;&gt; scan_data = get_scan_data(scan)\n    &gt;&gt;&gt; print(scan_data['id'])\n    real_plant_analyzed\n    &gt;&gt;&gt; print(scan_data['filesUri'])\n    {'pointCloud': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud.ply'), 'mesh': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/TriangleMesh_9_most_connected_t_open3d_00e095c359/TriangleMesh.ply'), 'skeleton': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/CurveSkeleton__TriangleMesh_0393cb5708/CurveSkeleton.json'), 'tree': PosixPath('/tmp/ROMI_DB/real_plant_analyzed/TreeGraph__False_CurveSkeleton_c304a2cc71/TreeGraph.p')}\n    &gt;&gt;&gt; print(scan_data['camera'][\"model\"])\n    SIMPLE_RADIAL\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    task_fs_map = compute_fileset_matches(scan)\n    scan_data = get_scan_info(scan)\n\n    def _get_file_uri(scan, fileset, file):\n        return f\"/files/{scan.id}/{fileset.id}/{file.path().name}\"\n\n    # Get the paths to data files:\n    scan_data[\"filesUri\"] = {}\n    ## Get the URI (file path) to the output of the `PointCloud` task:\n    if scan_data[\"hasPointCloud\"]:\n        fs = scan.get_fileset(task_fs_map['PointCloud'])\n        scan_data[\"filesUri\"][\"pointCloud\"] = _get_file_uri(scan, fs, fs.get_file('PointCloud'))\n    ## Get the URI (file path) to the output of the `TriangleMesh` task:\n    if scan_data[\"hasMesh\"]:\n        fs = scan.get_fileset(task_fs_map['TriangleMesh'])\n        scan_data[\"filesUri\"][\"mesh\"] = _get_file_uri(scan, fs, fs.get_file('TriangleMesh'))\n    ## Get the URI (file path) to the output of the `CurveSkeleton` task:\n    if scan_data[\"hasSkeleton\"]:\n        fs = scan.get_fileset(task_fs_map['CurveSkeleton'])\n        scan_data[\"filesUri\"][\"skeleton\"] = _get_file_uri(scan, fs, fs.get_file('CurveSkeleton'))\n    ## Get the URI (file path) to the output of the `TreeGraph` task:\n    if scan_data[\"hasTreeGraph\"]:\n        fs = scan.get_fileset(task_fs_map['TreeGraph'])\n        scan_data[\"filesUri\"][\"tree\"] = _get_file_uri(scan, fs, fs.get_file('TreeGraph'))\n\n    # Load some of the data:\n    scan_data[\"data\"] = {}\n    ## Load the manually measured angles and internodes:\n    if scan_data[\"hasManualMeasures\"]:\n        scan_data[\"data\"][\"angles\"] = {}\n        measures = scan.get_measures()\n        if measures is None:\n            measures = dict([])\n        scan_data[\"data\"][\"angles\"][\"measured_angles\"] = measures.get('angles', [])\n        scan_data[\"data\"][\"angles\"][\"measured_internodes\"] = measures.get(\"internodes\", [])\n    ## Load the skeleton data:\n    if scan_data[\"hasSkeleton\"]:\n        fs = scan.get_fileset(task_fs_map['CurveSkeleton'])\n        scan_data[\"data\"][\"skeleton\"] = read_json(fs.get_file('CurveSkeleton'))\n    ## Load the measured angles and internodes:\n    if scan_data[\"hasAngleData\"]:\n        scan_data[\"data\"][\"angles\"] = {}\n        fs = scan.get_fileset(task_fs_map['AnglesAndInternodes'])\n        measures = read_json(fs.get_file('AnglesAndInternodes'))\n        # scan_data[\"data\"][\"angles\"] = measures.get(\"angles\", {})\n        # scan_data[\"data\"][\"internodes\"] = measures.get(\"internodes\", {})\n        if is_radians(measures[\"angles\"]):\n            measures[\"angles\"] = list(map(degrees, measures[\"angles\"]))\n        scan_data[\"data\"][\"angles\"] = measures\n\n    # Load the reconstruction bounding-box and camera parameters (intrinsic and extrinsic)\n    if scan_data['hasColmap']:\n        ## Load the workspace, aka bounding-box:\n        try:\n            # old version: get scanner workspace\n            scan_data[\"workspace\"] = scan.get_metadata(\"scanner\")[\"workspace\"]\n        except KeyError:\n            # new version: get it from Colmap fileset metadata 'bounding-box'\n            fs = scan.get_fileset(task_fs_map['Colmap'])\n            scan_data[\"workspace\"] = fs.get_metadata(\"bounding_box\")\n            scan_data[\"camera\"] = {}\n        ## Load the camera model (intrinsic parameters):\n        try:\n            # old version\n            scan_data[\"camera\"][\"model\"] = scan.get_metadata(\"computed\")[\"camera_model\"]\n        except KeyError:\n            # new version: get it from Colmap 'cameras.json':\n            fs = scan.get_fileset(task_fs_map['Colmap'])\n            scan_data[\"camera\"][\"model\"] = json.loads(fs.get_file(\"cameras\").read())['1']\n        ## Load the camera poses (extrinsic parameters) from the images metadata:\n        scan_data[\"camera\"][\"poses\"] = []  # initialize list of poses to gather\n        img_fs = scan.get_fileset(task_fs_map['images'])  # get the 'images' fileset\n        for img_idx, img_f in enumerate(img_fs.get_files()):\n            camera_md = img_f.get_metadata(\"colmap_camera\")\n            scan_data[\"camera\"][\"poses\"].append({\n                \"id\": img_idx + 1,\n                \"tvec\": camera_md['tvec'],\n                \"rotmat\": camera_md['rotmat'],\n                \"photoUri\": str(webcache.image_path(scan.db, scan.id, img_fs.id, img_f.id, 'orig')),\n                \"thumbnailUri\": str(webcache.image_path(scan.db, scan.id, img_fs.id, img_f.id, 'thumb')),\n                \"isMatched\": True\n            })\n\n    return scan_data\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.get_scan_date","title":"<code>get_scan_date(scan)</code>","text":"<p>Get the acquisition datetime of a scan.</p> <p>Try to get the data from the scan metadata 'acquisition_date', else from the directory creation time.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>The scan instance to get the date &amp; time from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted datetime string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.rest_api import get_scan_date\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database(['real_plant_analyzed', 'virtual_plant_analyzed'])\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n&gt;&gt;&gt; print(get_scan_date(scan))\n&gt;&gt;&gt; scan = db.get_scan('virtual_plant_analyzed')\n&gt;&gt;&gt; print(get_scan_date(scan))\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get_scan_date(scan):\n    \"\"\"Get the acquisition datetime of a scan.\n\n    Try to get the data from the scan metadata 'acquisition_date', else from the directory creation time.\n\n    Parameters\n    ----------\n    scan : plantdb.fsdb.Scan\n        The scan instance to get the date &amp; time from.\n\n    Returns\n    -------\n    str\n        The formatted datetime string.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.rest_api import get_scan_date\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database(['real_plant_analyzed', 'virtual_plant_analyzed'])\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n    &gt;&gt;&gt; print(get_scan_date(scan))\n    &gt;&gt;&gt; scan = db.get_scan('virtual_plant_analyzed')\n    &gt;&gt;&gt; print(get_scan_date(scan))\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    dt = scan.get_metadata('acquisition_date')\n    try:\n        assert isinstance(dt, str)\n    except:\n        # Get directory creation date as acquisition date\n        c_time = scan.path().lstat().st_ctime\n        dt = datetime.datetime.fromtimestamp(c_time)\n        date = dt.strftime(\"%Y-%m-%d\")\n        time = dt.strftime(\"%H:%M:%S\")\n    else:\n        date, time = dt.split(' ')\n    return f\"{date} {time}\"\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.get_scan_info","title":"<code>get_scan_info(scan)</code>","text":"<p>Get the information related to a single scan dataset.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>The scan instance to get information from.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The scan information dictionary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.rest_api import get_scan_info\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n&gt;&gt;&gt; scan_info = get_scan_info(scan)\n&gt;&gt;&gt; print(scan_info)\n{'id': 'real_plant_analyzed', 'metadata': {'date': '2023-12-15 16:37:15', 'species': 'N/A', 'plant': 'N/A', 'environment': 'Lyon indoor', 'nbPhotos': 60, 'files': {'metadatas': None, 'archive': None}}, 'thumbnailUri': '', 'hasMesh': True, 'hasPointCloud': True, 'hasPcdGroundTruth': False, 'hasSkeleton': True, 'hasAngleData': True, 'hasSegmentation2D': False, 'hasSegmentedPcdEvaluation': False, 'hasPointCloudEvaluation': False, 'hasManualMeasures': False, 'hasAutomatedMeasures': True, 'hasSegmentedPointCloud': False, 'error': False, 'hasTreeGraph': True}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get_scan_info(scan):\n    \"\"\"Get the information related to a single scan dataset.\n\n    Parameters\n    ----------\n    scan : plantdb.fsdb.Scan\n        The scan instance to get information from.\n\n    Returns\n    -------\n    dict\n        The scan information dictionary.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.rest_api import get_scan_info\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n    &gt;&gt;&gt; scan_info = get_scan_info(scan)\n    &gt;&gt;&gt; print(scan_info)\n    {'id': 'real_plant_analyzed', 'metadata': {'date': '2023-12-15 16:37:15', 'species': 'N/A', 'plant': 'N/A', 'environment': 'Lyon indoor', 'nbPhotos': 60, 'files': {'metadatas': None, 'archive': None}}, 'thumbnailUri': '', 'hasMesh': True, 'hasPointCloud': True, 'hasPcdGroundTruth': False, 'hasSkeleton': True, 'hasAngleData': True, 'hasSegmentation2D': False, 'hasSegmentedPcdEvaluation': False, 'hasPointCloudEvaluation': False, 'hasManualMeasures': False, 'hasAutomatedMeasures': True, 'hasSegmentedPointCloud': False, 'error': False, 'hasTreeGraph': True}\n    &gt;&gt;&gt; db.disconnect()\n\n    \"\"\"\n    # Initialize the scan information template:\n    scan_info = get_scan_template(scan.id)\n\n    # Map the scan tasks to fileset names:\n    task_fs_map = compute_fileset_matches(scan)\n    scan_info[\"tasks_fileset\"] = task_fs_map\n\n    # Get the list of original image filenames:\n    img_fs = scan.get_fileset(\"images\")\n    scan_info[\"images\"] = [img_f.filename for img_f in img_fs.get_files(query={\"channel\": 'rgb'})]\n\n    # Gather \"metadata\" information from scan:\n    scan_md = scan.get_metadata()\n    ## Get acquisition date:\n    scan_info[\"metadata\"]['date'] = get_scan_date(scan)\n    ## Import 'object' related scan metadata to scan info template:\n    if 'object' in scan_md:\n        scan_obj = scan_md['object']  # get the 'object' related dictionary\n        scan_info[\"metadata\"][\"species\"] = scan_obj.get('species', 'N/A')\n        scan_info[\"metadata\"][\"environment\"] = scan_obj.get('environment', 'N/A')\n        scan_info[\"metadata\"][\"plant\"] = scan_obj.get('plant_id', 'N/A')\n    ## Get the number of 'images' in the dataset:\n    scan_info[\"metadata\"]['nbPhotos'] = len(scan_info[\"images\"])\n    ## Get the URL to the archive:\n    scan_info[\"metadata\"][\"files\"][\"archive\"] = f\"/archive/{scan.id}\"\n    ## Get the path to the JSON metadata file:\n    metadata_json_path = os.path.join(\"/files/\", scan.id, \"metadata\", \"metadata.json\")\n    scan_info[\"metadata\"][\"files\"][\"metadatas\"] = metadata_json_path\n\n    # Get the URI to first image to create thumbnail:\n    # It is used by the `plant-3d-explorer`, in its landing page, as image presenting the dataset\n    img_f = img_fs.get_files()[0]\n    scan_info[\"thumbnailUri\"] = f\"/image/{scan.id}/{img_fs.id}/{img_f.id}?size=thumb\"\n\n    def _try_has_file(task, file):\n        if task not in task_fs_map:\n            # If not in the dict mapping `task` names to fileset names\n            return False\n        elif scan.get_fileset(task_fs_map[task]) is None:\n            # If ``Fileset`` is None:\n            return False\n        else:\n            # Test if `file` is found in `task` ``Fileset``:\n            return scan.get_fileset(task_fs_map[task]).get_file(file) is not None\n\n    # Set boolean information about tasks presence/absence for given dataset:\n    scan_info[\"hasColmap\"] = _try_has_file('Colmap', 'cameras')\n    scan_info[\"hasPointCloud\"] = _try_has_file('PointCloud', 'PointCloud')\n    scan_info[\"hasMesh\"] = _try_has_file('TriangleMesh', 'TriangleMesh')\n    scan_info[\"hasSkeleton\"] = _try_has_file('CurveSkeleton', 'CurveSkeleton')\n    scan_info[\"hasTreeGraph\"] = _try_has_file('TreeGraph', 'TreeGraph')\n    scan_info[\"hasAngleData\"] = _try_has_file('AnglesAndInternodes', 'AnglesAndInternodes')\n    scan_info[\"hasAutomatedMeasures\"] = _try_has_file('AnglesAndInternodes', 'AnglesAndInternodes')\n    scan_info[\"hasManualMeasures\"] = \"measures.json\" in [f.name for f in scan.path().iterdir()]\n    scan_info[\"hasSegmentation2D\"] = _try_has_file('Segmentation2D', '')\n    scan_info[\"hasPcdGroundTruth\"] = _try_has_file('PointCloudGroundTruth', 'PointCloudGroundTruth')\n    scan_info[\"hasPointCloudEvaluation\"] = _try_has_file('PointCloudEvaluation', 'PointCloudEvaluation')\n    scan_info[\"hasSegmentedPointCloud\"] = _try_has_file('SegmentedPointCloud', 'SegmentedPointCloud')\n    scan_info[\"hasSegmentedPcdEvaluation\"] = _try_has_file('SegmentedPointCloudEvaluation',\n                                                           'SegmentedPointCloudEvaluation')\n\n    return scan_info\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.get_scan_template","title":"<code>get_scan_template(scan_id, error=False)</code>","text":"<p>Template dictionary for a scan.</p> Source code in <code>plantdb/rest_api.py</code> <pre><code>def get_scan_template(scan_id: str, error=False) -&gt; dict:\n    \"\"\"Template dictionary for a scan.\"\"\"\n    return {\n        \"id\": scan_id,\n        \"metadata\": {\n            \"date\": \"01-01-00 00:00:00\",\n            \"species\": \"N/A\",\n            \"plant\": \"N/A\",\n            \"environment\": \"N/A\",\n            \"nbPhotos\": 0,\n            \"files\": {\n                \"metadatas\": None,\n                \"archive\": None\n            }\n        },\n        \"thumbnailUri\": \"\",\n        \"images\": None,  # list of original image filenames\n        \"tasks_fileset\": None,  # dict mapping task names to fileset names\n        \"hasColmap\": False,\n        \"hasPointCloud\": False,\n        \"hasMesh\": False,\n        \"hasSkeleton\": False,\n        \"hasTreeGraph\": False,\n        \"hasAngleData\": False,\n        \"hasAutomatedMeasures\": False,\n        \"hasManualMeasures\": False,\n        \"hasSegmentation2D\": False,\n        \"hasPcdGroundTruth\": False,\n        \"hasPointCloudEvaluation\": False,\n        \"hasSegmentedPointCloud\": False,\n        \"hasSegmentedPcdEvaluation\": False,\n        \"error\": error,\n    }\n</code></pre>"},{"location":"reference/plantdb/rest_api/#plantdb.rest_api.list_scans_info","title":"<code>list_scans_info(scans, query=None)</code>","text":"<p>List scans information.</p> <p>Parameters:</p> Name Type Description Default <code>scans</code> <code>list of plantdb.fsdb.Scan</code> <p>The list of scan instances to get information from.</p> required <code>query</code> <code>str</code> <p>A scan filtering query, to be matched in the scan metadata.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of dict</code> <p>The list of scans information dictionaries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.rest_api import list_scans_info\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scans_info = list_scans_info(db.get_scans())\n&gt;&gt;&gt; print(scans_info)\n[{'id': 'real_plant_analyzed', 'metadata': {'date': '2023-12-15 16:37:15', 'species': 'N/A', 'plant': 'N/A', 'environment': 'Lyon indoor', 'nbPhotos': 60, 'files': {'metadatas': None, 'archive': None}}, 'thumbnailUri': '', 'hasMesh': True, 'hasPointCloud': True, 'hasPcdGroundTruth': False, 'hasSkeleton': True, 'hasAngleData': True, 'hasSegmentation2D': False, 'hasSegmentedPcdEvaluation': False, 'hasPointCloudEvaluation': False, 'hasManualMeasures': False, 'hasAutomatedMeasures': True, 'hasSegmentedPointCloud': False, 'error': False, 'hasTreeGraph': True}]\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/rest_api.py</code> <pre><code>def list_scans_info(scans, query=None):\n    \"\"\"List scans information.\n\n    Parameters\n    ----------\n    scans : list of plantdb.fsdb.Scan\n        The list of scan instances to get information from.\n    query : str, optional\n        A scan filtering query, to be matched in the scan metadata.\n\n    Returns\n    -------\n    list of dict\n        The list of scans information dictionaries.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.rest_api import list_scans_info\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scans_info = list_scans_info(db.get_scans())\n    &gt;&gt;&gt; print(scans_info)\n    [{'id': 'real_plant_analyzed', 'metadata': {'date': '2023-12-15 16:37:15', 'species': 'N/A', 'plant': 'N/A', 'environment': 'Lyon indoor', 'nbPhotos': 60, 'files': {'metadatas': None, 'archive': None}}, 'thumbnailUri': '', 'hasMesh': True, 'hasPointCloud': True, 'hasPcdGroundTruth': False, 'hasSkeleton': True, 'hasAngleData': True, 'hasSegmentation2D': False, 'hasSegmentedPcdEvaluation': False, 'hasPointCloudEvaluation': False, 'hasManualMeasures': False, 'hasAutomatedMeasures': True, 'hasSegmentedPointCloud': False, 'error': False, 'hasTreeGraph': True}]\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    res = []\n    for scan in scans:\n        metadata = scan.get_metadata()\n        if query is not None and not (query.lower() in json.dumps(metadata).lower()):\n            continue  # filter scans info list by matching the query with metadata keys\n        try:\n            scan_info = get_scan_info(scan)\n        except:\n            # logger.error(f\"Could not obtain information from scan dataset '{scan.id}'...\")\n            scan_info = get_scan_template(scan.id, error=True)\n        res.append(scan_info)\n    return res\n</code></pre>"},{"location":"reference/plantdb/sshfsdb/","title":"sshfsdb","text":"<p>This module implement a database as a file structure on a remote server using SSHFS.</p>"},{"location":"reference/plantdb/sshfsdb/#plantdb.sshfsdb.SSHFSDB","title":"<code>SSHFSDB(basedir, remotedir=None)</code>","text":"<p>             Bases: <code>FSDB</code></p> <p>Subclass of FSDB that first mounts a remote directory using SSHFS.</p> <p>Implementation of a database on a remote file system.</p> <p>Attributes:</p> Name Type Description <code>basedir</code> <code>str</code> <p>Path to the local directory where to mount the remote directory.</p> <code>remotedir</code> <code>(str, optional)</code> <p>Path to the remote directory containing the database. Should be in the format <code>user@server:path</code></p> <code>scans</code> <code>list</code> <p>The list of <code>Scan</code> objects found in the database</p> <code>is_connected</code> <code>bool</code> <p><code>True</code> if the DB is connected (locked the directory), else <code>False</code></p> <p>Database constructor.</p> <p>Mount <code>remotedir</code> directory on the <code>basedir</code> directory and load accessible <code>Scan</code> objects.</p> <p>Parameters:</p> Name Type Description Default <code>basedir</code> <code>str</code> <p>Path to local directory of the database</p> required <code>remotedir</code> <code>str</code> <p>Path to the remote directory containing the database. Should be in the format <code>user@server:path</code></p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # EXAMPLE 1: Use a temporary dummy database:\n&gt;&gt;&gt; from plantdb import SSHFSDB\n&gt;&gt;&gt; db = SSHFSDB(\"db\", \"someone@example.com:/data\")\n&gt;&gt;&gt; print(db.basedir)\ndb\n&gt;&gt;&gt; print(db.remotedir)\nsomeone@example.com:/data\n&gt;&gt;&gt; # Now connecting to this remote DB...\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; # ...allows to create new `Scan` in it:\n&gt;&gt;&gt; new_scan = db.create_scan(\"007\")\n&gt;&gt;&gt; print(type(new_scan))\n&lt;class 'plantdb.fsdb.Scan'&gt;\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/sshfsdb.py</code> <pre><code>def __init__(self, basedir, remotedir=None):\n    \"\"\"Database constructor.\n\n    Mount ``remotedir`` directory on the ``basedir`` directory and load accessible ``Scan`` objects.\n\n    Parameters\n    ----------\n    basedir : str\n        Path to local directory of the database\n    remotedir : str, optional\n        Path to the remote directory containing the database.\n        Should be in the format ``user@server:path``\n\n    Examples\n    --------\n    &gt;&gt;&gt; # EXAMPLE 1: Use a temporary dummy database:\n    &gt;&gt;&gt; from plantdb import SSHFSDB\n    &gt;&gt;&gt; db = SSHFSDB(\"db\", \"someone@example.com:/data\")\n    &gt;&gt;&gt; print(db.basedir)\n    db\n    &gt;&gt;&gt; print(db.remotedir)\n    someone@example.com:/data\n    &gt;&gt;&gt; # Now connecting to this remote DB...\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; # ...allows to create new `Scan` in it:\n    &gt;&gt;&gt; new_scan = db.create_scan(\"007\")\n    &gt;&gt;&gt; print(type(new_scan))\n    &lt;class 'plantdb.fsdb.Scan'&gt;\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    super().__init__(basedir)\n    self.remotedir = remotedir\n</code></pre>"},{"location":"reference/plantdb/sshfsdb/#plantdb.sshfsdb.SSHFSDB.connect","title":"<code>connect(login_data=None)</code>","text":"<p>Connect to the remote database.</p> <p>Handle DB \"locking\" system by adding a <code>LOCK_FILE_NAME</code> file in the DB.</p> <p>Parameters:</p> Name Type Description Default <code>login_data</code> <code>bool</code> <p>UNUSED</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb import SSHFSDB\n&gt;&gt;&gt; db = SSHFSDB(\"db\", \"someone@example.com:/data\")\n&gt;&gt;&gt; print(db.is_connected)\nFalse\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; print(db.is_connected)\nTrue\n</code></pre> Source code in <code>plantdb/sshfsdb.py</code> <pre><code>def connect(self, login_data=None):\n    \"\"\"Connect to the remote database.\n\n    Handle DB \"locking\" system by adding a ``LOCK_FILE_NAME`` file in the DB.\n\n    Parameters\n    ----------\n    login_data : bool\n        UNUSED\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb import SSHFSDB\n    &gt;&gt;&gt; db = SSHFSDB(\"db\", \"someone@example.com:/data\")\n    &gt;&gt;&gt; print(db.is_connected)\n    False\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; print(db.is_connected)\n    True\n\n    \"\"\"\n    if not self.path().is_dir():\n        self.path().mkdir(exist_ok=True)\n    if self.remotedir is not None:\n        cmd = [\"sshfs\", \"-o\", \"idmap=user\", self.remotedir, self.path()]\n        logger.info(f\"Connecting with: '{cmd}'\")\n        p = subprocess.run(cmd)\n        logger.debug(f\"The exit code was: {p.returncode}\")\n    super().connect()\n</code></pre>"},{"location":"reference/plantdb/sshfsdb/#plantdb.sshfsdb.SSHFSDB.disconnect","title":"<code>disconnect()</code>","text":"<p>Disconnect from the database.</p> <p>Handle DB \"locking\" system by removing the <code>LOCK_FILE_NAME</code> file from the DB.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb import SSHFSDB\n&gt;&gt;&gt; db = SSHFSDB(\"db\", \"someone@example.com:/data\")\n&gt;&gt;&gt; print(db.is_connected)\nFalse\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; print(db.is_connected)\nTrue\n&gt;&gt;&gt; db.disconnect()\n&gt;&gt;&gt; print(db.is_connected)\nFalse\n</code></pre> Source code in <code>plantdb/sshfsdb.py</code> <pre><code>def disconnect(self):\n    \"\"\"Disconnect from the database.\n\n    Handle DB \"locking\" system by removing the ``LOCK_FILE_NAME`` file from the DB.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb import SSHFSDB\n    &gt;&gt;&gt; db = SSHFSDB(\"db\", \"someone@example.com:/data\")\n    &gt;&gt;&gt; print(db.is_connected)\n    False\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; print(db.is_connected)\n    True\n    &gt;&gt;&gt; db.disconnect()\n    &gt;&gt;&gt; print(db.is_connected)\n    False\n\n    \"\"\"\n    super().disconnect()\n    p = subprocess.run([\"fusermount\", \"-u\", self.path()])\n    print(f\"The exit code was: {p.returncode}\")\n</code></pre>"},{"location":"reference/plantdb/sync/","title":"sync","text":"<p>This module provides a synchronization mechanism for PlantDB.</p>"},{"location":"reference/plantdb/sync/#plantdb.sync.FSDBSync","title":"<code>FSDBSync(source, target)</code>","text":"<p>Class for sync between two FSDB databases.</p> <p>It checks for validity of both source and target by checking:     * That there is a marker file in the DB path root     * That the DB is not busy by checking for the lock file in the DB path root. It locks the two databases during the sync. The sync is done using rsync as a subprocess</p> <p>Attributes:</p> Name Type Description <code>source_str</code> <code>str</code> <p>Source path</p> <code>target_str</code> <code>str</code> <p>Target path</p> <code>source</code> <code>dict</code> <p>Source path description</p> <code>target</code> <code>dict</code> <p>Target path description</p> <p>Class constructor.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>Source database path (remote or local)</p> required <code>target</code> <code>str</code> <p>Target database path (remote or local)</p> required Source code in <code>plantdb/sync.py</code> <pre><code>def __init__(self, source, target):\n    \"\"\"Class constructor.\n\n    Parameters\n    ----------\n    source : str\n        Source database path (remote or local)\n    target : str\n        Target database path (remote or local)\n    \"\"\"\n    self.source_str = source\n    self.target_str = target\n    self.source = _fmt_path(source)\n    self.target = _fmt_path(target)\n</code></pre>"},{"location":"reference/plantdb/sync/#plantdb.sync.FSDBSync.lock","title":"<code>lock()</code>","text":"<p>Lock the source and target DB before sync.</p> Source code in <code>plantdb/sync.py</code> <pre><code>def lock(self):\n    \"\"\"Lock the source and target DB before sync.\"\"\"\n    for x in [self.source, self.target]:\n        if x[\"type\"] == \"local\":\n            _lock_local(x)\n        elif x[\"type\"] == \"remove\":\n            _lock_remote(x)\n</code></pre>"},{"location":"reference/plantdb/sync/#plantdb.sync.FSDBSync.sync","title":"<code>sync()</code>","text":"<p>Sync the two DBs.</p> Source code in <code>plantdb/sync.py</code> <pre><code>def sync(self):\n    \"\"\"Sync the two DBs.\"\"\"\n    self.lock()\n    subprocess.run([\"rsync\", \"-av\", self.source_str, self.target_str])\n    self.unlock()\n</code></pre>"},{"location":"reference/plantdb/sync/#plantdb.sync.FSDBSync.unlock","title":"<code>unlock()</code>","text":"<p>Unlock the source and target DB after sync.</p> Source code in <code>plantdb/sync.py</code> <pre><code>def unlock(self):\n    \"\"\"Unlock the source and target DB after sync.\"\"\"\n    for x in [self.source, self.target]:\n        if x[\"type\"] == \"local\":\n            _unlock_local(x)\n        elif x[\"type\"] == \"remove\":\n            _unlock_remote(x)\n</code></pre>"},{"location":"reference/plantdb/test_database/","title":"test_database","text":"<p>This module regroup tools to download test datasets, pipeline configuration files and trained CNN models from ZENODO repository. It aims at simplifying the creation of a test database for demonstration or CI purposes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.test_database import setup_test_database\n&gt;&gt;&gt; # EXAMPLE 1 - Download and extract the 'real_plant' test database to `plantdb/tests/testdata` module directory:\n&gt;&gt;&gt; db_path = setup_test_database('real_plant')\nINFO     [plantdb.test_database] File 'real_plant.zip' exists locally. Skipping download.\nINFO     [plantdb.test_database] Verifying 'real_plant.zip' MD5 hash value...\nINFO     [plantdb.test_database] The test database is set up under '/home/jonathan/Projects/plantdb/tests/testdata'.\n&gt;&gt;&gt; print(db_path)\nPosixPath('/home/jonathan/Projects/plantdb/tests/testdata')\n&gt;&gt;&gt; # EXAMPLE 2 - Download and extract the 'real_plant' and 'virtual_plant' test dataset and configuration pipelines to a temporary folder called 'ROMI_DB':\n&gt;&gt;&gt; db_path = setup_test_database(['real_plant', 'virtual_plant'], '/tmp/ROMI_DB', with_configs=True)\nINFO     [plantdb.test_database] File 'real_plant.zip' exists locally. Skipping download.\nINFO     [plantdb.test_database] Verifying 'real_plant.zip' MD5 hash value...\nINFO     [plantdb.test_database] File 'virtual_plant.zip' exists locally. Skipping download.\nINFO     [plantdb.test_database] Verifying 'virtual_plant.zip' MD5 hash value...\nINFO     [plantdb.test_database] File 'configs.zip' exists locally. Skipping download.\nINFO     [plantdb.test_database] Verifying 'configs.zip' MD5 hash value...\nINFO     [plantdb.test_database] The test database is set up under '/tmp/ROMI_DB'.\n&gt;&gt;&gt; print(db_path)\nPosixPath('/tmp/ROMI_DB')\n</code></pre> <p>The list of valid dataset names are:   * <code>'real_plant'</code>: 60 images of a Col-0 Arabidopsis thaliana plant acquired with the Plant Imager;   * <code>'virtual_plant'</code>: 18 snapshots of a virtual Arabidopsis thaliana plant generated with the Virtual Plant Imager;   * <code>'real_plant_analyzed'</code>: the <code>real_plant</code> dataset reconstructed using the <code>AnglesAndInternodes</code> task with the <code>config/geom_pipe_real.toml</code> configuration file;   * <code>'virtual_plant_analyzed'</code>: the <code>virtual_plant</code> dataset reconstructed using the <code>AnglesAndInternodes</code> task with the <code>config/geom_pipe_virtual.toml</code> configuration file;   * <code>'arabidopsis000'</code>: 72 snapshots of a virtual Arabidopsis thaliana plant generated with the Virtual Plant Imager;</p> <p>Archive <code>'configs.zip'</code> contains the configuration files used with the <code>romi_run_task</code> CLI to reconstruct the datasets.</p> <p>Archive <code>'models.zip'</code> contains a preconfigured directory structure with the trained CNN weight file Resnet_896_896_epoch50.pt.</p>"},{"location":"reference/plantdb/test_database/#plantdb.test_database.get_configs","title":"<code>get_configs(out_path=TEST_DIR, keep_tmp=False, force=False)</code>","text":"<p>Download and extract the pipeline configurations from ZENODO.</p> <p>Parameters:</p> Name Type Description Default <code>out_path</code> <code>str or Path</code> <p>The path where to download the pipeline configurations. Defaults to <code>TEST_DIR</code>.</p> <code>TEST_DIR</code> <code>keep_tmp</code> <code>bool</code> <p>Whether to keep the temporary files. Defaults to <code>False</code>.</p> <code>False</code> <code>force</code> <code>bool</code> <p>Whether to force redownload of archive. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the downloaded configs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.test_database import get_configs\n&gt;&gt;&gt; get_configs()  # download and extract the pipeline configurations to `plantdb/tests/testdata` directory\n</code></pre> Source code in <code>plantdb/test_database.py</code> <pre><code>def get_configs(out_path=TEST_DIR, keep_tmp=False, force=False):\n    \"\"\"Download and extract the pipeline configurations from ZENODO.\n\n    Parameters\n    ----------\n    out_path : str or pathlib.Path, optional\n        The path where to download the pipeline configurations. Defaults to ``TEST_DIR``.\n    keep_tmp : bool, optional\n        Whether to keep the temporary files. Defaults to ``False``.\n    force : bool, optional\n        Whether to force redownload of archive. Defaults to ``False``.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the downloaded configs.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.test_database import get_configs\n    &gt;&gt;&gt; get_configs()  # download and extract the pipeline configurations to `plantdb/tests/testdata` directory\n    \"\"\"\n    ds_path = out_path / \"configs\"\n    if ds_path.exists() and not force:\n        out_path = ds_path\n    else:\n        out_path = _get_extract_archive(\"configs\", out_path=out_path, keep_tmp=keep_tmp, force=force)\n    return out_path\n</code></pre>"},{"location":"reference/plantdb/test_database/#plantdb.test_database.get_models_dataset","title":"<code>get_models_dataset(out_path=TEST_DIR, keep_tmp=False, force=False)</code>","text":"<p>Download and extract the trained CNN model from ZENODO.</p> <p>Parameters:</p> Name Type Description Default <code>out_path</code> <code>str or Path</code> <p>The path where to download the trained CNN model. Defaults to <code>TEST_DIR</code>.</p> <code>TEST_DIR</code> <code>keep_tmp</code> <code>bool</code> <p>Whether to keep the temporary files. Defaults to <code>False</code>.</p> <code>False</code> <code>force</code> <code>bool</code> <p>Whether to force redownload of archive. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the downloaded trained CNN model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.test_database import get_models_dataset\n&gt;&gt;&gt; get_models_dataset()  # download and extract the trained CNN models to `plantdb/tests/testdata` directory\n</code></pre> Source code in <code>plantdb/test_database.py</code> <pre><code>def get_models_dataset(out_path=TEST_DIR, keep_tmp=False, force=False):\n    \"\"\"Download and extract the trained CNN model from ZENODO.\n\n    Parameters\n    ----------\n    out_path : str or pathlib.Path, optional\n        The path where to download the trained CNN model. Defaults to ``TEST_DIR``.\n    keep_tmp : bool, optional\n        Whether to keep the temporary files. Defaults to ``False``.\n    force : bool, optional\n        Whether to force redownload of archive. Defaults to ``False``.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the downloaded trained CNN model.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.test_database import get_models_dataset\n    &gt;&gt;&gt; get_models_dataset()  # download and extract the trained CNN models to `plantdb/tests/testdata` directory\n    \"\"\"\n    ds_path = out_path / \"models\"\n    if ds_path.exists() and not force:\n        out_path = ds_path\n    else:\n        out_path = _get_extract_archive(\"models\", out_path=out_path, keep_tmp=keep_tmp, force=force)\n    return out_path\n</code></pre>"},{"location":"reference/plantdb/test_database/#plantdb.test_database.get_test_dataset","title":"<code>get_test_dataset(dataset, out_path=TEST_DIR, keep_tmp=False, force=False)</code>","text":"<p>Download and extract a test dataset from ZENODO.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>(real_plant, virtual_plant, real_plant_analyzed, virtual_plant_analyzed, arabidopsis000)</code> <p>The name of the dataset to download.</p> <code>'real_plant'</code> <code>out_path</code> <code>str or Path</code> <p>The path where to extract the test dataset archive. Defaults to <code>TEST_DIR</code>.</p> <code>TEST_DIR</code> <code>keep_tmp</code> <code>bool</code> <p>Whether to keep the temporary files. Defaults to <code>False</code>.</p> <code>False</code> <code>force</code> <code>bool</code> <p>Whether to force redownload of archive. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the downloaded test dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.test_database import get_test_dataset\n&gt;&gt;&gt; get_test_dataset()  # download and extract the test dataset to `plantdb/tests/testdata` directory\n</code></pre> Source code in <code>plantdb/test_database.py</code> <pre><code>def get_test_dataset(dataset, out_path=TEST_DIR, keep_tmp=False, force=False):\n    \"\"\"Download and extract a test dataset from ZENODO.\n\n    Parameters\n    ----------\n    dataset : {'real_plant', 'virtual_plant', 'real_plant_analyzed', 'virtual_plant_analyzed', 'arabidopsis000'}\n        The name of the dataset to download.\n    out_path : str or pathlib.Path, optional\n        The path where to extract the test dataset archive. Defaults to ``TEST_DIR``.\n    keep_tmp : bool, optional\n        Whether to keep the temporary files. Defaults to ``False``.\n    force : bool, optional\n        Whether to force redownload of archive. Defaults to ``False``.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the downloaded test dataset.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.test_database import get_test_dataset\n    &gt;&gt;&gt; get_test_dataset()  # download and extract the test dataset to `plantdb/tests/testdata` directory\n    \"\"\"\n    ds_path = out_path / dataset\n    if ds_path.exists() and not force:\n        out_path = ds_path\n    else:\n        out_path = _get_extract_archive(dataset, out_path=out_path, keep_tmp=keep_tmp, force=force)\n    return out_path\n</code></pre>"},{"location":"reference/plantdb/test_database/#plantdb.test_database.setup_test_database","title":"<code>setup_test_database(dataset, out_path=TEST_DIR, keep_tmp=True, with_configs=False, with_models=False, force=False)</code>","text":"<p>Download and extract the test database from ZENODO.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>all or str or list</code> <p>The dataset name or a list of dataset names to download to the test database. Using \"all\" allows to download all defined datasets. See notes below for a list of dataset names and their meanings.</p> required <code>out_path</code> <code>str or Path</code> <p>The path where to set up the database. Defaults to <code>TEST_DIR</code>.</p> <code>TEST_DIR</code> <code>keep_tmp</code> <code>bool</code> <p>Whether to keep the temporary files. Defaults to <code>False</code>.</p> <code>True</code> <code>with_configs</code> <code>bool</code> <p>Whether to download the config files. Defaults to <code>False</code>.</p> <code>False</code> <code>with_models</code> <code>bool</code> <p>Whether to download the trained CNN model files. Defaults to <code>False</code>.</p> <code>False</code> <code>force</code> <code>bool</code> <p>Whether to force download of archive. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the database.</p> Notes <p>The list of valid dataset names are:   * <code>'real_plant'</code>: 60 images of a Col-0 Arabidopsis thaliana plant acquired with the Plant Imager;   * <code>'virtual_plant'</code>: 18 snapshots of a virtual Arabidopsis thaliana plant generated with the Virtual Plant Imager;   * <code>'real_plant_analyzed'</code>: the <code>real_plant</code> dataset reconstructed using the <code>AnglesAndInternodes</code> task with the <code>testcfg/geom_pipe_real.toml</code> configuration file;   * <code>'virtual_plant_analyzed'</code>: the <code>virtual_plant</code> dataset reconstructed using the <code>AnglesAndInternodes</code> task with the <code>config/geom_pipe_virtual.toml</code> configuration file;   * <code>'arabidopsis000'</code>: 72 snapshots of a virtual Arabidopsis thaliana plant generated with the Virtual Plant Imager;</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.test_database import setup_test_database, TMP_TEST_DIR\n&gt;&gt;&gt; # EXAMPLE 1 - Download and extract the 'real_plant' test database to `plantdb/tests/testdata` module directory:\n&gt;&gt;&gt; setup_test_database('real_plant')\nPosixPath('/home/jonathan/Projects/plantdb/tests/testdata')\n&gt;&gt;&gt; # EXAMPLE 2 - Download and extract the 'real_plant' and 'virtual_plant' test dataset and configuration pipelines to a temporary folder called 'ROMI_DB':\n&gt;&gt;&gt; setup_test_database(['real_plant', 'virtual_plant'], TMP_TEST_DIR, with_configs=True)\nPosixPath('/tmp/ROMI_DB')\n</code></pre> Source code in <code>plantdb/test_database.py</code> <pre><code>def setup_test_database(dataset, out_path=TEST_DIR, keep_tmp=True, with_configs=False, with_models=False, force=False):\n    \"\"\"Download and extract the test database from ZENODO.\n\n    Parameters\n    ----------\n    dataset : \"all\" or str or list\n        The dataset name or a list of dataset names to download to the test database.\n        Using \"all\" allows to download all defined datasets.\n        See notes below for a list of dataset names and their meanings.\n    out_path : str or pathlib.Path, optional\n        The path where to set up the database. Defaults to ``TEST_DIR``.\n    keep_tmp : bool, optional\n        Whether to keep the temporary files. Defaults to ``False``.\n    with_configs : bool, optional\n        Whether to download the config files. Defaults to ``False``.\n    with_models : bool, optional\n        Whether to download the trained CNN model files. Defaults to ``False``.\n    force : bool, optional\n        Whether to force download of archive. Defaults to ``False``.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the database.\n\n    Notes\n    -----\n    The list of valid dataset names are:\n      * ``'real_plant'``: 60 images of a Col-0 _Arabidopsis thaliana_ plant acquired with the _Plant Imager_;\n      * ``'virtual_plant'``: 18 snapshots of a virtual _Arabidopsis thaliana_ plant generated with the _Virtual Plant Imager_;\n      * ``'real_plant_analyzed'``: the ``real_plant`` dataset reconstructed using the ``AnglesAndInternodes`` task with the ``testcfg/geom_pipe_real.toml`` configuration file;\n      * ``'virtual_plant_analyzed'``: the ``virtual_plant`` dataset reconstructed using the ``AnglesAndInternodes`` task with the ``config/geom_pipe_virtual.toml`` configuration file;\n      * ``'arabidopsis000'``: 72 snapshots of a virtual _Arabidopsis thaliana_ plant generated with the _Virtual Plant Imager_;\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.test_database import setup_test_database, TMP_TEST_DIR\n    &gt;&gt;&gt; # EXAMPLE 1 - Download and extract the 'real_plant' test database to `plantdb/tests/testdata` module directory:\n    &gt;&gt;&gt; setup_test_database('real_plant')\n    PosixPath('/home/jonathan/Projects/plantdb/tests/testdata')\n    &gt;&gt;&gt; # EXAMPLE 2 - Download and extract the 'real_plant' and 'virtual_plant' test dataset and configuration pipelines to a temporary folder called 'ROMI_DB':\n    &gt;&gt;&gt; setup_test_database(['real_plant', 'virtual_plant'], TMP_TEST_DIR, with_configs=True)\n    PosixPath('/tmp/ROMI_DB')\n    \"\"\"\n    from plantdb.fsdb import MARKER_FILE_NAME\n    from plantdb.fsdb import LOCK_FILE_NAME\n    if isinstance(out_path, str):\n        out_path = Path(out_path)\n    # Make sure the path to the database exists:\n    out_path.mkdir(parents=True, exist_ok=True)\n    # Make sure the marker file exists:\n    marker_path = out_path / MARKER_FILE_NAME\n    marker_path.touch(exist_ok=True)\n    # Make sure the locking file do NOT exist:\n    lock_path = out_path / LOCK_FILE_NAME\n    lock_path.unlink(missing_ok=True)\n    # Get the list of all test dataset if required:\n    if isinstance(dataset, str) and dataset.lower() == \"all\":\n        dataset = DATASET\n    # Create a dict of keyword arguments to use for download:\n    kwargs = {'out_path': out_path, 'keep_tmp': keep_tmp, 'force': force}\n    # Download the test datasets:\n    if isinstance(dataset, list):\n        [get_test_dataset(ds, **kwargs) for ds in dataset]\n    else:\n        _ = get_test_dataset(dataset, **kwargs)\n    # Download configs archive if requested:\n    if with_configs:\n        _ = get_configs(**kwargs)\n    if with_models:\n        _ = get_models_dataset(**kwargs)\n\n    logger.info(f\"The test database is set up under '{out_path}'.\")\n    return out_path\n</code></pre>"},{"location":"reference/plantdb/test_database/#plantdb.test_database.test_database","title":"<code>test_database(dataset='real_plant_analyzed', out_path=TMP_TEST_DIR, **kwargs)</code>","text":"<p>Create and return an FSDB test database.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>str or list of str</code> <p>The (list of) test dataset to use, by default 'real_plant_analyzed'.</p> <code>'real_plant_analyzed'</code> <code>out_path</code> <code>str or Path</code> <p>The path where to set up the database. Defaults to the temporary directory under 'ROMI_DB', as defined by <code>TMP_TEST_DIR</code>.</p> <code>TMP_TEST_DIR</code> <p>Other Parameters:</p> Name Type Description <code>keep_tmp</code> <code>bool</code> <p>Whether to keep the temporary files. Defaults to <code>False</code>.</p> <code>with_configs</code> <code>bool</code> <p>Whether to download the config files. Defaults to <code>False</code>.</p> <code>with_models</code> <code>bool</code> <p>Whether to download the trained CNN model files. Defaults to <code>False</code>.</p> <code>force</code> <code>bool</code> <p>Whether to force redownload of archive. Defaults to <code>False</code>.</p> <p>Returns:</p> Type Description <code>FSDB</code> <p>The FSDB test database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database()\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; db.list_scans()\n['real_plant_analyzed']\n&gt;&gt;&gt; db.path()\nPosixPath('/tmp/ROMI_DB')\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/test_database.py</code> <pre><code>def test_database(dataset='real_plant_analyzed', out_path=TMP_TEST_DIR, **kwargs):\n    \"\"\"Create and return an FSDB test database.\n\n    Parameters\n    ----------\n    dataset : str or list of str, optional\n        The (list of) test dataset to use, by default 'real_plant_analyzed'.\n    out_path : str or pathlib.Path, optional\n        The path where to set up the database.\n        Defaults to the temporary directory under 'ROMI_DB', as defined by ``TMP_TEST_DIR``.\n\n    Other Parameters\n    ----------------\n    keep_tmp : bool\n        Whether to keep the temporary files. Defaults to ``False``.\n    with_configs : bool\n        Whether to download the config files. Defaults to ``False``.\n    with_models : bool\n        Whether to download the trained CNN model files. Defaults to ``False``.\n    force : bool\n        Whether to force redownload of archive. Defaults to ``False``.\n\n    Returns\n    -------\n    plantdb.fsdb.FSDB\n        The FSDB test database.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database()\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; db.list_scans()\n    ['real_plant_analyzed']\n    &gt;&gt;&gt; db.path()\n    PosixPath('/tmp/ROMI_DB')\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    from plantdb.fsdb import FSDB\n    return FSDB(setup_test_database(dataset, out_path=out_path, **kwargs))\n</code></pre>"},{"location":"reference/plantdb/testing/","title":"testing","text":"<p>This module provides a set of classes useful for testing procedures.</p>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase","title":"<code>DummyDBTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>A dummy test database.</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>FSDB</code> <p>The temporary directory.</p> <code>tmpclone</code> <code>TemporaryCloneDB</code> <p>A local temporary copy of a dummy test database.</p>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase.get_test_db","title":"<code>get_test_db(db_path=None)</code>","text":"<p>Return the test <code>FSDB</code> database.</p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>str</code> <p>If <code>None</code> (default), return the dummy database. Else, should be the location of the source database to clone in the temporary folder.</p> <code>None</code> <p>Returns:</p> Type Description <code>FSDB</code> <p>The database to test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_db(self, db_path=None):\n    \"\"\"Return the test ``FSDB`` database.\n\n    Parameters\n    ----------\n    db_path : str, optional\n        If `None` (default), return the dummy database.\n        Else, should be the location of the source database to clone in the temporary folder.\n\n    Returns\n    -------\n    plantdb.FSDB\n        The database to test.\n    \"\"\"\n    if db_path is not None:\n        self.tmpclone = TemporaryCloneDB(db_path)\n        self.db = FSDB(self.tmpclone.tmpdir.name)\n\n    self.db.connect()\n    return self.db\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase.get_test_fileset","title":"<code>get_test_fileset()</code>","text":"<p>Return the default test <code>Fileset</code> object named 'fileset_001'.</p> <p>Returns:</p> Type Description <code>Scan</code> <p>The default fileset instance to test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_fileset(self):\n    \"\"\"Return the default test ``Fileset`` object named 'fileset_001'.\n\n    Returns\n    -------\n    plantdb.Scan\n        The default fileset instance to test.\n    \"\"\"\n    scan = self.get_test_scan()\n    fileset = scan.get_fileset(\"fileset_001\")\n    return fileset\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase.get_test_image_file","title":"<code>get_test_image_file()</code>","text":"<p>Return the default test <code>File</code> object named 'test_image'.</p> <p>Returns:</p> Type Description <code>File</code> <p>The default image file instance to test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_image_file(self):\n    \"\"\"Return the default test ``File`` object named 'test_image'.\n\n    Returns\n    -------\n    plantdb.File\n        The default image file instance to test.\n    \"\"\"\n    fileset = self.get_test_fileset()\n    file = fileset.get_file(\"test_image\")\n    return file\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase.get_test_scan","title":"<code>get_test_scan()</code>","text":"<p>Return the default test <code>Scan</code> object named 'myscan_001'.</p> <p>Returns:</p> Type Description <code>Scan</code> <p>The default scan instance to test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_scan(self):\n    \"\"\"Return the default test ``Scan`` object named 'myscan_001'.\n\n    Returns\n    -------\n    plantdb.Scan\n        The default scan instance to test.\n    \"\"\"\n    db = self.get_test_db()\n    scan = db.get_scan(\"myscan_001\")\n    return scan\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase.setUp","title":"<code>setUp()</code>","text":"<p>Set up a dummy database with fake scan, fileset &amp; files.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def setUp(self):\n    \"\"\"Set up a dummy database with fake scan, fileset &amp; files.\"\"\"\n    self.db = dummy_db(with_scan=True, with_fileset=True, with_file=True)\n    self.tmpclone = None\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.DummyDBTestCase.tearDown","title":"<code>tearDown()</code>","text":"<p>Clean up after test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def tearDown(self):\n    \"\"\"Clean up after test.\"\"\"\n    try:\n        self.db.disconnect()\n    except:\n        return\n    from shutil import rmtree\n    rmtree(self.db.path(), ignore_errors=True)\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase","title":"<code>FSDBTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>A local FSDB test database.</p> <p>Attributes:</p> Name Type Description <code>db</code> <code>FSDB</code> <p>The temporary test database with the 'real_plant_analyzed' dataset.</p>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.get_task_fileset","title":"<code>get_task_fileset(task_name)</code>","text":"<p>Return the fileset for the corresponding task.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>The name of the task to get the fileset for.</p> required <p>Returns:</p> Type Description <code>Fileset</code> <p>The <code>Fileset</code> corresponding to the given task.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_task_fileset(self, task_name):\n    \"\"\"Return the fileset for the corresponding task.\n\n    Parameters\n    ----------\n    task_name : str\n        The name of the task to get the fileset for.\n\n    Returns\n    -------\n    plantdb.fsdb.Fileset\n        The ``Fileset`` corresponding to the given task.\n    \"\"\"\n    scan = self.get_test_scan()\n    return scan.get_fileset(self.get_task_fileset_id(task_name))\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.get_task_fileset_id","title":"<code>get_task_fileset_id(task_name)</code>","text":"<p>Return the fileset id for the corresponding task.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>The name of the task to get the fileset for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The <code>Fileset</code> name corresponding to the given task.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_task_fileset_id(self, task_name):\n    \"\"\"Return the fileset id for the corresponding task.\n\n    Parameters\n    ----------\n    task_name : str\n        The name of the task to get the fileset for.\n\n    Returns\n    -------\n    str\n        The ``Fileset`` name corresponding to the given task.\n    \"\"\"\n    scan = self.get_test_scan()\n    return locate_task_filesets(scan, [task_name])[task_name]\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.get_test_db","title":"<code>get_test_db()</code>","text":"<p>Return the test <code>FSDB</code> database.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_db(self) -&gt; FSDB:\n    \"\"\"Return the test ``FSDB`` database.\"\"\"\n    self.db.connect()\n    return self.db\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.get_test_fileset","title":"<code>get_test_fileset(fs_id, create=False)</code>","text":"<p>Return the default test <code>Fileset</code> object named 'fileset_001'.</p> <p>Returns:</p> Type Description <code>Scan</code> <p>The default fileset instance to test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_fileset(self, fs_id, create=False):\n    \"\"\"Return the default test ``Fileset`` object named 'fileset_001'.\n\n    Returns\n    -------\n    plantdb.Scan\n        The default fileset instance to test.\n    \"\"\"\n    scan = self.get_test_scan()\n    fileset = scan.get_fileset(fs_id, create=create)\n    return fileset\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.get_test_scan","title":"<code>get_test_scan()</code>","text":"<p>Return the default test <code>Scan</code> object named 'real_plant_analyzed'.</p> <p>Returns:</p> Type Description <code>Scan</code> <p>The default <code>Scan</code> instance to test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def get_test_scan(self):\n    \"\"\"Return the default test ``Scan`` object named 'real_plant_analyzed'.\n\n    Returns\n    -------\n    plantdb.fsdb.Scan\n        The default ``Scan`` instance to test.\n    \"\"\"\n    db = self.get_test_db()\n    scan = db.get_scan(\"real_plant_analyzed\")\n    return scan\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.setUp","title":"<code>setUp()</code>","text":"<p>Set up a test database with the 'real_plant_analyzed' dataset.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def setUp(self):\n    \"\"\"Set up a test database with the 'real_plant_analyzed' dataset.\"\"\"\n    self.db = test_database('real_plant_analyzed')\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.FSDBTestCase.tearDown","title":"<code>tearDown()</code>","text":"<p>Clean up after test.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def tearDown(self):\n    \"\"\"Clean up after test.\"\"\"\n    try:\n        self.db.disconnect()\n    except:\n        pass\n    from shutil import rmtree\n    rmtree(self.db.path(), ignore_errors=True)\n</code></pre>"},{"location":"reference/plantdb/testing/#plantdb.testing.TemporaryCloneDB","title":"<code>TemporaryCloneDB(db_location)</code>","text":"<p>             Bases: <code>object</code></p> <p>Class for doing tests on a copy of a local DB.</p> <p>Parameters:</p> Name Type Description Default <code>db_location</code> <code>str</code> <p>Location of the source database to clone in the temporary folder.</p> required <p>Attributes:</p> Name Type Description <code>tmpdir</code> <code>TemporaryDirectory</code> <p>The temporary directory.</p> Source code in <code>plantdb/testing.py</code> <pre><code>def __init__(self, db_location):\n    self.tmpdir = tempfile.TemporaryDirectory()\n    shutil.copytree(db_location, self.tmpdir.name)\n</code></pre>"},{"location":"reference/plantdb/utils/","title":"utils","text":"<p>This module contains utility functions.</p>"},{"location":"reference/plantdb/utils/#plantdb.utils.fsdb_file_from_local_file","title":"<code>fsdb_file_from_local_file(path)</code>","text":"<p>Creates a temporary <code>fsdb.File</code> object from a local file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path or str</code> <p>The file path to use to create the temporary local database.</p> required <p>Returns:</p> Type Description <code>File</code> <p>The temporary <code>fsdb.File</code>.</p> Source code in <code>plantdb/utils.py</code> <pre><code>def fsdb_file_from_local_file(path):\n    \"\"\"Creates a temporary ``fsdb.File`` object from a local file.\n\n    Parameters\n    ----------\n    path : pathlib.Path or str\n        The file path to use to create the temporary local database.\n\n    Returns\n    -------\n    plantdb.fsdb.File\n        The temporary ``fsdb.File``.\n    \"\"\"\n    from plantdb.fsdb import FSDB\n    from plantdb.fsdb import Scan\n    from plantdb.fsdb import Fileset\n    from plantdb.fsdb import File\n    from plantdb.fsdb import MARKER_FILE_NAME\n    path = Path(path)\n    dirname, fname = path.parent, path.name\n    id = Path(fname).stem\n    with tempfile.TemporaryDirectory() as tmpdir:\n        # Initialise a temporary `FSDB`:\n        Path(f\"{tmpdir}/{MARKER_FILE_NAME}\").touch()  # add the db marker file\n        db = FSDB(tmpdir)\n        # Initialize a `Scan` instance:\n        scan = Scan(db, \"tmp\")\n        # Initialize a `Fileset` instance:\n        fileset = Fileset(scan, dirname)\n        # Initialize a `File` instance &amp; return it:\n        f = File(db=db, fileset=fileset, id=id)\n        f.filename = fname\n        f.metadata = None\n    return f\n</code></pre>"},{"location":"reference/plantdb/utils/#plantdb.utils.is_radians","title":"<code>is_radians(angles)</code>","text":"<p>Guess if the sequence of angles is in radians.</p> <p>Parameters:</p> Name Type Description Default <code>angles</code> <code>list of float</code> <p>Sequence of angle values.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the sequence is in radians, else `False.</p> Notes <p>This assumes that the angles can not be greater than 360 degrees or its equivalent in radians.</p> Source code in <code>plantdb/utils.py</code> <pre><code>def is_radians(angles):\n    \"\"\"Guess if the sequence of angles is in radians.\n\n    Parameters\n    ----------\n    angles : list of float\n        Sequence of angle values.\n\n    Returns\n    -------\n    bool\n        `True` if the sequence is in radians, else `False.\n\n    Notes\n    -----\n    This assumes that the angles can not be greater than 360 degrees or its equivalent in radians.\n    \"\"\"\n    from math import radians\n    if all([angle &lt; radians(360) for angle in angles]):\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"reference/plantdb/utils/#plantdb.utils.locate_task_filesets","title":"<code>locate_task_filesets(scan, tasks)</code>","text":"<p>Map the task names to task filesets.</p> <p>Parameters:</p> Name Type Description Default <code>scan</code> <code>Scan</code> <p>A <code>Scan</code> instance from a local plant database (FSDB).</p> required <code>tasks</code> <code>list of str</code> <p>A list of task names to look up in the scan's list of filesets.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A task indexed dictionary of fileset ids, value may be \"None\" if no matching fileset was found.</p> Notes <p>If more than one fileset id matches a task name, only the first one (found) will be returned!</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.utils import locate_task_filesets\n&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n&gt;&gt;&gt; tasks_fs = locate_task_filesets(scan, ['Masks', 'PointCloud', 'UnknownTask'])\n&gt;&gt;&gt; print(tasks_fs)\n{'Masks': 'Masks_1__0__1__0____channel____rgb_5619aa428d', 'PointCloud': 'PointCloud_1_0_1_0_10_0_7ee836e5a9', 'UnknownTask': 'None'}\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/utils.py</code> <pre><code>def locate_task_filesets(scan, tasks):\n    \"\"\"Map the task names to task filesets.\n\n    Parameters\n    ----------\n    scan : plantdb.fsdb.Scan\n        A ``Scan`` instance from a local plant database (FSDB).\n    tasks : list of str\n        A list of task names to look up in the scan's list of filesets.\n\n    Returns\n    -------\n    dict\n        A task indexed dictionary of fileset ids, value may be \"None\" if no matching fileset was found.\n\n    Notes\n    -----\n    If more than one fileset id matches a task name, only the first one (found) will be returned!\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.utils import locate_task_filesets\n    &gt;&gt;&gt; from plantdb.fsdb import FSDB\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; scan = db.get_scan('real_plant_analyzed')\n    &gt;&gt;&gt; tasks_fs = locate_task_filesets(scan, ['Masks', 'PointCloud', 'UnknownTask'])\n    &gt;&gt;&gt; print(tasks_fs)\n    {'Masks': 'Masks_1__0__1__0____channel____rgb_5619aa428d', 'PointCloud': 'PointCloud_1_0_1_0_10_0_7ee836e5a9', 'UnknownTask': 'None'}\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    # List all filesets in the scan dataset:\n    fs_list = scan.list_filesets()\n    # Find the fileset corresponding to the given list of tasks, if any:\n    fileset_names = {}\n    for task in tasks:\n        try:\n            # TODO: could be improved by using the saved config ('pipeline.toml') and recreate the name hash from luigi...\n            fileset_names[task] = [fs for fs in fs_list if fs.startswith(task)][0]\n        except IndexError:\n            fileset_names[task] = \"None\"\n    return fileset_names\n</code></pre>"},{"location":"reference/plantdb/utils/#plantdb.utils.read_image_from_file","title":"<code>read_image_from_file(filename)</code>","text":"<p>Read an image from a file and return it.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str or Path</code> <p>The path to the image to read.</p> required <p>Returns:</p> Name Type Description <code>image</code> <code>Image</code> <p>The loaded image.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.utils import read_image_from_file\n&gt;&gt;&gt; from plantdb.webcache import image_path\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; img_path = image_path(db, 'real_plant', 'images', '00000_rgb', 'orig')\n&gt;&gt;&gt; image = read_image_from_file(img_path)\n&gt;&gt;&gt; print(image.size)\n(1440, 1080)\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/utils.py</code> <pre><code>def read_image_from_file(filename):\n    \"\"\"Read an image from a file and return it.\n\n    Parameters\n    ----------\n    filename : str or pathlib.Path\n        The path to the image to read.\n\n    Returns\n    -------\n    image : PIL.Image.Image\n        The loaded image.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.utils import read_image_from_file\n    &gt;&gt;&gt; from plantdb.webcache import image_path\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; img_path = image_path(db, 'real_plant', 'images', '00000_rgb', 'orig')\n    &gt;&gt;&gt; image = read_image_from_file(img_path)\n    &gt;&gt;&gt; print(image.size)\n    (1440, 1080)\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    image = Image.open(filename)\n    image.load()\n    return image\n</code></pre>"},{"location":"reference/plantdb/utils/#plantdb.utils.tmpdir_from_fileset","title":"<code>tmpdir_from_fileset(fileset)</code>","text":"<p>Creates a temporary directory to host the <code>Fileset</code> object and write files.</p> <p>Parameters:</p> Name Type Description Default <code>fileset</code> <code>Fileset</code> <p>The fileset to use to create the temporary local database.</p> required <p>Returns:</p> Type Description <code>TemporaryDirectory</code> <p>The temporary directory hosting the fileset and file(s), if any.</p> Source code in <code>plantdb/utils.py</code> <pre><code>def tmpdir_from_fileset(fileset):\n    \"\"\"Creates a temporary directory to host the ``Fileset`` object and write files.\n\n    Parameters\n    ----------\n    fileset : plantdb.fsdb.Fileset\n        The fileset to use to create the temporary local database.\n\n    Returns\n    -------\n    tempfile.TemporaryDirectory\n        The temporary directory hosting the fileset and file(s), if any.\n    \"\"\"\n    tmpdir = tempfile.TemporaryDirectory()\n    for f in fileset.get_files():\n        filepath = Path(tmpdir.name) / f.filename\n        to_file(f, filepath)\n    return tmpdir\n</code></pre>"},{"location":"reference/plantdb/utils/#plantdb.utils.to_file","title":"<code>to_file(dbfile, path)</code>","text":"<p>Write a <code>dbfile</code> to a file in the filesystem.</p> <p>Parameters:</p> Name Type Description Default <code>dbfile</code> <code>File</code> <p>The <code>File</code> instance to save under given <code>path</code>.</p> required <code>path</code> <code>Path or str</code> <p>The file path to use to save the <code>dbfile</code>.</p> required Source code in <code>plantdb/utils.py</code> <pre><code>def to_file(dbfile, path):\n    \"\"\"Write a `dbfile` to a file in the filesystem.\n\n    Parameters\n    ----------\n    dbfile : plantdb.fsdb.File\n        The ``File`` instance to save under given `path`.\n    path : pathlib.Path or str\n        The file path to use to save the `dbfile`.\n    \"\"\"\n    b = dbfile.read_raw()\n    path = Path(path)\n    with path.open(mode=\"wb\") as fh:\n        fh.write(b)\n    return\n</code></pre>"},{"location":"reference/plantdb/webcache/","title":"webcache","text":"<p>This module provides three utility functions that are used in combination with the DB interface to create downsized versions of images, point clouds, and mesh resources. The resources are identified using the <code>Scan</code>, <code>Fileset</code>, and <code>File</code> IDs. The downsized versions are cached in the <code>'webcache'</code> directory in the scan directory.</p> <p>The following size specifications are available:</p> <ul> <li>Images: 'thumb' (max. 150x150), 'large' (max. 1500x1500), and 'orig' (original size).</li> <li>Point clouds: 'preview' (max. 10k points), and 'orig' (original size).</li> <li>Mesh: 'orig' (original size). TODO: add remeshing</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from os import environ\n&gt;&gt;&gt; from plantdb.fsdb import FSDB\n&gt;&gt;&gt; from plantdb import webcache\n&gt;&gt;&gt; db = FSDB(environ.get('ROMI_DB', \"/data/ROMI/DB/\"))\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; # Get the path to the original image:\n&gt;&gt;&gt; webcache.image_path(db,'sango36','images','00000_rgb','orig')\n&gt;&gt;&gt; # Get the path to the thumb image (resized and cached):\n&gt;&gt;&gt; webcache.image_path(db,'sango36','images','00000_rgb','thumb')\n&gt;&gt;&gt; # Get the path to the original pointcloud:\n&gt;&gt;&gt; webcache.pointcloud_path(db,'sango_90_300_36','PointCloud_1_0_0_0_10_0_ca07eb2790','PointCloud','orig')\n&gt;&gt;&gt; # Get the path to the preview pointcloud (resized and cached):\n&gt;&gt;&gt; webcache.pointcloud_path(db,'sango_90_300_36','PointCloud_1_0_0_0_10_0_ca07eb2790','PointCloud','preview')\n&gt;&gt;&gt; # Get the path to a downsampled pointcloud (resized and cached):\n&gt;&gt;&gt; webcache.pointcloud_path(db,'sango_90_300_36','PointCloud_1_0_0_0_10_0_ca07eb2790','PointCloud','2.3')\n&gt;&gt;&gt; db.disconnect()\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__file_path","title":"<code>__file_path(db, scan_id, fileset_id, file_id)</code>","text":"<p>Return the path to a file.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The path to the file.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __file_path(db, scan_id, fileset_id, file_id):\n    \"\"\"Return the path to a file.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the file.\n    \"\"\"\n    scan = db.get_scan(scan_id, create=False)\n    fs = scan.get_fileset(fileset_id, create=False)\n    f = fs.get_file(file_id, create=False)\n    return db.basedir / scan.id / fs.id / f.filename\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__hash","title":"<code>__hash(resource_type, scan_id, fileset_id, file_id, size)</code>","text":"<p>Create a hash for a resource.</p> <p>Parameters:</p> Name Type Description Default <code>resource_type</code> <code>str</code> <p>The name of the resource type, e.g. \"image\" or \"pointcloud\".</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>str</code> <p>The requested size.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The hash of the resource.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __hash(resource_type, scan_id, fileset_id, file_id, size):\n    \"\"\"Create a hash for a resource.\n\n    Parameters\n    ----------\n    resource_type : str\n        The name of the resource type, *e.g.* \"image\" or \"pointcloud\".\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : str\n        The requested size.\n\n    Returns\n    -------\n    str\n        The hash of the resource.\n    \"\"\"\n    m = hashlib.sha1()\n    key = f\"{resource_type}|{scan_id}|{fileset_id}|{file_id}|{size}\"\n    m.update(key.encode('utf-8'))\n    return m.hexdigest()\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__image_cache","title":"<code>__image_cache(db, scan_id, fileset_id, file_id, size)</code>","text":"<p>Create a cache for an image resource.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, large, thumb)</code> <p>If an integer, use  it as the size of the cached image to create and return. Else, should be a string in the given list.</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the cached image.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __image_cache(db, scan_id, fileset_id, file_id, size):\n    \"\"\"Create a cache for an image resource.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'large', 'thumb'} or int, optional\n        If an integer, use  it as the size of the cached image to create and return.\n        Else, should be a string in the given list.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the cached image.\n    \"\"\"\n    # Get the path to the original image:\n    src = __file_path(db, scan_id, fileset_id, file_id)\n\n    # Get the path to the 'webcache' directory:\n    cache_dir = __webcache_path(db, scan_id)\n    dst = cache_dir / __image_hash(scan_id, fileset_id, file_id, size)\n\n    # Load the image and resize it:\n    image = Image.open(src)\n    image.load()\n    if isinstance(size, int):\n        maxsize = size\n    else:\n        maxsize = IMG_RESOLUTIONS.get(size)\n    image = __image_resize(image, maxsize)\n    # Make sure we have an RGB image to be able to save in this format:\n    if image.mode != \"RGB\":\n        image = image.convert(mode=\"RGB\")\n    save_kwargs = {'quality': 84}\n    # Save the resized image in the \"webcache\" directory:\n    image.save(dst, **save_kwargs)\n    print(f\"Converted '{src}' to '{dst}', using size '{maxsize}'\")\n\n    return dst\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__image_cached_path","title":"<code>__image_cached_path(db, scan_id, fileset_id, file_id, size)</code>","text":"<p>Get The path to the cached image.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, large, thumb)</code> <p>If an integer, use  it as the size of the cached image to create and return. Else, should be a string in the given list.</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the cached image.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __image_cached_path(db, scan_id, fileset_id, file_id, size):\n    \"\"\"Get The path to the cached image.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'large', 'thumb'} or int, optional\n        If an integer, use  it as the size of the cached image to create and return.\n        Else, should be a string in the given list.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the cached image.\n    \"\"\"\n    cache_dir = __webcache_path(db, scan_id)\n    img_path = cache_dir / __image_hash(scan_id, fileset_id, file_id, size)\n    if not img_path.is_file():\n        __image_cache(db, scan_id, fileset_id, file_id, size)\n    return img_path\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__image_hash","title":"<code>__image_hash(scan_id, fileset_id, file_id, size)</code>","text":"<p>Create a file name for an image resource using a hash value.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, large, thumb)</code> <p>If an integer, use  it as the size of the cached image to create and return. Else, should be a string in the given list.</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>str</code> <p>The image resource file name.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __image_hash(scan_id, fileset_id, file_id, size):\n    \"\"\"Create a file name for an image resource using a hash value.\n\n    Parameters\n    ----------\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'large', 'thumb'} or int, optional\n        If an integer, use  it as the size of the cached image to create and return.\n        Else, should be a string in the given list.\n\n    Returns\n    -------\n    str\n        The image resource file name.\n    \"\"\"\n    return __hash(\"image\", scan_id, fileset_id, file_id, size) + \".jpeg\"\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__image_resize","title":"<code>__image_resize(img, max_size)</code>","text":"<p>Resize a <code>Pillow</code> image.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>Image</code> <p>A <code>Pillow</code> image to resize.</p> required <code>max_size</code> <code>int</code> <p>The requested max width or height size, in pixels.</p> required <p>Returns:</p> Type Description <code>Image</code> <p>The resized image.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __image_resize(img, max_size):\n    \"\"\"Resize a ``Pillow`` image.\n\n    Parameters\n    ----------\n    img : PIL.Image.Image\n        A ``Pillow`` image to resize.\n    max_size : int\n        The requested max width or height size, in pixels.\n\n    Returns\n    -------\n    PIL.Image.Image\n        The resized image.\n    \"\"\"\n    img.thumbnail((max_size, max_size))\n    return img\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__pointcloud_cache","title":"<code>__pointcloud_cache(db, scan_id, fileset_id, file_id, size)</code>","text":"<p>Create a cache for a pointcloud resource.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, preview)</code> <p>The requested size of the point cloud. Obviously 'orig' preserve the original point cloud. 'preview' will resize the point cloud to a <code>1.8</code> voxel size. A float will resize the point cloud to given voxel size.</p> <code>'orig'</code> See Also <p>__pointcloud_resize</p> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the cached pointcloud.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __pointcloud_cache(db, scan_id, fileset_id, file_id, size):\n    \"\"\"Create a cache for a pointcloud resource.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'preview'} or float\n        The requested size of the point cloud.\n        Obviously 'orig' preserve the original point cloud.\n        'preview' will resize the point cloud to a `1.8` voxel size.\n        A float will resize the point cloud to given voxel size.\n\n    See Also\n    --------\n    __pointcloud_resize\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the cached pointcloud.\n    \"\"\"\n    read_pointcloud = o3d.io.read_point_cloud\n    write_pointcloud = o3d.io.write_point_cloud\n    # Get the path to the 'webcache' directory:\n    cache_dir = __webcache_path(db, scan_id)\n    dst = cache_dir / __pointcloud_hash(scan_id, fileset_id, file_id, size)\n\n    # Load the pointcloud and resize it:\n    src = __file_path(db, scan_id, fileset_id, file_id)\n    pcd = read_pointcloud(str(src))\n    pcd_npts = len(pcd.points)  # get the number of points\n    if isinstance(size, float):\n        vxs = size\n    else:\n        vxs = 1.8\n    pcd_lowres = __pointcloud_resize(pcd, vxs)\n    pcd_lowres_npts = len(pcd_lowres.points)  # get the number of points\n    write_pointcloud(str(dst), pcd_lowres)\n\n    print(f\"Converted '{src}' to '{dst}', using voxelsize '{vxs}'\")\n    print(f\"  - Original number of points: {pcd_npts}\")\n    print(f\"  - Resized number of points: {pcd_lowres_npts}\")\n\n    return dst\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__pointcloud_cached_path","title":"<code>__pointcloud_cached_path(db, scan_id, fileset_id, file_id, size)</code>","text":"<p>Get The path to the cached pointcloud.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, preview)</code> <p>The requested size of the point cloud. Obviously 'orig' preserve the original point cloud. 'preview' will resize the point cloud to a <code>1.8</code> voxel size. A float will resize the point cloud to given voxel size.</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the cached pointcloud.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __pointcloud_cached_path(db, scan_id, fileset_id, file_id, size):\n    \"\"\"Get The path to the cached pointcloud.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'preview'} or float\n        The requested size of the point cloud.\n        Obviously 'orig' preserve the original point cloud.\n        'preview' will resize the point cloud to a `1.8` voxel size.\n        A float will resize the point cloud to given voxel size.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the cached pointcloud.\n    \"\"\"\n    cache_dir = __webcache_path(db, scan_id)\n    pcd_path = cache_dir / __pointcloud_hash(scan_id, fileset_id, file_id, size)\n    if not pcd_path.is_file():\n        __pointcloud_cache(db, scan_id, fileset_id, file_id, size)\n    return pcd_path\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__pointcloud_hash","title":"<code>__pointcloud_hash(scan_id, fileset_id, file_id, size)</code>","text":"<p>Create a hash for a pointcloud resource.</p> <p>Parameters:</p> Name Type Description Default <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, preview)</code> <p>The requested size ('orig' or 'preview').</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>str</code> <p>The hash of the pointcloud resource.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __pointcloud_hash(scan_id, fileset_id, file_id, size):\n    \"\"\"Create a hash for a pointcloud resource.\n\n    Parameters\n    ----------\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'preview'}\n        The requested size ('orig' or 'preview').\n\n    Returns\n    -------\n    str\n        The hash of the pointcloud resource.\n    \"\"\"\n    return __hash(\"pointcloud\", scan_id, fileset_id, file_id, size) + \".ply\"\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__pointcloud_resize","title":"<code>__pointcloud_resize(pointcloud, voxel_size)</code>","text":"<p>Resize a pointcloud to given voxelsize.</p> <p>Parameters:</p> Name Type Description Default <code>pointcloud</code> <code>PointCloud</code> <p>A pointcloud to resize to given voxelsize.</p> required <code>voxel_size</code> <code>float</code> <p>The voxelsize to use for resampling.</p> required <p>Returns:</p> Type Description <code>PointCloud</code> <p>The resized pointcloud.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __pointcloud_resize(pointcloud, voxel_size):\n    \"\"\"Resize a pointcloud to given voxelsize.\n\n    Parameters\n    ----------\n    pointcloud : open3d.geometry.PointCloud\n        A pointcloud to resize to given voxelsize.\n    voxel_size : float\n        The voxelsize to use for resampling.\n\n    Returns\n    -------\n    open3d.geometry.PointCloud\n        The resized pointcloud.\n    \"\"\"\n    return pointcloud.voxel_down_sample(voxel_size)\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.__webcache_path","title":"<code>__webcache_path(db, scan_id)</code>","text":"<p>Creates a 'webcache' directory in the scan directory.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The path to the 'webcache' directory for the given scan.</p> Source code in <code>plantdb/webcache.py</code> <pre><code>def __webcache_path(db, scan_id):\n    \"\"\"Creates a 'webcache' directory in the scan directory.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the 'webcache' directory for the given scan.\n    \"\"\"\n    directory = db.basedir / scan_id / \"webcache\"\n    directory.mkdir(exist_ok=True)\n    return directory\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.image_path","title":"<code>image_path(db, scan_id, fileset_id, file_id, size='orig')</code>","text":"<p>Get the path to an image file.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, large, thumb)</code> <p>If an integer, use  it as the size of the cached image to create and return. Else, should be a string, defaulting to <code>'orig'</code>, and it works as follows:    * <code>'thumb'</code>: image max width and height to <code>150</code>.    * <code>'large'</code>: image max width and height to <code>1500</code>;    * <code>'orig'</code>: original image, no chache;</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the original or cached image.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.webcache import image_path\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; # Example 1: Get the original image:\n&gt;&gt;&gt; image_path(db, 'real_plant_analyzed', 'images', '00000_rgb', 'orig')\nPosixPath('/tmp/ROMI_DB/real_plant_analyzed/images/00000_rgb.jpg')\n&gt;&gt;&gt; # Example 2: Get a thumbnail of the image:\n&gt;&gt;&gt; image_path(db, 'real_plant_analyzed', 'images', '00000_rgb', 'thumb')\nPosixPath('/tmp/ROMI_DB/real_plant_analyzed/webcache/6fbae08f195837c511af7c2864d075dd5cd153bc.jpeg')\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/webcache.py</code> <pre><code>def image_path(db, scan_id, fileset_id, file_id, size='orig'):\n    \"\"\"Get the path to an image file.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'large', 'thumb'} or int, optional\n        If an integer, use  it as the size of the cached image to create and return.\n        Else, should be a string, defaulting to `'orig'`, and it works as follows:\n           * `'thumb'`: image max width and height to `150`.\n           * `'large'`: image max width and height to `1500`;\n           * `'orig'`: original image, no chache;\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the original or cached image.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.webcache import image_path\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; # Example 1: Get the original image:\n    &gt;&gt;&gt; image_path(db, 'real_plant_analyzed', 'images', '00000_rgb', 'orig')\n    PosixPath('/tmp/ROMI_DB/real_plant_analyzed/images/00000_rgb.jpg')\n    &gt;&gt;&gt; # Example 2: Get a thumbnail of the image:\n    &gt;&gt;&gt; image_path(db, 'real_plant_analyzed', 'images', '00000_rgb', 'thumb')\n    PosixPath('/tmp/ROMI_DB/real_plant_analyzed/webcache/6fbae08f195837c511af7c2864d075dd5cd153bc.jpeg')\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    try:\n        size = int(size)\n    except ValueError:\n        pass\n    print(f\"Requested '{file_id}' with size '{size}' (as '{type(size).__name__}')\")\n\n    if size == \"orig\":\n        return __file_path(db, scan_id, fileset_id, file_id)\n    elif size == \"large\" or size == \"thumb\" or isinstance(size, int):\n        return __image_cached_path(db, scan_id, fileset_id, file_id, size)\n    else:\n        raise ValueError(f\"Unknown image size specification: {size}\")\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.mesh_path","title":"<code>mesh_path(db, scan_id, fileset_id, file_id, size='orig')</code>","text":"<p>Get the path to a mesh file.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>any</code> <p>UNUSED.</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the original mesh.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.webcache import mesh_path\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; # Example 1: Get the original pointcloud:\n&gt;&gt;&gt; mesh_path(db, 'real_plant_analyzed', 'TriangleMesh_9_most_connected_t_open3d_00e095c359', 'TriangleMesh', 'orig')\nPosixPath('/tmp/ROMI_DB/real_plant_analyzed/TriangleMesh_9_most_connected_t_open3d_00e095c359/TriangleMesh.ply')\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/webcache.py</code> <pre><code>def mesh_path(db, scan_id, fileset_id, file_id, size='orig'):\n    \"\"\"Get the path to a mesh file.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : any, optional\n        UNUSED.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the original mesh.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.webcache import mesh_path\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; # Example 1: Get the original pointcloud:\n    &gt;&gt;&gt; mesh_path(db, 'real_plant_analyzed', 'TriangleMesh_9_most_connected_t_open3d_00e095c359', 'TriangleMesh', 'orig')\n    PosixPath('/tmp/ROMI_DB/real_plant_analyzed/TriangleMesh_9_most_connected_t_open3d_00e095c359/TriangleMesh.ply')\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    print(\"Using original mesh file\")\n    return __file_path(db, scan_id, fileset_id, file_id)\n</code></pre>"},{"location":"reference/plantdb/webcache/#plantdb.webcache.pointcloud_path","title":"<code>pointcloud_path(db, scan_id, fileset_id, file_id, size='orig')</code>","text":"<p>Get the path to a point cloud file.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>FSDB</code> <p>The database object.</p> required <code>scan_id</code> <code>str</code> <p>The ID of the scan in the database.</p> required <code>fileset_id</code> <code>str</code> <p>The ID of the fileset in the scan.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file in the fileset.</p> required <code>size</code> <code>(orig, preview)</code> <p>The requested size of the point cloud. Obviously 'orig' preserve the original point cloud. 'preview' will resize the point cloud to a <code>1.8</code> voxel size. A float will resize the point cloud to given voxel size. Default to 'orig'.</p> <code>'orig'</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path to the original or cached pointcloud.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from plantdb.webcache import pointcloud_path\n&gt;&gt;&gt; from plantdb.test_database import test_database\n&gt;&gt;&gt; db = test_database('real_plant_analyzed')\n&gt;&gt;&gt; db.connect()\n&gt;&gt;&gt; # Example 1: Get the original pointcloud:\n&gt;&gt;&gt; pointcloud_path(db, 'real_plant_analyzed', 'PointCloud_1_0_1_0_10_0_7ee836e5a9', 'PointCloud', 'orig')\nPosixPath('/tmp/ROMI_DB/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud.ply')\n&gt;&gt;&gt; # Example 2: Get a down-sampled version of the pointcloud:\n&gt;&gt;&gt; pointcloud_path(db, 'real_plant_analyzed', 'PointCloud_1_0_1_0_10_0_7ee836e5a9', 'PointCloud', 'preview')\nPosixPath('/tmp/ROMI_DB/real_plant_analyzed/webcache/77e25820ddd8facd7d7a4bc5b17ad3c81046becc.ply')\n&gt;&gt;&gt; db.disconnect()\n</code></pre> Source code in <code>plantdb/webcache.py</code> <pre><code>def pointcloud_path(db, scan_id, fileset_id, file_id, size='orig'):\n    \"\"\"Get the path to a point cloud file.\n\n    Parameters\n    ----------\n    db : plantdb.fsdb.FSDB\n        The database object.\n    scan_id : str\n        The ID of the scan in the database.\n    fileset_id : str\n        The ID of the fileset in the scan.\n    file_id : str\n        The ID of the file in the fileset.\n    size : {'orig', 'preview'} or float, optional\n        The requested size of the point cloud.\n        Obviously 'orig' preserve the original point cloud.\n        'preview' will resize the point cloud to a `1.8` voxel size.\n        A float will resize the point cloud to given voxel size.\n        Default to 'orig'.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the original or cached pointcloud.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from plantdb.webcache import pointcloud_path\n    &gt;&gt;&gt; from plantdb.test_database import test_database\n    &gt;&gt;&gt; db = test_database('real_plant_analyzed')\n    &gt;&gt;&gt; db.connect()\n    &gt;&gt;&gt; # Example 1: Get the original pointcloud:\n    &gt;&gt;&gt; pointcloud_path(db, 'real_plant_analyzed', 'PointCloud_1_0_1_0_10_0_7ee836e5a9', 'PointCloud', 'orig')\n    PosixPath('/tmp/ROMI_DB/real_plant_analyzed/PointCloud_1_0_1_0_10_0_7ee836e5a9/PointCloud.ply')\n    &gt;&gt;&gt; # Example 2: Get a down-sampled version of the pointcloud:\n    &gt;&gt;&gt; pointcloud_path(db, 'real_plant_analyzed', 'PointCloud_1_0_1_0_10_0_7ee836e5a9', 'PointCloud', 'preview')\n    PosixPath('/tmp/ROMI_DB/real_plant_analyzed/webcache/77e25820ddd8facd7d7a4bc5b17ad3c81046becc.ply')\n    &gt;&gt;&gt; db.disconnect()\n    \"\"\"\n    if size == \"orig\":\n        print(\"Using original pointcloud file\")\n        return __file_path(db, scan_id, fileset_id, file_id)\n    elif size == \"preview\":\n        print(\"Using cached pointcloud file\")\n        return __pointcloud_cached_path(db, scan_id, fileset_id, file_id, size)\n    else:\n        try:\n            path = __pointcloud_cached_path(db, scan_id, fileset_id, file_id, float(size))\n        except ValueError:\n            raise ValueError(f\"Unknown pointcloud size specification: {size}\")\n        else:\n            return path\n</code></pre>"},{"location":"reference/plantdb/cli/","title":"cli","text":""},{"location":"reference/plantdb/cli/fsdb_check/","title":"fsdb_check","text":""},{"location":"reference/plantdb/cli/fsdb_check/#plantdb.cli.fsdb_check.backup_file","title":"<code>backup_file(file)</code>","text":"<p>Backup a file by creating a timestamped copy.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str or Path</code> <p>The path to the file to backup.</p> required Source code in <code>plantdb/cli/fsdb_check.py</code> <pre><code>def backup_file(file):\n    \"\"\"Backup a file by creating a timestamped copy.\n\n    Parameters\n    ----------\n    file : str or pathlib.Path\n        The path to the file to backup.\n    \"\"\"\n    bak_fname = backup_filename(file)\n    copy(file, bak_fname)\n    return bak_fname\n</code></pre>"},{"location":"reference/plantdb/cli/fsdb_check/#plantdb.cli.fsdb_check.backup_filename","title":"<code>backup_filename(file)</code>","text":"<p>Create a backup a filename by adding a timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str or Path</code> <p>The path to the file to backup.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; backup_filename(\"test/file.json\")\nPosixPath('test/file_230601_105815.json')\n</code></pre> Source code in <code>plantdb/cli/fsdb_check.py</code> <pre><code>def backup_filename(file):\n    \"\"\"Create a backup a filename by adding a timestamp.\n\n    Parameters\n    ----------\n    file : str or pathlib.Path\n        The path to the file to backup.\n\n    Examples\n    --------\n    &gt;&gt;&gt; backup_filename(\"test/file.json\")\n    PosixPath('test/file_230601_105815.json')\n    \"\"\"\n    file = Path(file)\n    now = datetime.datetime.now()\n    timestamp = now.strftime(\"%y%m%d_%H%M%S\")\n    fname = file.stem\n    return file.with_stem(f\"{fname}_{timestamp}\")\n</code></pre>"},{"location":"reference/plantdb/cli/fsdb_check/#plantdb.cli.fsdb_check.same_jsons","title":"<code>same_jsons(file_a, file_b)</code>","text":"<p>Test if two JSON files have the same content.</p> Source code in <code>plantdb/cli/fsdb_check.py</code> <pre><code>def same_jsons(file_a, file_b) -&gt; bool:\n    \"\"\"Test if two JSON files have the same content.\"\"\"\n    # Basic check, maybe using a third-party lib like `deepdiff` could give more insight.\n    file_a = Path(file_a)\n    file_b = Path(file_b)\n    json_a = _load_json(file_a)\n    json_b = _load_json(file_b)\n    return json_a == json_b\n</code></pre>"},{"location":"reference/plantdb/cli/fsdb_import_file/","title":"fsdb_import_file","text":"<p>Import a file as a <code>File</code> in a known <code>Fileset</code>.</p>"},{"location":"reference/plantdb/cli/fsdb_import_folder/","title":"fsdb_import_folder","text":"<p>Import a folder as a <code>Fileset</code> in a known <code>Scan</code>.</p>"},{"location":"reference/plantdb/cli/fsdb_import_images/","title":"fsdb_import_images","text":"<p>Import the content of a folder as an 'images' <code>Fileset</code> to a new <code>Scan</code> dataset.</p>"},{"location":"reference/plantdb/cli/fsdb_import_images/#plantdb.cli.fsdb_import_images.list_image_files","title":"<code>list_image_files(images_path)</code>","text":"<p>List image files in the path.</p> <p>Parameters:</p> Name Type Description Default <code>images_path</code> <code>Path</code> <p>The path to the folder containing the dataset.</p> required <p>Returns:</p> Type Description <code>list</code> <p>The list of image files, selected by their extensions.</p> Source code in <code>plantdb/cli/fsdb_import_images.py</code> <pre><code>def list_image_files(images_path):\n    \"\"\"List image files in the path.\n\n    Parameters\n    ----------\n    images_path : pathlib.Path\n        The path to the folder containing the dataset.\n\n    Returns\n    -------\n    list\n        The list of image files, selected by their extensions.\n\n    \"\"\"\n    return [f for f in images_path.iterdir() if f.suffix in IMG_EXT]\n</code></pre>"},{"location":"reference/plantdb/cli/fsdb_rest_api/","title":"fsdb_rest_api","text":"<p>Serve the plant database through a REST API.</p>"},{"location":"reference/plantdb/cli/fsdb_sync/","title":"fsdb_sync","text":"<p>Synchronize two <code>FSDB</code> databases.</p>"},{"location":"reference/plantdb/cli/shared_fsdb/","title":"shared_fsdb","text":"<p>Create a local plantdb database (FSDB) using shared datasets.</p>"}]}